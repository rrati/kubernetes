/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [24]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(24)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj155 int
	var yyb155 bool
	var yyhl155 bool = l >= 0
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj155++
		if yyhl155 {
			yyb155 = yyj155 > l
		} else {
			yyb155 = r.CheckBreak()
		}
		if yyb155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [23]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.FlexVolume != nil
			yyq181[12] = x.Cinder != nil
			yyq181[13] = x.CephFS != nil
			yyq181[14] = x.Flocker != nil
			yyq181[15] = x.DownwardAPI != nil
			yyq181[16] = x.FC != nil
			yyq181[17] = x.AzureFile != nil
			yyq181[18] = x.ConfigMap != nil
			yyq181[19] = x.VsphereVolume != nil
			yyq181[20] = x.Quobyte != nil
			yyq181[21] = x.AzureDisk != nil
			yyq181[22] = x.PhotonPersistentDisk != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(23)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym205 := z.DecBinary()
	_ = yym205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct206 := r.ContainerType()
		if yyct206 == codecSelferValueTypeMap1234 {
			yyl206 := r.ReadMapStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl206, d)
			}
		} else if yyct206 == codecSelferValueTypeArray1234 {
			yyl206 := r.ReadArrayStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys207Slc
	var yyhl207 bool = l >= 0
	for yyj207 := 0; ; yyj207++ {
		if yyhl207 {
			if yyj207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys207Slc = r.DecodeBytes(yys207Slc, true, true)
		yys207 := string(yys207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys207 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys207)
		} // end switch yys207
	} // end for yyj207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj231 int
	var yyb231 bool
	var yyhl231 bool = l >= 0
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj231++
		if yyhl231 {
			yyb231 = yyj231 > l
		} else {
			yyb231 = r.CheckBreak()
		}
		if yyb231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [2]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[1] = x.ReadOnly != false
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(2)
			} else {
				yynn256 = 1
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym258 := z.EncBinary()
				_ = yym258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym259 := z.EncBinary()
				_ = yym259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym263 := z.DecBinary()
	_ = yym263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct264 := r.ContainerType()
		if yyct264 == codecSelferValueTypeMap1234 {
			yyl264 := r.ReadMapStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl264, d)
			}
		} else if yyct264 == codecSelferValueTypeArray1234 {
			yyl264 := r.ReadArrayStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys265Slc
	var yyhl265 bool = l >= 0
	for yyj265 := 0; ; yyj265++ {
		if yyhl265 {
			if yyj265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys265Slc = r.DecodeBytes(yys265Slc, true, true)
		yys265 := string(yys265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys265 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys265)
		} // end switch yys265
	} // end for yyj265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj268 int
	var yyb268 bool
	var yyhl268 bool = l >= 0
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj268++
		if yyhl268 {
			yyb268 = yyj268 > l
		} else {
			yyb268 = r.CheckBreak()
		}
		if yyb268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym271 := z.EncBinary()
		_ = yym271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep272 := !z.EncBinary()
			yy2arr272 := z.EncBasicHandle().StructToArray
			var yyq272 [17]bool
			_, _, _ = yysep272, yyq272, yy2arr272
			const yyr272 bool = false
			yyq272[0] = x.GCEPersistentDisk != nil
			yyq272[1] = x.AWSElasticBlockStore != nil
			yyq272[2] = x.HostPath != nil
			yyq272[3] = x.Glusterfs != nil
			yyq272[4] = x.NFS != nil
			yyq272[5] = x.RBD != nil
			yyq272[6] = x.ISCSI != nil
			yyq272[7] = x.Cinder != nil
			yyq272[8] = x.CephFS != nil
			yyq272[9] = x.FC != nil
			yyq272[10] = x.Flocker != nil
			yyq272[11] = x.FlexVolume != nil
			yyq272[12] = x.AzureFile != nil
			yyq272[13] = x.VsphereVolume != nil
			yyq272[14] = x.Quobyte != nil
			yyq272[15] = x.AzureDisk != nil
			yyq272[16] = x.PhotonPersistentDisk != nil
			var yynn272 int
			if yyr272 || yy2arr272 {
				r.EncodeArrayStart(17)
			} else {
				yynn272 = 0
				for _, b := range yyq272 {
					if b {
						yynn272++
					}
				}
				r.EncodeMapStart(yynn272)
				yynn272 = 0
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym290 := z.DecBinary()
	_ = yym290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct291 := r.ContainerType()
		if yyct291 == codecSelferValueTypeMap1234 {
			yyl291 := r.ReadMapStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl291, d)
			}
		} else if yyct291 == codecSelferValueTypeArray1234 {
			yyl291 := r.ReadArrayStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys292Slc
	var yyhl292 bool = l >= 0
	for yyj292 := 0; ; yyj292++ {
		if yyhl292 {
			if yyj292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys292Slc = r.DecodeBytes(yys292Slc, true, true)
		yys292 := string(yys292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys292 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys292)
		} // end switch yys292
	} // end for yyj292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj310 int
	var yyb310 bool
	var yyhl310 bool = l >= 0
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj310++
		if yyhl310 {
			yyb310 = yyj310 > l
		} else {
			yyb310 = r.CheckBreak()
		}
		if yyb310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [5]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Kind != ""
			yyq329[1] = x.APIVersion != ""
			yyq329[2] = true
			yyq329[3] = true
			yyq329[4] = true
			var yynn329 int
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(5)
			} else {
				yynn329 = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
				yynn329 = 0
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[2] {
					yy337 := &x.ObjectMeta
					yy337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ObjectMeta
					yy338.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[3] {
					yy340 := &x.Spec
					yy340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy341 := &x.Spec
					yy341.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[4] {
					yy343 := &x.Status
					yy343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy344 := &x.Status
					yy344.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym345 := z.DecBinary()
	_ = yym345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct346 := r.ContainerType()
		if yyct346 == codecSelferValueTypeMap1234 {
			yyl346 := r.ReadMapStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl346, d)
			}
		} else if yyct346 == codecSelferValueTypeArray1234 {
			yyl346 := r.ReadArrayStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys347Slc
	var yyhl347 bool = l >= 0
	for yyj347 := 0; ; yyj347++ {
		if yyhl347 {
			if yyj347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys347Slc = r.DecodeBytes(yys347Slc, true, true)
		yys347 := string(yys347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv350 := &x.ObjectMeta
				yyv350.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv351 := &x.Spec
				yyv351.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv352 := &x.Status
				yyv352.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys347)
		} // end switch yys347
	} // end for yyj347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj353 int
	var yyb353 bool
	var yyhl353 bool = l >= 0
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv356 := &x.ObjectMeta
		yyv356.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv357 := &x.Spec
		yyv357.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv358 := &x.Status
		yyv358.CodecDecodeSelf(d)
	}
	for {
		yyj353++
		if yyhl353 {
			yyb353 = yyj353 > l
		} else {
			yyb353 = r.CheckBreak()
		}
		if yyb353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [21]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[0] = len(x.Capacity) != 0
			yyq360[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq360[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq360[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq360[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq360[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq360[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq360[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq360[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq360[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq360[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq360[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq360[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq360[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq360[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq360[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq360[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq360[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq360[18] = len(x.AccessModes) != 0
			yyq360[19] = x.ClaimRef != nil
			yyq360[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(21)
			} else {
				yynn360 = 0
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr360 || yy2arr360 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr360 || yy2arr360 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr360 || yy2arr360 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr360 || yy2arr360 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr360 || yy2arr360 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr360 || yy2arr360 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr360 || yy2arr360 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr360 || yy2arr360 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr360 || yy2arr360 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr360 || yy2arr360 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr360 || yy2arr360 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr360 || yy2arr360 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr360 || yy2arr360 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr360 || yy2arr360 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr360 || yy2arr360 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr360 || yy2arr360 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr360 || yy2arr360 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym380 := z.EncBinary()
						_ = yym380
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym381 := z.EncBinary()
						_ = yym381
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv387 := &x.Capacity
				yyv387.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv405 := &x.AccessModes
				yym406 := z.DecBinary()
				_ = yym406
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv405), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj409 int
	var yyb409 bool
	var yyhl409 bool = l >= 0
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv410 := &x.Capacity
		yyv410.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv428 := &x.AccessModes
		yym429 := z.DecBinary()
		_ = yym429
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv428), d)
		}
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj409++
		if yyhl409 {
			yyb409 = yyj409 > l
		} else {
			yyb409 = r.CheckBreak()
		}
		if yyb409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym432 := z.EncBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym433 := z.DecBinary()
	_ = yym433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym434 := z.EncBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep435 := !z.EncBinary()
			yy2arr435 := z.EncBasicHandle().StructToArray
			var yyq435 [3]bool
			_, _, _ = yysep435, yyq435, yy2arr435
			const yyr435 bool = false
			yyq435[0] = x.Phase != ""
			yyq435[1] = x.Message != ""
			yyq435[2] = x.Reason != ""
			var yynn435 int
			if yyr435 || yy2arr435 {
				r.EncodeArrayStart(3)
			} else {
				yynn435 = 0
				for _, b := range yyq435 {
					if b {
						yynn435++
					}
				}
				r.EncodeMapStart(yynn435)
				yynn435 = 0
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[1] {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[2] {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym443 := z.DecBinary()
	_ = yym443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct444 := r.ContainerType()
		if yyct444 == codecSelferValueTypeMap1234 {
			yyl444 := r.ReadMapStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl444, d)
			}
		} else if yyct444 == codecSelferValueTypeArray1234 {
			yyl444 := r.ReadArrayStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys445Slc
	var yyhl445 bool = l >= 0
	for yyj445 := 0; ; yyj445++ {
		if yyhl445 {
			if yyj445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys445Slc = r.DecodeBytes(yys445Slc, true, true)
		yys445 := string(yys445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys445 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys445)
		} // end switch yys445
	} // end for yyj445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym453 := z.EncBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep454 := !z.EncBinary()
			yy2arr454 := z.EncBasicHandle().StructToArray
			var yyq454 [4]bool
			_, _, _ = yysep454, yyq454, yy2arr454
			const yyr454 bool = false
			yyq454[0] = x.Kind != ""
			yyq454[1] = x.APIVersion != ""
			yyq454[2] = true
			var yynn454 int
			if yyr454 || yy2arr454 {
				r.EncodeArrayStart(4)
			} else {
				yynn454 = 1
				for _, b := range yyq454 {
					if b {
						yynn454++
					}
				}
				r.EncodeMapStart(yynn454)
				yynn454 = 0
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[0] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[1] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[2] {
					yy462 := &x.ListMeta
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else {
						z.EncFallback(yy462)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy464 := &x.ListMeta
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy464) {
					} else {
						z.EncFallback(yy464)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct470 := r.ContainerType()
		if yyct470 == codecSelferValueTypeMap1234 {
			yyl470 := r.ReadMapStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl470, d)
			}
		} else if yyct470 == codecSelferValueTypeArray1234 {
			yyl470 := r.ReadArrayStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys471Slc
	var yyhl471 bool = l >= 0
	for yyj471 := 0; ; yyj471++ {
		if yyhl471 {
			if yyj471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys471Slc = r.DecodeBytes(yys471Slc, true, true)
		yys471 := string(yys471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv474 := &x.ListMeta
				yym475 := z.DecBinary()
				_ = yym475
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv474) {
				} else {
					z.DecFallback(yyv474, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv476 := &x.Items
				yym477 := z.DecBinary()
				_ = yym477
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv476), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys471)
		} // end switch yys471
	} // end for yyj471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj478 int
	var yyb478 bool
	var yyhl478 bool = l >= 0
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv481 := &x.ListMeta
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv483 := &x.Items
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv483), d)
		}
	}
	for {
		yyj478++
		if yyhl478 {
			yyb478 = yyj478 > l
		} else {
			yyb478 = r.CheckBreak()
		}
		if yyb478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym485 := z.EncBinary()
		_ = yym485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep486 := !z.EncBinary()
			yy2arr486 := z.EncBasicHandle().StructToArray
			var yyq486 [5]bool
			_, _, _ = yysep486, yyq486, yy2arr486
			const yyr486 bool = false
			yyq486[0] = x.Kind != ""
			yyq486[1] = x.APIVersion != ""
			yyq486[2] = true
			yyq486[3] = true
			yyq486[4] = true
			var yynn486 int
			if yyr486 || yy2arr486 {
				r.EncodeArrayStart(5)
			} else {
				yynn486 = 0
				for _, b := range yyq486 {
					if b {
						yynn486++
					}
				}
				r.EncodeMapStart(yynn486)
				yynn486 = 0
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[0] {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[1] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[2] {
					yy494 := &x.ObjectMeta
					yy494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy495 := &x.ObjectMeta
					yy495.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[3] {
					yy497 := &x.Spec
					yy497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.Spec
					yy498.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[4] {
					yy500 := &x.Status
					yy500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy501 := &x.Status
					yy501.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct503 := r.ContainerType()
		if yyct503 == codecSelferValueTypeMap1234 {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if yyct503 == codecSelferValueTypeArray1234 {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv507 := &x.ObjectMeta
				yyv507.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv508 := &x.Spec
				yyv508.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv509 := &x.Status
				yyv509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj510 int
	var yyb510 bool
	var yyhl510 bool = l >= 0
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv513 := &x.ObjectMeta
		yyv513.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv514 := &x.Spec
		yyv514.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv515 := &x.Status
		yyv515.CodecDecodeSelf(d)
	}
	for {
		yyj510++
		if yyhl510 {
			yyb510 = yyj510 > l
		} else {
			yyb510 = r.CheckBreak()
		}
		if yyb510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym516 := z.EncBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep517 := !z.EncBinary()
			yy2arr517 := z.EncBasicHandle().StructToArray
			var yyq517 [4]bool
			_, _, _ = yysep517, yyq517, yy2arr517
			const yyr517 bool = false
			yyq517[0] = x.Kind != ""
			yyq517[1] = x.APIVersion != ""
			yyq517[2] = true
			var yynn517 int
			if yyr517 || yy2arr517 {
				r.EncodeArrayStart(4)
			} else {
				yynn517 = 1
				for _, b := range yyq517 {
					if b {
						yynn517++
					}
				}
				r.EncodeMapStart(yynn517)
				yynn517 = 0
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[0] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[1] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[2] {
					yy525 := &x.ListMeta
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy525) {
					} else {
						z.EncFallback(yy525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy527 := &x.ListMeta
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy527) {
					} else {
						z.EncFallback(yy527)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv537 := &x.ListMeta
				yym538 := z.DecBinary()
				_ = yym538
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv537) {
				} else {
					z.DecFallback(yyv537, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv539 := &x.Items
				yym540 := z.DecBinary()
				_ = yym540
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv544 := &x.ListMeta
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv544) {
		} else {
			z.DecFallback(yyv544, false)
		}
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv546 := &x.Items
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv546), d)
		}
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym548 := z.EncBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep549 := !z.EncBinary()
			yy2arr549 := z.EncBasicHandle().StructToArray
			var yyq549 [4]bool
			_, _, _ = yysep549, yyq549, yy2arr549
			const yyr549 bool = false
			yyq549[0] = len(x.AccessModes) != 0
			yyq549[1] = x.Selector != nil
			yyq549[2] = true
			yyq549[3] = x.VolumeName != ""
			var yynn549 int
			if yyr549 || yy2arr549 {
				r.EncodeArrayStart(4)
			} else {
				yynn549 = 0
				for _, b := range yyq549 {
					if b {
						yynn549++
					}
				}
				r.EncodeMapStart(yynn549)
				yynn549 = 0
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[2] {
					yy557 := &x.Resources
					yy557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy558 := &x.Resources
					yy558.CodecEncodeSelf(e)
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[3] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym562 := z.DecBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct563 := r.ContainerType()
		if yyct563 == codecSelferValueTypeMap1234 {
			yyl563 := r.ReadMapStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl563, d)
			}
		} else if yyct563 == codecSelferValueTypeArray1234 {
			yyl563 := r.ReadArrayStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys564Slc
	var yyhl564 bool = l >= 0
	for yyj564 := 0; ; yyj564++ {
		if yyhl564 {
			if yyj564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys564Slc = r.DecodeBytes(yys564Slc, true, true)
		yys564 := string(yys564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys564 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym568 := z.DecBinary()
				_ = yym568
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv569 := &x.Resources
				yyv569.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys564)
		} // end switch yys564
	} // end for yyj564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv572 := &x.AccessModes
		yym573 := z.DecBinary()
		_ = yym573
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym575 := z.DecBinary()
		_ = yym575
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv576 := &x.Resources
		yyv576.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym578 := z.EncBinary()
		_ = yym578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep579 := !z.EncBinary()
			yy2arr579 := z.EncBasicHandle().StructToArray
			var yyq579 [3]bool
			_, _, _ = yysep579, yyq579, yy2arr579
			const yyr579 bool = false
			yyq579[0] = x.Phase != ""
			yyq579[1] = len(x.AccessModes) != 0
			yyq579[2] = len(x.Capacity) != 0
			var yynn579 int
			if yyr579 || yy2arr579 {
				r.EncodeArrayStart(3)
			} else {
				yynn579 = 0
				for _, b := range yyq579 {
					if b {
						yynn579++
					}
				}
				r.EncodeMapStart(yynn579)
				yynn579 = 0
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym582 := z.EncBinary()
						_ = yym582
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym583 := z.EncBinary()
						_ = yym583
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct586 := r.ContainerType()
		if yyct586 == codecSelferValueTypeMap1234 {
			yyl586 := r.ReadMapStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl586, d)
			}
		} else if yyct586 == codecSelferValueTypeArray1234 {
			yyl586 := r.ReadArrayStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys587Slc
	var yyhl587 bool = l >= 0
	for yyj587 := 0; ; yyj587++ {
		if yyhl587 {
			if yyj587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys587Slc = r.DecodeBytes(yys587Slc, true, true)
		yys587 := string(yys587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys587 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv589 := &x.AccessModes
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv589), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv591 := &x.Capacity
				yyv591.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys587)
		} // end switch yys587
	} // end for yyj587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv594 := &x.AccessModes
		yym595 := z.DecBinary()
		_ = yym595
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv594), d)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv596 := &x.Capacity
		yyv596.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym597 := z.EncBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym598 := z.DecBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [1]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(1)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym608 := z.DecBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct609 := r.ContainerType()
		if yyct609 == codecSelferValueTypeMap1234 {
			yyl609 := r.ReadMapStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl609, d)
			}
		} else if yyct609 == codecSelferValueTypeArray1234 {
			yyl609 := r.ReadArrayStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys610Slc
	var yyhl610 bool = l >= 0
	for yyj610 := 0; ; yyj610++ {
		if yyhl610 {
			if yyj610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys610Slc = r.DecodeBytes(yys610Slc, true, true)
		yys610 := string(yys610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys610 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys610)
		} // end switch yys610
	} // end for yyj610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym614 := z.EncBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep615 := !z.EncBinary()
			yy2arr615 := z.EncBasicHandle().StructToArray
			var yyq615 [1]bool
			_, _, _ = yysep615, yyq615, yy2arr615
			const yyr615 bool = false
			yyq615[0] = x.Medium != ""
			var yynn615 int
			if yyr615 || yy2arr615 {
				r.EncodeArrayStart(1)
			} else {
				yynn615 = 0
				for _, b := range yyq615 {
					if b {
						yynn615++
					}
				}
				r.EncodeMapStart(yynn615)
				yynn615 = 0
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq615[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym623 := z.EncBinary()
		_ = yym623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep624 := !z.EncBinary()
			yy2arr624 := z.EncBasicHandle().StructToArray
			var yyq624 [3]bool
			_, _, _ = yysep624, yyq624, yy2arr624
			const yyr624 bool = false
			yyq624[2] = x.ReadOnly != false
			var yynn624 int
			if yyr624 || yy2arr624 {
				r.EncodeArrayStart(3)
			} else {
				yynn624 = 2
				for _, b := range yyq624 {
					if b {
						yynn624++
					}
				}
				r.EncodeMapStart(yynn624)
				yynn624 = 0
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym626 := z.EncBinary()
				_ = yym626
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym627 := z.EncBinary()
				_ = yym627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym629 := z.EncBinary()
				_ = yym629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym630 := z.EncBinary()
				_ = yym630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq624[2] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq624[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym634 := z.DecBinary()
	_ = yym634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct635 := r.ContainerType()
		if yyct635 == codecSelferValueTypeMap1234 {
			yyl635 := r.ReadMapStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl635, d)
			}
		} else if yyct635 == codecSelferValueTypeArray1234 {
			yyl635 := r.ReadArrayStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys636Slc
	var yyhl636 bool = l >= 0
	for yyj636 := 0; ; yyj636++ {
		if yyhl636 {
			if yyj636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys636Slc = r.DecodeBytes(yys636Slc, true, true)
		yys636 := string(yys636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys636 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys636)
		} // end switch yys636
	} // end for yyj636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj640 int
	var yyb640 bool
	var yyhl640 bool = l >= 0
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj640++
		if yyhl640 {
			yyb640 = yyj640 > l
		} else {
			yyb640 = r.CheckBreak()
		}
		if yyb640 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj640-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym644 := z.EncBinary()
		_ = yym644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep645 := !z.EncBinary()
			yy2arr645 := z.EncBasicHandle().StructToArray
			var yyq645 [8]bool
			_, _, _ = yysep645, yyq645, yy2arr645
			const yyr645 bool = false
			yyq645[2] = x.FSType != ""
			yyq645[3] = x.RBDPool != ""
			yyq645[4] = x.RadosUser != ""
			yyq645[5] = x.Keyring != ""
			yyq645[6] = x.SecretRef != nil
			yyq645[7] = x.ReadOnly != false
			var yynn645 int
			if yyr645 || yy2arr645 {
				r.EncodeArrayStart(8)
			} else {
				yynn645 = 2
				for _, b := range yyq645 {
					if b {
						yynn645++
					}
				}
				r.EncodeMapStart(yynn645)
				yynn645 = 0
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym650 := z.EncBinary()
				_ = yym650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym651 := z.EncBinary()
				_ = yym651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[2] {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[3] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[4] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[5] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq645[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[7] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq645[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym668 := z.DecBinary()
	_ = yym668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct669 := r.ContainerType()
		if yyct669 == codecSelferValueTypeMap1234 {
			yyl669 := r.ReadMapStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl669, d)
			}
		} else if yyct669 == codecSelferValueTypeArray1234 {
			yyl669 := r.ReadArrayStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys670Slc
	var yyhl670 bool = l >= 0
	for yyj670 := 0; ; yyj670++ {
		if yyhl670 {
			if yyj670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys670Slc = r.DecodeBytes(yys670Slc, true, true)
		yys670 := string(yys670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys670 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv671 := &x.CephMonitors
				yym672 := z.DecBinary()
				_ = yym672
				if false {
				} else {
					z.F.DecSliceStringX(yyv671, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys670)
		} // end switch yys670
	} // end for yyj670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj680 int
	var yyb680 bool
	var yyhl680 bool = l >= 0
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv681 := &x.CephMonitors
		yym682 := z.DecBinary()
		_ = yym682
		if false {
		} else {
			z.F.DecSliceStringX(yyv681, false, d)
		}
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj680++
		if yyhl680 {
			yyb680 = yyj680 > l
		} else {
			yyb680 = r.CheckBreak()
		}
		if yyb680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym690 := z.EncBinary()
		_ = yym690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep691 := !z.EncBinary()
			yy2arr691 := z.EncBasicHandle().StructToArray
			var yyq691 [3]bool
			_, _, _ = yysep691, yyq691, yy2arr691
			const yyr691 bool = false
			yyq691[1] = x.FSType != ""
			yyq691[2] = x.ReadOnly != false
			var yynn691 int
			if yyr691 || yy2arr691 {
				r.EncodeArrayStart(3)
			} else {
				yynn691 = 1
				for _, b := range yyq691 {
					if b {
						yynn691++
					}
				}
				r.EncodeMapStart(yynn691)
				yynn691 = 0
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[1] {
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq691[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[2] {
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq691[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym701 := z.DecBinary()
	_ = yym701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct702 := r.ContainerType()
		if yyct702 == codecSelferValueTypeMap1234 {
			yyl702 := r.ReadMapStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl702, d)
			}
		} else if yyct702 == codecSelferValueTypeArray1234 {
			yyl702 := r.ReadArrayStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys703Slc
	var yyhl703 bool = l >= 0
	for yyj703 := 0; ; yyj703++ {
		if yyhl703 {
			if yyj703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys703Slc = r.DecodeBytes(yys703Slc, true, true)
		yys703 := string(yys703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys703 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys703)
		} // end switch yys703
	} // end for yyj703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj707 int
	var yyb707 bool
	var yyhl707 bool = l >= 0
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj707++
		if yyhl707 {
			yyb707 = yyj707 > l
		} else {
			yyb707 = r.CheckBreak()
		}
		if yyb707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym711 := z.EncBinary()
		_ = yym711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep712 := !z.EncBinary()
			yy2arr712 := z.EncBasicHandle().StructToArray
			var yyq712 [6]bool
			_, _, _ = yysep712, yyq712, yy2arr712
			const yyr712 bool = false
			yyq712[1] = x.Path != ""
			yyq712[2] = x.User != ""
			yyq712[3] = x.SecretFile != ""
			yyq712[4] = x.SecretRef != nil
			yyq712[5] = x.ReadOnly != false
			var yynn712 int
			if yyr712 || yy2arr712 {
				r.EncodeArrayStart(6)
			} else {
				yynn712 = 1
				for _, b := range yyq712 {
					if b {
						yynn712++
					}
				}
				r.EncodeMapStart(yynn712)
				yynn712 = 0
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[1] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[2] {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[3] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq712[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[5] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq712[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct730 := r.ContainerType()
		if yyct730 == codecSelferValueTypeMap1234 {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if yyct730 == codecSelferValueTypeArray1234 {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys731 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv732 := &x.Monitors
				yym733 := z.DecBinary()
				_ = yym733
				if false {
				} else {
					z.F.DecSliceStringX(yyv732, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj739 int
	var yyb739 bool
	var yyhl739 bool = l >= 0
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv740 := &x.Monitors
		yym741 := z.DecBinary()
		_ = yym741
		if false {
		} else {
			z.F.DecSliceStringX(yyv740, false, d)
		}
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj739++
		if yyhl739 {
			yyb739 = yyj739 > l
		} else {
			yyb739 = r.CheckBreak()
		}
		if yyb739 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj739-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym747 := z.EncBinary()
		_ = yym747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep748 := !z.EncBinary()
			yy2arr748 := z.EncBasicHandle().StructToArray
			var yyq748 [2]bool
			_, _, _ = yysep748, yyq748, yy2arr748
			const yyr748 bool = false
			yyq748[0] = x.DatasetName != ""
			yyq748[1] = x.DatasetUUID != ""
			var yynn748 int
			if yyr748 || yy2arr748 {
				r.EncodeArrayStart(2)
			} else {
				yynn748 = 0
				for _, b := range yyq748 {
					if b {
						yynn748++
					}
				}
				r.EncodeMapStart(yynn748)
				yynn748 = 0
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[0] {
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq748[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[1] {
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq748[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym755 := z.DecBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct756 := r.ContainerType()
		if yyct756 == codecSelferValueTypeMap1234 {
			yyl756 := r.ReadMapStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl756, d)
			}
		} else if yyct756 == codecSelferValueTypeArray1234 {
			yyl756 := r.ReadArrayStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys757Slc
	var yyhl757 bool = l >= 0
	for yyj757 := 0; ; yyj757++ {
		if yyhl757 {
			if yyj757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys757Slc = r.DecodeBytes(yys757Slc, true, true)
		yys757 := string(yys757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys757 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys757)
		} // end switch yys757
	} // end for yyj757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj760 int
	var yyb760 bool
	var yyhl760 bool = l >= 0
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj760++
		if yyhl760 {
			yyb760 = yyj760 > l
		} else {
			yyb760 = r.CheckBreak()
		}
		if yyb760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym763 := z.EncBinary()
	_ = yym763
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym765 := z.EncBinary()
	_ = yym765
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym767 := z.EncBinary()
		_ = yym767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep768 := !z.EncBinary()
			yy2arr768 := z.EncBasicHandle().StructToArray
			var yyq768 [4]bool
			_, _, _ = yysep768, yyq768, yy2arr768
			const yyr768 bool = false
			yyq768[1] = x.FSType != ""
			yyq768[2] = x.Partition != 0
			yyq768[3] = x.ReadOnly != false
			var yynn768 int
			if yyr768 || yy2arr768 {
				r.EncodeArrayStart(4)
			} else {
				yynn768 = 1
				for _, b := range yyq768 {
					if b {
						yynn768++
					}
				}
				r.EncodeMapStart(yynn768)
				yynn768 = 0
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym770 := z.EncBinary()
				_ = yym770
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym771 := z.EncBinary()
				_ = yym771
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[1] {
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq768[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[2] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq768[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[3] {
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq768[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym781 := z.DecBinary()
	_ = yym781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct782 := r.ContainerType()
		if yyct782 == codecSelferValueTypeMap1234 {
			yyl782 := r.ReadMapStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl782, d)
			}
		} else if yyct782 == codecSelferValueTypeArray1234 {
			yyl782 := r.ReadArrayStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys783Slc
	var yyhl783 bool = l >= 0
	for yyj783 := 0; ; yyj783++ {
		if yyhl783 {
			if yyj783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys783Slc = r.DecodeBytes(yys783Slc, true, true)
		yys783 := string(yys783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys783 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys783)
		} // end switch yys783
	} // end for yyj783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj788 int
	var yyb788 bool
	var yyhl788 bool = l >= 0
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj788++
		if yyhl788 {
			yyb788 = yyj788 > l
		} else {
			yyb788 = r.CheckBreak()
		}
		if yyb788 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj788-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym793 := z.EncBinary()
		_ = yym793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep794 := !z.EncBinary()
			yy2arr794 := z.EncBasicHandle().StructToArray
			var yyq794 [5]bool
			_, _, _ = yysep794, yyq794, yy2arr794
			const yyr794 bool = false
			yyq794[2] = x.ReadOnly != false
			yyq794[3] = x.User != ""
			yyq794[4] = x.Group != ""
			var yynn794 int
			if yyr794 || yy2arr794 {
				r.EncodeArrayStart(5)
			} else {
				yynn794 = 2
				for _, b := range yyq794 {
					if b {
						yynn794++
					}
				}
				r.EncodeMapStart(yynn794)
				yynn794 = 0
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym797 := z.EncBinary()
				_ = yym797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym799 := z.EncBinary()
				_ = yym799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[2] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq794[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[3] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[4] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct811 := r.ContainerType()
		if yyct811 == codecSelferValueTypeMap1234 {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if yyct811 == codecSelferValueTypeArray1234 {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys812 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj818 int
	var yyb818 bool
	var yyhl818 bool = l >= 0
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj818++
		if yyhl818 {
			yyb818 = yyj818 > l
		} else {
			yyb818 = r.CheckBreak()
		}
		if yyb818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym824 := z.EncBinary()
		_ = yym824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep825 := !z.EncBinary()
			yy2arr825 := z.EncBasicHandle().StructToArray
			var yyq825 [5]bool
			_, _, _ = yysep825, yyq825, yy2arr825
			const yyr825 bool = false
			yyq825[1] = x.FSType != ""
			yyq825[2] = x.SecretRef != nil
			yyq825[3] = x.ReadOnly != false
			yyq825[4] = len(x.Options) != 0
			var yynn825 int
			if yyr825 || yy2arr825 {
				r.EncodeArrayStart(5)
			} else {
				yynn825 = 1
				for _, b := range yyq825 {
					if b {
						yynn825++
					}
				}
				r.EncodeMapStart(yynn825)
				yynn825 = 0
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym827 := z.EncBinary()
				_ = yym827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym828 := z.EncBinary()
				_ = yym828
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[1] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[3] {
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq825[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym837 := z.EncBinary()
						_ = yym837
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym838 := z.EncBinary()
						_ = yym838
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct840 := r.ContainerType()
		if yyct840 == codecSelferValueTypeMap1234 {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if yyct840 == codecSelferValueTypeArray1234 {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys841 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv846 := &x.Options
				yym847 := z.DecBinary()
				_ = yym847
				if false {
				} else {
					z.F.DecMapStringStringX(yyv846, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj848 int
	var yyb848 bool
	var yyhl848 bool = l >= 0
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv853 := &x.Options
		yym854 := z.DecBinary()
		_ = yym854
		if false {
		} else {
			z.F.DecMapStringStringX(yyv853, false, d)
		}
	}
	for {
		yyj848++
		if yyhl848 {
			yyb848 = yyj848 > l
		} else {
			yyb848 = r.CheckBreak()
		}
		if yyb848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [4]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[1] = x.FSType != ""
			yyq856[2] = x.Partition != 0
			yyq856[3] = x.ReadOnly != false
			var yynn856 int
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(4)
			} else {
				yynn856 = 1
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
				yynn856 = 0
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[2] {
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[3] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq856[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym869 := z.DecBinary()
	_ = yym869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct870 := r.ContainerType()
		if yyct870 == codecSelferValueTypeMap1234 {
			yyl870 := r.ReadMapStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl870, d)
			}
		} else if yyct870 == codecSelferValueTypeArray1234 {
			yyl870 := r.ReadArrayStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys871Slc
	var yyhl871 bool = l >= 0
	for yyj871 := 0; ; yyj871++ {
		if yyhl871 {
			if yyj871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys871Slc = r.DecodeBytes(yys871Slc, true, true)
		yys871 := string(yys871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys871 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys871)
		} // end switch yys871
	} // end for yyj871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj876 int
	var yyb876 bool
	var yyhl876 bool = l >= 0
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj876++
		if yyhl876 {
			yyb876 = yyj876 > l
		} else {
			yyb876 = r.CheckBreak()
		}
		if yyb876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym881 := z.EncBinary()
		_ = yym881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep882 := !z.EncBinary()
			yy2arr882 := z.EncBasicHandle().StructToArray
			var yyq882 [3]bool
			_, _, _ = yysep882, yyq882, yy2arr882
			const yyr882 bool = false
			yyq882[1] = x.Revision != ""
			yyq882[2] = x.Directory != ""
			var yynn882 int
			if yyr882 || yy2arr882 {
				r.EncodeArrayStart(3)
			} else {
				yynn882 = 1
				for _, b := range yyq882 {
					if b {
						yynn882++
					}
				}
				r.EncodeMapStart(yynn882)
				yynn882 = 0
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq882[1] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq882[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq882[2] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq882[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym892 := z.DecBinary()
	_ = yym892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct893 := r.ContainerType()
		if yyct893 == codecSelferValueTypeMap1234 {
			yyl893 := r.ReadMapStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl893, d)
			}
		} else if yyct893 == codecSelferValueTypeArray1234 {
			yyl893 := r.ReadArrayStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys894Slc
	var yyhl894 bool = l >= 0
	for yyj894 := 0; ; yyj894++ {
		if yyhl894 {
			if yyj894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys894Slc = r.DecodeBytes(yys894Slc, true, true)
		yys894 := string(yys894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys894 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys894)
		} // end switch yys894
	} // end for yyj894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj898 int
	var yyb898 bool
	var yyhl898 bool = l >= 0
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj898++
		if yyhl898 {
			yyb898 = yyj898 > l
		} else {
			yyb898 = r.CheckBreak()
		}
		if yyb898 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj898-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym902 := z.EncBinary()
		_ = yym902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep903 := !z.EncBinary()
			yy2arr903 := z.EncBasicHandle().StructToArray
			var yyq903 [3]bool
			_, _, _ = yysep903, yyq903, yy2arr903
			const yyr903 bool = false
			yyq903[0] = x.SecretName != ""
			yyq903[1] = len(x.Items) != 0
			yyq903[2] = x.DefaultMode != nil
			var yynn903 int
			if yyr903 || yy2arr903 {
				r.EncodeArrayStart(3)
			} else {
				yynn903 = 0
				for _, b := range yyq903 {
					if b {
						yynn903++
					}
				}
				r.EncodeMapStart(yynn903)
				yynn903 = 0
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[0] {
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq903[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym908 := z.EncBinary()
						_ = yym908
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym909 := z.EncBinary()
						_ = yym909
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy911 := *x.DefaultMode
						yym912 := z.EncBinary()
						_ = yym912
						if false {
						} else {
							r.EncodeInt(int64(yy911))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy913 := *x.DefaultMode
						yym914 := z.EncBinary()
						_ = yym914
						if false {
						} else {
							r.EncodeInt(int64(yy913))
						}
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym915 := z.DecBinary()
	_ = yym915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct916 := r.ContainerType()
		if yyct916 == codecSelferValueTypeMap1234 {
			yyl916 := r.ReadMapStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl916, d)
			}
		} else if yyct916 == codecSelferValueTypeArray1234 {
			yyl916 := r.ReadArrayStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys917Slc
	var yyhl917 bool = l >= 0
	for yyj917 := 0; ; yyj917++ {
		if yyhl917 {
			if yyj917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys917Slc = r.DecodeBytes(yys917Slc, true, true)
		yys917 := string(yys917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys917 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv919 := &x.Items
				yym920 := z.DecBinary()
				_ = yym920
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv919), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym922 := z.DecBinary()
				_ = yym922
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys917)
		} // end switch yys917
	} // end for yyj917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj923 int
	var yyb923 bool
	var yyhl923 bool = l >= 0
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv925 := &x.Items
		yym926 := z.DecBinary()
		_ = yym926
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv925), d)
		}
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym928 := z.DecBinary()
		_ = yym928
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj923++
		if yyhl923 {
			yyb923 = yyj923 > l
		} else {
			yyb923 = r.CheckBreak()
		}
		if yyb923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym929 := z.EncBinary()
		_ = yym929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep930 := !z.EncBinary()
			yy2arr930 := z.EncBasicHandle().StructToArray
			var yyq930 [3]bool
			_, _, _ = yysep930, yyq930, yy2arr930
			const yyr930 bool = false
			yyq930[2] = x.ReadOnly != false
			var yynn930 int
			if yyr930 || yy2arr930 {
				r.EncodeArrayStart(3)
			} else {
				yynn930 = 2
				for _, b := range yyq930 {
					if b {
						yynn930++
					}
				}
				r.EncodeMapStart(yynn930)
				yynn930 = 0
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym932 := z.EncBinary()
				_ = yym932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym933 := z.EncBinary()
				_ = yym933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq930[2] {
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq930[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym940 := z.DecBinary()
	_ = yym940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct941 := r.ContainerType()
		if yyct941 == codecSelferValueTypeMap1234 {
			yyl941 := r.ReadMapStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl941, d)
			}
		} else if yyct941 == codecSelferValueTypeArray1234 {
			yyl941 := r.ReadArrayStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys942Slc
	var yyhl942 bool = l >= 0
	for yyj942 := 0; ; yyj942++ {
		if yyhl942 {
			if yyj942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys942Slc = r.DecodeBytes(yys942Slc, true, true)
		yys942 := string(yys942Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys942 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys942)
		} // end switch yys942
	} // end for yyj942
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [6]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			yyq951[3] = x.ISCSIInterface != ""
			yyq951[4] = x.FSType != ""
			yyq951[5] = x.ReadOnly != false
			var yynn951 int
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(6)
			} else {
				yynn951 = 3
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
				yynn951 = 0
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym953 := z.EncBinary()
				_ = yym953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym957 := z.EncBinary()
				_ = yym957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym959 := z.EncBinary()
				_ = yym959
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[3] {
					yym962 := z.EncBinary()
					_ = yym962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq951[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[4] {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq951[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[5] {
					yym968 := z.EncBinary()
					_ = yym968
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq951[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym969 := z.EncBinary()
					_ = yym969
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym970 := z.DecBinary()
	_ = yym970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct971 := r.ContainerType()
		if yyct971 == codecSelferValueTypeMap1234 {
			yyl971 := r.ReadMapStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl971, d)
			}
		} else if yyct971 == codecSelferValueTypeArray1234 {
			yyl971 := r.ReadArrayStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys972Slc
	var yyhl972 bool = l >= 0
	for yyj972 := 0; ; yyj972++ {
		if yyhl972 {
			if yyj972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys972Slc = r.DecodeBytes(yys972Slc, true, true)
		yys972 := string(yys972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys972 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys972)
		} // end switch yys972
	} // end for yyj972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym986 := z.EncBinary()
		_ = yym986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep987 := !z.EncBinary()
			yy2arr987 := z.EncBasicHandle().StructToArray
			var yyq987 [4]bool
			_, _, _ = yysep987, yyq987, yy2arr987
			const yyr987 bool = false
			yyq987[2] = x.FSType != ""
			yyq987[3] = x.ReadOnly != false
			var yynn987 int
			if yyr987 || yy2arr987 {
				r.EncodeArrayStart(4)
			} else {
				yynn987 = 2
				for _, b := range yyq987 {
					if b {
						yynn987++
					}
				}
				r.EncodeMapStart(yynn987)
				yynn987 = 0
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy992 := *x.Lun
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeInt(int64(yy992))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy994 := *x.Lun
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeInt(int64(yy994))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[2] {
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym998 := z.EncBinary()
					_ = yym998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[3] {
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq987[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1002 := z.DecBinary()
	_ = yym1002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1003 := r.ContainerType()
		if yyct1003 == codecSelferValueTypeMap1234 {
			yyl1003 := r.ReadMapStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1003, d)
			}
		} else if yyct1003 == codecSelferValueTypeArray1234 {
			yyl1003 := r.ReadArrayStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1004Slc
	var yyhl1004 bool = l >= 0
	for yyj1004 := 0; ; yyj1004++ {
		if yyhl1004 {
			if yyj1004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1004Slc = r.DecodeBytes(yys1004Slc, true, true)
		yys1004 := string(yys1004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1004 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1005 := &x.TargetWWNs
				yym1006 := z.DecBinary()
				_ = yym1006
				if false {
				} else {
					z.F.DecSliceStringX(yyv1005, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1008 := z.DecBinary()
				_ = yym1008
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1004)
		} // end switch yys1004
	} // end for yyj1004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1011 int
	var yyb1011 bool
	var yyhl1011 bool = l >= 0
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1012 := &x.TargetWWNs
		yym1013 := z.DecBinary()
		_ = yym1013
		if false {
		} else {
			z.F.DecSliceStringX(yyv1012, false, d)
		}
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1015 := z.DecBinary()
		_ = yym1015
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1011++
		if yyhl1011 {
			yyb1011 = yyj1011 > l
		} else {
			yyb1011 = r.CheckBreak()
		}
		if yyb1011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1018 := z.EncBinary()
		_ = yym1018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1019 := !z.EncBinary()
			yy2arr1019 := z.EncBasicHandle().StructToArray
			var yyq1019 [3]bool
			_, _, _ = yysep1019, yyq1019, yy2arr1019
			const yyr1019 bool = false
			yyq1019[2] = x.ReadOnly != false
			var yynn1019 int
			if yyr1019 || yy2arr1019 {
				r.EncodeArrayStart(3)
			} else {
				yynn1019 = 2
				for _, b := range yyq1019 {
					if b {
						yynn1019++
					}
				}
				r.EncodeMapStart(yynn1019)
				yynn1019 = 0
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1022 := z.EncBinary()
				_ = yym1022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1025 := z.EncBinary()
				_ = yym1025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1019[2] {
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1019[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1029 := z.DecBinary()
	_ = yym1029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1030 := r.ContainerType()
		if yyct1030 == codecSelferValueTypeMap1234 {
			yyl1030 := r.ReadMapStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1030, d)
			}
		} else if yyct1030 == codecSelferValueTypeArray1234 {
			yyl1030 := r.ReadArrayStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1031Slc
	var yyhl1031 bool = l >= 0
	for yyj1031 := 0; ; yyj1031++ {
		if yyhl1031 {
			if yyj1031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1031Slc = r.DecodeBytes(yys1031Slc, true, true)
		yys1031 := string(yys1031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1031 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1031)
		} // end switch yys1031
	} // end for yyj1031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1035 int
	var yyb1035 bool
	var yyhl1035 bool = l >= 0
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1035++
		if yyhl1035 {
			yyb1035 = yyj1035 > l
		} else {
			yyb1035 = r.CheckBreak()
		}
		if yyb1035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1039 := z.EncBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1040 := !z.EncBinary()
			yy2arr1040 := z.EncBasicHandle().StructToArray
			var yyq1040 [2]bool
			_, _, _ = yysep1040, yyq1040, yy2arr1040
			const yyr1040 bool = false
			yyq1040[1] = x.FSType != ""
			var yynn1040 int
			if yyr1040 || yy2arr1040 {
				r.EncodeArrayStart(2)
			} else {
				yynn1040 = 1
				for _, b := range yyq1040 {
					if b {
						yynn1040++
					}
				}
				r.EncodeMapStart(yynn1040)
				yynn1040 = 0
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1040[1] {
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1040[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1047 := z.DecBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1048 := r.ContainerType()
		if yyct1048 == codecSelferValueTypeMap1234 {
			yyl1048 := r.ReadMapStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1048, d)
			}
		} else if yyct1048 == codecSelferValueTypeArray1234 {
			yyl1048 := r.ReadArrayStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1049Slc
	var yyhl1049 bool = l >= 0
	for yyj1049 := 0; ; yyj1049++ {
		if yyhl1049 {
			if yyj1049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1049Slc = r.DecodeBytes(yys1049Slc, true, true)
		yys1049 := string(yys1049Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1049 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1049)
		} // end switch yys1049
	} // end for yyj1049
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1055 := z.EncBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1056 := !z.EncBinary()
			yy2arr1056 := z.EncBasicHandle().StructToArray
			var yyq1056 [2]bool
			_, _, _ = yysep1056, yyq1056, yy2arr1056
			const yyr1056 bool = false
			yyq1056[1] = x.FSType != ""
			var yynn1056 int
			if yyr1056 || yy2arr1056 {
				r.EncodeArrayStart(2)
			} else {
				yynn1056 = 1
				for _, b := range yyq1056 {
					if b {
						yynn1056++
					}
				}
				r.EncodeMapStart(yynn1056)
				yynn1056 = 0
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[1] {
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1056[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1063 := z.DecBinary()
	_ = yym1063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1064 := r.ContainerType()
		if yyct1064 == codecSelferValueTypeMap1234 {
			yyl1064 := r.ReadMapStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1064, d)
			}
		} else if yyct1064 == codecSelferValueTypeArray1234 {
			yyl1064 := r.ReadArrayStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1065Slc
	var yyhl1065 bool = l >= 0
	for yyj1065 := 0; ; yyj1065++ {
		if yyhl1065 {
			if yyj1065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1065Slc = r.DecodeBytes(yys1065Slc, true, true)
		yys1065 := string(yys1065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1065 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1065)
		} // end switch yys1065
	} // end for yyj1065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1068 int
	var yyb1068 bool
	var yyhl1068 bool = l >= 0
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1068++
		if yyhl1068 {
			yyb1068 = yyj1068 > l
		} else {
			yyb1068 = r.CheckBreak()
		}
		if yyb1068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1071 := z.EncBinary()
	_ = yym1071
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1072 := z.DecBinary()
	_ = yym1072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1073 := z.EncBinary()
		_ = yym1073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1074 := !z.EncBinary()
			yy2arr1074 := z.EncBasicHandle().StructToArray
			var yyq1074 [5]bool
			_, _, _ = yysep1074, yyq1074, yy2arr1074
			const yyr1074 bool = false
			yyq1074[2] = x.CachingMode != nil
			yyq1074[3] = x.FSType != nil
			yyq1074[4] = x.ReadOnly != nil
			var yynn1074 int
			if yyr1074 || yy2arr1074 {
				r.EncodeArrayStart(5)
			} else {
				yynn1074 = 2
				for _, b := range yyq1074 {
					if b {
						yynn1074++
					}
				}
				r.EncodeMapStart(yynn1074)
				yynn1074 = 0
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1077 := z.EncBinary()
				_ = yym1077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1079 := z.EncBinary()
				_ = yym1079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1082 := *x.CachingMode
						yy1082.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1083 := *x.CachingMode
						yy1083.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1085 := *x.FSType
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1085))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1087 := *x.FSType
						yym1088 := z.EncBinary()
						_ = yym1088
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1087))
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1090 := *x.ReadOnly
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							r.EncodeBool(bool(yy1090))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1092 := *x.ReadOnly
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							r.EncodeBool(bool(yy1092))
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1094 := z.DecBinary()
	_ = yym1094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1095 := r.ContainerType()
		if yyct1095 == codecSelferValueTypeMap1234 {
			yyl1095 := r.ReadMapStart()
			if yyl1095 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1095, d)
			}
		} else if yyct1095 == codecSelferValueTypeArray1234 {
			yyl1095 := r.ReadArrayStart()
			if yyl1095 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1095, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1096Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1096Slc
	var yyhl1096 bool = l >= 0
	for yyj1096 := 0; ; yyj1096++ {
		if yyhl1096 {
			if yyj1096 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1096Slc = r.DecodeBytes(yys1096Slc, true, true)
		yys1096 := string(yys1096Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1096 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1103 := z.DecBinary()
				_ = yym1103
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1096)
		} // end switch yys1096
	} // end for yyj1096
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1104 int
	var yyb1104 bool
	var yyhl1104 bool = l >= 0
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1109 := z.DecBinary()
		_ = yym1109
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1111 := z.DecBinary()
		_ = yym1111
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1104++
		if yyhl1104 {
			yyb1104 = yyj1104 > l
		} else {
			yyb1104 = r.CheckBreak()
		}
		if yyb1104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1112 := z.EncBinary()
		_ = yym1112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1113 := !z.EncBinary()
			yy2arr1113 := z.EncBasicHandle().StructToArray
			var yyq1113 [3]bool
			_, _, _ = yysep1113, yyq1113, yy2arr1113
			const yyr1113 bool = false
			yyq1113[0] = x.Name != ""
			yyq1113[1] = len(x.Items) != 0
			yyq1113[2] = x.DefaultMode != nil
			var yynn1113 int
			if yyr1113 || yy2arr1113 {
				r.EncodeArrayStart(3)
			} else {
				yynn1113 = 0
				for _, b := range yyq1113 {
					if b {
						yynn1113++
					}
				}
				r.EncodeMapStart(yynn1113)
				yynn1113 = 0
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[0] {
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1118 := z.EncBinary()
						_ = yym1118
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1119 := z.EncBinary()
						_ = yym1119
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1121 := *x.DefaultMode
						yym1122 := z.EncBinary()
						_ = yym1122
						if false {
						} else {
							r.EncodeInt(int64(yy1121))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1123 := *x.DefaultMode
						yym1124 := z.EncBinary()
						_ = yym1124
						if false {
						} else {
							r.EncodeInt(int64(yy1123))
						}
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1126 := r.ContainerType()
		if yyct1126 == codecSelferValueTypeMap1234 {
			yyl1126 := r.ReadMapStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1126, d)
			}
		} else if yyct1126 == codecSelferValueTypeArray1234 {
			yyl1126 := r.ReadArrayStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1127Slc
	var yyhl1127 bool = l >= 0
	for yyj1127 := 0; ; yyj1127++ {
		if yyhl1127 {
			if yyj1127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1127Slc = r.DecodeBytes(yys1127Slc, true, true)
		yys1127 := string(yys1127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1127 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1129 := &x.Items
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1129), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1127)
		} // end switch yys1127
	} // end for yyj1127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1133 int
	var yyb1133 bool
	var yyhl1133 bool = l >= 0
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1135 := &x.Items
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1135), d)
		}
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1138 := z.DecBinary()
		_ = yym1138
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1133++
		if yyhl1133 {
			yyb1133 = yyj1133 > l
		} else {
			yyb1133 = r.CheckBreak()
		}
		if yyb1133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1139 := z.EncBinary()
		_ = yym1139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1140 := !z.EncBinary()
			yy2arr1140 := z.EncBasicHandle().StructToArray
			var yyq1140 [3]bool
			_, _, _ = yysep1140, yyq1140, yy2arr1140
			const yyr1140 bool = false
			yyq1140[2] = x.Mode != nil
			var yynn1140 int
			if yyr1140 || yy2arr1140 {
				r.EncodeArrayStart(3)
			} else {
				yynn1140 = 2
				for _, b := range yyq1140 {
					if b {
						yynn1140++
					}
				}
				r.EncodeMapStart(yynn1140)
				yynn1140 = 0
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1143 := z.EncBinary()
				_ = yym1143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1145 := z.EncBinary()
				_ = yym1145
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1146 := z.EncBinary()
				_ = yym1146
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1148 := *x.Mode
						yym1149 := z.EncBinary()
						_ = yym1149
						if false {
						} else {
							r.EncodeInt(int64(yy1148))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1140[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1150 := *x.Mode
						yym1151 := z.EncBinary()
						_ = yym1151
						if false {
						} else {
							r.EncodeInt(int64(yy1150))
						}
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1152 := z.DecBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1153 := r.ContainerType()
		if yyct1153 == codecSelferValueTypeMap1234 {
			yyl1153 := r.ReadMapStart()
			if yyl1153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1153, d)
			}
		} else if yyct1153 == codecSelferValueTypeArray1234 {
			yyl1153 := r.ReadArrayStart()
			if yyl1153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1154Slc
	var yyhl1154 bool = l >= 0
	for yyj1154 := 0; ; yyj1154++ {
		if yyhl1154 {
			if yyj1154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1154Slc = r.DecodeBytes(yys1154Slc, true, true)
		yys1154 := string(yys1154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1154 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1158 := z.DecBinary()
				_ = yym1158
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1154)
		} // end switch yys1154
	} // end for yyj1154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1159 int
	var yyb1159 bool
	var yyhl1159 bool = l >= 0
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1163 := z.DecBinary()
		_ = yym1163
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1159++
		if yyhl1159 {
			yyb1159 = yyj1159 > l
		} else {
			yyb1159 = r.CheckBreak()
		}
		if yyb1159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1164 := z.EncBinary()
		_ = yym1164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1165 := !z.EncBinary()
			yy2arr1165 := z.EncBasicHandle().StructToArray
			var yyq1165 [5]bool
			_, _, _ = yysep1165, yyq1165, yy2arr1165
			const yyr1165 bool = false
			yyq1165[0] = x.Name != ""
			yyq1165[1] = x.HostPort != 0
			yyq1165[3] = x.Protocol != ""
			yyq1165[4] = x.HostIP != ""
			var yynn1165 int
			if yyr1165 || yy2arr1165 {
				r.EncodeArrayStart(5)
			} else {
				yynn1165 = 1
				for _, b := range yyq1165 {
					if b {
						yynn1165++
					}
				}
				r.EncodeMapStart(yynn1165)
				yynn1165 = 0
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[0] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[1] {
					yym1170 := z.EncBinary()
					_ = yym1170
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1165[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1173 := z.EncBinary()
				_ = yym1173
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[4] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1179 := z.DecBinary()
	_ = yym1179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1180 := r.ContainerType()
		if yyct1180 == codecSelferValueTypeMap1234 {
			yyl1180 := r.ReadMapStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1180, d)
			}
		} else if yyct1180 == codecSelferValueTypeArray1234 {
			yyl1180 := r.ReadArrayStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1181Slc
	var yyhl1181 bool = l >= 0
	for yyj1181 := 0; ; yyj1181++ {
		if yyhl1181 {
			if yyj1181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1181Slc = r.DecodeBytes(yys1181Slc, true, true)
		yys1181 := string(yys1181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1181 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1181)
		} // end switch yys1181
	} // end for yyj1181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1187 int
	var yyb1187 bool
	var yyhl1187 bool = l >= 0
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1187++
		if yyhl1187 {
			yyb1187 = yyj1187 > l
		} else {
			yyb1187 = r.CheckBreak()
		}
		if yyb1187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1193 := z.EncBinary()
		_ = yym1193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1194 := !z.EncBinary()
			yy2arr1194 := z.EncBasicHandle().StructToArray
			var yyq1194 [4]bool
			_, _, _ = yysep1194, yyq1194, yy2arr1194
			const yyr1194 bool = false
			yyq1194[1] = x.ReadOnly != false
			yyq1194[3] = x.SubPath != ""
			var yynn1194 int
			if yyr1194 || yy2arr1194 {
				r.EncodeArrayStart(4)
			} else {
				yynn1194 = 2
				for _, b := range yyq1194 {
					if b {
						yynn1194++
					}
				}
				r.EncodeMapStart(yynn1194)
				yynn1194 = 0
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1197 := z.EncBinary()
				_ = yym1197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[1] {
					yym1199 := z.EncBinary()
					_ = yym1199
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1202 := z.EncBinary()
				_ = yym1202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1203 := z.EncBinary()
				_ = yym1203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[3] {
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1194[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1207 := z.DecBinary()
	_ = yym1207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1208 := r.ContainerType()
		if yyct1208 == codecSelferValueTypeMap1234 {
			yyl1208 := r.ReadMapStart()
			if yyl1208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1208, d)
			}
		} else if yyct1208 == codecSelferValueTypeArray1234 {
			yyl1208 := r.ReadArrayStart()
			if yyl1208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1209Slc
	var yyhl1209 bool = l >= 0
	for yyj1209 := 0; ; yyj1209++ {
		if yyhl1209 {
			if yyj1209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1209Slc = r.DecodeBytes(yys1209Slc, true, true)
		yys1209 := string(yys1209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1209 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1209)
		} // end switch yys1209
	} // end for yyj1209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1214 int
	var yyb1214 bool
	var yyhl1214 bool = l >= 0
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1214++
		if yyhl1214 {
			yyb1214 = yyj1214 > l
		} else {
			yyb1214 = r.CheckBreak()
		}
		if yyb1214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1219 := z.EncBinary()
		_ = yym1219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1220 := !z.EncBinary()
			yy2arr1220 := z.EncBasicHandle().StructToArray
			var yyq1220 [3]bool
			_, _, _ = yysep1220, yyq1220, yy2arr1220
			const yyr1220 bool = false
			yyq1220[1] = x.Value != ""
			yyq1220[2] = x.ValueFrom != nil
			var yynn1220 int
			if yyr1220 || yy2arr1220 {
				r.EncodeArrayStart(3)
			} else {
				yynn1220 = 1
				for _, b := range yyq1220 {
					if b {
						yynn1220++
					}
				}
				r.EncodeMapStart(yynn1220)
				yynn1220 = 0
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1223 := z.EncBinary()
				_ = yym1223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1220[1] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1220[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1229 := r.ContainerType()
		if yyct1229 == codecSelferValueTypeMap1234 {
			yyl1229 := r.ReadMapStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1229, d)
			}
		} else if yyct1229 == codecSelferValueTypeArray1234 {
			yyl1229 := r.ReadArrayStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1230Slc
	var yyhl1230 bool = l >= 0
	for yyj1230 := 0; ; yyj1230++ {
		if yyhl1230 {
			if yyj1230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1230Slc = r.DecodeBytes(yys1230Slc, true, true)
		yys1230 := string(yys1230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1230 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1230)
		} // end switch yys1230
	} // end for yyj1230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1234 int
	var yyb1234 bool
	var yyhl1234 bool = l >= 0
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1234++
		if yyhl1234 {
			yyb1234 = yyj1234 > l
		} else {
			yyb1234 = r.CheckBreak()
		}
		if yyb1234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [4]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = x.FieldRef != nil
			yyq1239[1] = x.ResourceFieldRef != nil
			yyq1239[2] = x.ConfigMapKeyRef != nil
			yyq1239[3] = x.SecretKeyRef != nil
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(4)
			} else {
				yynn1239 = 0
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1244 := z.DecBinary()
	_ = yym1244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1245 := r.ContainerType()
		if yyct1245 == codecSelferValueTypeMap1234 {
			yyl1245 := r.ReadMapStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1245, d)
			}
		} else if yyct1245 == codecSelferValueTypeArray1234 {
			yyl1245 := r.ReadArrayStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1246Slc
	var yyhl1246 bool = l >= 0
	for yyj1246 := 0; ; yyj1246++ {
		if yyhl1246 {
			if yyj1246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1246Slc = r.DecodeBytes(yys1246Slc, true, true)
		yys1246 := string(yys1246Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1246 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1246)
		} // end switch yys1246
	} // end for yyj1246
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1251 int
	var yyb1251 bool
	var yyhl1251 bool = l >= 0
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1251++
		if yyhl1251 {
			yyb1251 = yyj1251 > l
		} else {
			yyb1251 = r.CheckBreak()
		}
		if yyb1251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1256 := z.EncBinary()
		_ = yym1256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1257 := !z.EncBinary()
			yy2arr1257 := z.EncBasicHandle().StructToArray
			var yyq1257 [2]bool
			_, _, _ = yysep1257, yyq1257, yy2arr1257
			const yyr1257 bool = false
			yyq1257[0] = x.APIVersion != ""
			var yynn1257 int
			if yyr1257 || yy2arr1257 {
				r.EncodeArrayStart(2)
			} else {
				yynn1257 = 1
				for _, b := range yyq1257 {
					if b {
						yynn1257++
					}
				}
				r.EncodeMapStart(yynn1257)
				yynn1257 = 0
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1257[0] {
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1257[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1263 := z.EncBinary()
				_ = yym1263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1265 := r.ContainerType()
		if yyct1265 == codecSelferValueTypeMap1234 {
			yyl1265 := r.ReadMapStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1265, d)
			}
		} else if yyct1265 == codecSelferValueTypeArray1234 {
			yyl1265 := r.ReadArrayStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1266Slc
	var yyhl1266 bool = l >= 0
	for yyj1266 := 0; ; yyj1266++ {
		if yyhl1266 {
			if yyj1266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1266Slc = r.DecodeBytes(yys1266Slc, true, true)
		yys1266 := string(yys1266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1266 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1266)
		} // end switch yys1266
	} // end for yyj1266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1269 int
	var yyb1269 bool
	var yyhl1269 bool = l >= 0
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1269++
		if yyhl1269 {
			yyb1269 = yyj1269 > l
		} else {
			yyb1269 = r.CheckBreak()
		}
		if yyb1269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [3]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			yyq1273[0] = x.ContainerName != ""
			yyq1273[2] = true
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(3)
			} else {
				yynn1273 = 1
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[0] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1279 := z.EncBinary()
				_ = yym1279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[2] {
					yy1281 := &x.Divisor
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1281) {
					} else if !yym1282 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1281)
					} else {
						z.EncFallback(yy1281)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1273[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1283 := &x.Divisor
					yym1284 := z.EncBinary()
					_ = yym1284
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1283) {
					} else if !yym1284 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1283)
					} else {
						z.EncFallback(yy1283)
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1285 := z.DecBinary()
	_ = yym1285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1286 := r.ContainerType()
		if yyct1286 == codecSelferValueTypeMap1234 {
			yyl1286 := r.ReadMapStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1286, d)
			}
		} else if yyct1286 == codecSelferValueTypeArray1234 {
			yyl1286 := r.ReadArrayStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1287Slc
	var yyhl1287 bool = l >= 0
	for yyj1287 := 0; ; yyj1287++ {
		if yyhl1287 {
			if yyj1287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1287Slc = r.DecodeBytes(yys1287Slc, true, true)
		yys1287 := string(yys1287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1287 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1290 := &x.Divisor
				yym1291 := z.DecBinary()
				_ = yym1291
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1290) {
				} else if !yym1291 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1290)
				} else {
					z.DecFallback(yyv1290, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1287)
		} // end switch yys1287
	} // end for yyj1287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1292 int
	var yyb1292 bool
	var yyhl1292 bool = l >= 0
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1295 := &x.Divisor
		yym1296 := z.DecBinary()
		_ = yym1296
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1295) {
		} else if !yym1296 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1295)
		} else {
			z.DecFallback(yyv1295, false)
		}
	}
	for {
		yyj1292++
		if yyhl1292 {
			yyb1292 = yyj1292 > l
		} else {
			yyb1292 = r.CheckBreak()
		}
		if yyb1292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1297 := z.EncBinary()
		_ = yym1297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1298 := !z.EncBinary()
			yy2arr1298 := z.EncBasicHandle().StructToArray
			var yyq1298 [2]bool
			_, _, _ = yysep1298, yyq1298, yy2arr1298
			const yyr1298 bool = false
			yyq1298[0] = x.Name != ""
			var yynn1298 int
			if yyr1298 || yy2arr1298 {
				r.EncodeArrayStart(2)
			} else {
				yynn1298 = 1
				for _, b := range yyq1298 {
					if b {
						yynn1298++
					}
				}
				r.EncodeMapStart(yynn1298)
				yynn1298 = 0
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1298[0] {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1298[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1303 := z.EncBinary()
				_ = yym1303
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1305 := z.DecBinary()
	_ = yym1305
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1306 := r.ContainerType()
		if yyct1306 == codecSelferValueTypeMap1234 {
			yyl1306 := r.ReadMapStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1306, d)
			}
		} else if yyct1306 == codecSelferValueTypeArray1234 {
			yyl1306 := r.ReadArrayStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1306, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1307Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1307Slc
	var yyhl1307 bool = l >= 0
	for yyj1307 := 0; ; yyj1307++ {
		if yyhl1307 {
			if yyj1307 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1307Slc = r.DecodeBytes(yys1307Slc, true, true)
		yys1307 := string(yys1307Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1307 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1307)
		} // end switch yys1307
	} // end for yyj1307
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1310 int
	var yyb1310 bool
	var yyhl1310 bool = l >= 0
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1310++
		if yyhl1310 {
			yyb1310 = yyj1310 > l
		} else {
			yyb1310 = r.CheckBreak()
		}
		if yyb1310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1313 := z.EncBinary()
		_ = yym1313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1314 := !z.EncBinary()
			yy2arr1314 := z.EncBasicHandle().StructToArray
			var yyq1314 [2]bool
			_, _, _ = yysep1314, yyq1314, yy2arr1314
			const yyr1314 bool = false
			yyq1314[0] = x.Name != ""
			var yynn1314 int
			if yyr1314 || yy2arr1314 {
				r.EncodeArrayStart(2)
			} else {
				yynn1314 = 1
				for _, b := range yyq1314 {
					if b {
						yynn1314++
					}
				}
				r.EncodeMapStart(yynn1314)
				yynn1314 = 0
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1314[0] {
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1314[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1320 := z.EncBinary()
				_ = yym1320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1321 := z.DecBinary()
	_ = yym1321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1322 := r.ContainerType()
		if yyct1322 == codecSelferValueTypeMap1234 {
			yyl1322 := r.ReadMapStart()
			if yyl1322 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1322, d)
			}
		} else if yyct1322 == codecSelferValueTypeArray1234 {
			yyl1322 := r.ReadArrayStart()
			if yyl1322 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1322, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1323Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1323Slc
	var yyhl1323 bool = l >= 0
	for yyj1323 := 0; ; yyj1323++ {
		if yyhl1323 {
			if yyj1323 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1323Slc = r.DecodeBytes(yys1323Slc, true, true)
		yys1323 := string(yys1323Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1323 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1323)
		} // end switch yys1323
	} // end for yyj1323
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1326 int
	var yyb1326 bool
	var yyhl1326 bool = l >= 0
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1326++
		if yyhl1326 {
			yyb1326 = yyj1326 > l
		} else {
			yyb1326 = r.CheckBreak()
		}
		if yyb1326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1329 := z.EncBinary()
		_ = yym1329
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1330 := !z.EncBinary()
			yy2arr1330 := z.EncBasicHandle().StructToArray
			var yyq1330 [2]bool
			_, _, _ = yysep1330, yyq1330, yy2arr1330
			const yyr1330 bool = false
			var yynn1330 int
			if yyr1330 || yy2arr1330 {
				r.EncodeArrayStart(2)
			} else {
				yynn1330 = 2
				for _, b := range yyq1330 {
					if b {
						yynn1330++
					}
				}
				r.EncodeMapStart(yynn1330)
				yynn1330 = 0
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1332 := z.EncBinary()
				_ = yym1332
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1333 := z.EncBinary()
				_ = yym1333
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1335 := z.EncBinary()
				_ = yym1335
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1336 := z.EncBinary()
				_ = yym1336
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1337 := z.DecBinary()
	_ = yym1337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1338 := r.ContainerType()
		if yyct1338 == codecSelferValueTypeMap1234 {
			yyl1338 := r.ReadMapStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1338, d)
			}
		} else if yyct1338 == codecSelferValueTypeArray1234 {
			yyl1338 := r.ReadArrayStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1339Slc
	var yyhl1339 bool = l >= 0
	for yyj1339 := 0; ; yyj1339++ {
		if yyhl1339 {
			if yyj1339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1339Slc = r.DecodeBytes(yys1339Slc, true, true)
		yys1339 := string(yys1339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1339 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1339)
		} // end switch yys1339
	} // end for yyj1339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1342 int
	var yyb1342 bool
	var yyhl1342 bool = l >= 0
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1342++
		if yyhl1342 {
			yyb1342 = yyj1342 > l
		} else {
			yyb1342 = r.CheckBreak()
		}
		if yyb1342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1345 := z.EncBinary()
		_ = yym1345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1346 := !z.EncBinary()
			yy2arr1346 := z.EncBasicHandle().StructToArray
			var yyq1346 [5]bool
			_, _, _ = yysep1346, yyq1346, yy2arr1346
			const yyr1346 bool = false
			yyq1346[0] = x.Path != ""
			yyq1346[2] = x.Host != ""
			yyq1346[3] = x.Scheme != ""
			yyq1346[4] = len(x.HTTPHeaders) != 0
			var yynn1346 int
			if yyr1346 || yy2arr1346 {
				r.EncodeArrayStart(5)
			} else {
				yynn1346 = 1
				for _, b := range yyq1346 {
					if b {
						yynn1346++
					}
				}
				r.EncodeMapStart(yynn1346)
				yynn1346 = 0
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[0] {
					yym1348 := z.EncBinary()
					_ = yym1348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1351 := &x.Port
				yym1352 := z.EncBinary()
				_ = yym1352
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1351) {
				} else if !yym1352 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1351)
				} else {
					z.EncFallback(yy1351)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1353 := &x.Port
				yym1354 := z.EncBinary()
				_ = yym1354
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1353) {
				} else if !yym1354 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1353)
				} else {
					z.EncFallback(yy1353)
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[2] {
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1360 := z.EncBinary()
						_ = yym1360
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1346[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1362 := z.DecBinary()
	_ = yym1362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1363 := r.ContainerType()
		if yyct1363 == codecSelferValueTypeMap1234 {
			yyl1363 := r.ReadMapStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1363, d)
			}
		} else if yyct1363 == codecSelferValueTypeArray1234 {
			yyl1363 := r.ReadArrayStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1364Slc
	var yyhl1364 bool = l >= 0
	for yyj1364 := 0; ; yyj1364++ {
		if yyhl1364 {
			if yyj1364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1364Slc = r.DecodeBytes(yys1364Slc, true, true)
		yys1364 := string(yys1364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1364 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1366 := &x.Port
				yym1367 := z.DecBinary()
				_ = yym1367
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1366) {
				} else if !yym1367 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1366)
				} else {
					z.DecFallback(yyv1366, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1370 := &x.HTTPHeaders
				yym1371 := z.DecBinary()
				_ = yym1371
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1370), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1364)
		} // end switch yys1364
	} // end for yyj1364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1372 int
	var yyb1372 bool
	var yyhl1372 bool = l >= 0
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1374 := &x.Port
		yym1375 := z.DecBinary()
		_ = yym1375
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1374) {
		} else if !yym1375 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1374)
		} else {
			z.DecFallback(yyv1374, false)
		}
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1378 := &x.HTTPHeaders
		yym1379 := z.DecBinary()
		_ = yym1379
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1378), d)
		}
	}
	for {
		yyj1372++
		if yyhl1372 {
			yyb1372 = yyj1372 > l
		} else {
			yyb1372 = r.CheckBreak()
		}
		if yyb1372 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1372-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1380 := z.EncBinary()
	_ = yym1380
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1381 := z.DecBinary()
	_ = yym1381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1382 := z.EncBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1383 := !z.EncBinary()
			yy2arr1383 := z.EncBasicHandle().StructToArray
			var yyq1383 [1]bool
			_, _, _ = yysep1383, yyq1383, yy2arr1383
			const yyr1383 bool = false
			var yynn1383 int
			if yyr1383 || yy2arr1383 {
				r.EncodeArrayStart(1)
			} else {
				yynn1383 = 1
				for _, b := range yyq1383 {
					if b {
						yynn1383++
					}
				}
				r.EncodeMapStart(yynn1383)
				yynn1383 = 0
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1385 := &x.Port
				yym1386 := z.EncBinary()
				_ = yym1386
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1385) {
				} else if !yym1386 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1385)
				} else {
					z.EncFallback(yy1385)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1387 := &x.Port
				yym1388 := z.EncBinary()
				_ = yym1388
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1387) {
				} else if !yym1388 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1387)
				} else {
					z.EncFallback(yy1387)
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1389 := z.DecBinary()
	_ = yym1389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1390 := r.ContainerType()
		if yyct1390 == codecSelferValueTypeMap1234 {
			yyl1390 := r.ReadMapStart()
			if yyl1390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1390, d)
			}
		} else if yyct1390 == codecSelferValueTypeArray1234 {
			yyl1390 := r.ReadArrayStart()
			if yyl1390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1391Slc
	var yyhl1391 bool = l >= 0
	for yyj1391 := 0; ; yyj1391++ {
		if yyhl1391 {
			if yyj1391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1391Slc = r.DecodeBytes(yys1391Slc, true, true)
		yys1391 := string(yys1391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1391 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1392 := &x.Port
				yym1393 := z.DecBinary()
				_ = yym1393
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1392) {
				} else if !yym1393 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1392)
				} else {
					z.DecFallback(yyv1392, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1391)
		} // end switch yys1391
	} // end for yyj1391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1394 int
	var yyb1394 bool
	var yyhl1394 bool = l >= 0
	yyj1394++
	if yyhl1394 {
		yyb1394 = yyj1394 > l
	} else {
		yyb1394 = r.CheckBreak()
	}
	if yyb1394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1395 := &x.Port
		yym1396 := z.DecBinary()
		_ = yym1396
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1395) {
		} else if !yym1396 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1395)
		} else {
			z.DecFallback(yyv1395, false)
		}
	}
	for {
		yyj1394++
		if yyhl1394 {
			yyb1394 = yyj1394 > l
		} else {
			yyb1394 = r.CheckBreak()
		}
		if yyb1394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1397 := z.EncBinary()
		_ = yym1397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1398 := !z.EncBinary()
			yy2arr1398 := z.EncBasicHandle().StructToArray
			var yyq1398 [1]bool
			_, _, _ = yysep1398, yyq1398, yy2arr1398
			const yyr1398 bool = false
			yyq1398[0] = len(x.Command) != 0
			var yynn1398 int
			if yyr1398 || yy2arr1398 {
				r.EncodeArrayStart(1)
			} else {
				yynn1398 = 0
				for _, b := range yyq1398 {
					if b {
						yynn1398++
					}
				}
				r.EncodeMapStart(yynn1398)
				yynn1398 = 0
			}
			if yyr1398 || yy2arr1398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1398[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1400 := z.EncBinary()
						_ = yym1400
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1398[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1401 := z.EncBinary()
						_ = yym1401
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1405 := &x.Command
				yym1406 := z.DecBinary()
				_ = yym1406
				if false {
				} else {
					z.F.DecSliceStringX(yyv1405, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1407 int
	var yyb1407 bool
	var yyhl1407 bool = l >= 0
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1408 := &x.Command
		yym1409 := z.DecBinary()
		_ = yym1409
		if false {
		} else {
			z.F.DecSliceStringX(yyv1408, false, d)
		}
	}
	for {
		yyj1407++
		if yyhl1407 {
			yyb1407 = yyj1407 > l
		} else {
			yyb1407 = r.CheckBreak()
		}
		if yyb1407 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1407-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1410 := z.EncBinary()
		_ = yym1410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1411 := !z.EncBinary()
			yy2arr1411 := z.EncBasicHandle().StructToArray
			var yyq1411 [8]bool
			_, _, _ = yysep1411, yyq1411, yy2arr1411
			const yyr1411 bool = false
			yyq1411[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1411[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1411[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1411[3] = x.InitialDelaySeconds != 0
			yyq1411[4] = x.TimeoutSeconds != 0
			yyq1411[5] = x.PeriodSeconds != 0
			yyq1411[6] = x.SuccessThreshold != 0
			yyq1411[7] = x.FailureThreshold != 0
			var yynn1411 int
			if yyr1411 || yy2arr1411 {
				r.EncodeArrayStart(8)
			} else {
				yynn1411 = 0
				for _, b := range yyq1411 {
					if b {
						yynn1411++
					}
				}
				r.EncodeMapStart(yynn1411)
				yynn1411 = 0
			}
			var yyn1412 bool
			if x.Handler.Exec == nil {
				yyn1412 = true
				goto LABEL1412
			}
		LABEL1412:
			if yyr1411 || yy2arr1411 {
				if yyn1412 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1411[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1411[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1412 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1413 bool
			if x.Handler.HTTPGet == nil {
				yyn1413 = true
				goto LABEL1413
			}
		LABEL1413:
			if yyr1411 || yy2arr1411 {
				if yyn1413 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1411[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1411[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1413 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1414 bool
			if x.Handler.TCPSocket == nil {
				yyn1414 = true
				goto LABEL1414
			}
		LABEL1414:
			if yyr1411 || yy2arr1411 {
				if yyn1414 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1411[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1411[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1414 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[3] {
					yym1416 := z.EncBinary()
					_ = yym1416
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[4] {
					yym1419 := z.EncBinary()
					_ = yym1419
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[5] {
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[6] {
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[7] {
					yym1428 := z.EncBinary()
					_ = yym1428
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1430 := z.DecBinary()
	_ = yym1430
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1431 := r.ContainerType()
		if yyct1431 == codecSelferValueTypeMap1234 {
			yyl1431 := r.ReadMapStart()
			if yyl1431 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1431, d)
			}
		} else if yyct1431 == codecSelferValueTypeArray1234 {
			yyl1431 := r.ReadArrayStart()
			if yyl1431 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1431, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1432Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1432Slc
	var yyhl1432 bool = l >= 0
	for yyj1432 := 0; ; yyj1432++ {
		if yyhl1432 {
			if yyj1432 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1432Slc = r.DecodeBytes(yys1432Slc, true, true)
		yys1432 := string(yys1432Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1432 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1432)
		} // end switch yys1432
	} // end for yyj1432
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1450 := z.EncBinary()
	_ = yym1450
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1451 := z.DecBinary()
	_ = yym1451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1452 := z.EncBinary()
	_ = yym1452
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1453 := z.DecBinary()
	_ = yym1453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1454 := z.EncBinary()
		_ = yym1454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1455 := !z.EncBinary()
			yy2arr1455 := z.EncBasicHandle().StructToArray
			var yyq1455 [2]bool
			_, _, _ = yysep1455, yyq1455, yy2arr1455
			const yyr1455 bool = false
			yyq1455[0] = len(x.Add) != 0
			yyq1455[1] = len(x.Drop) != 0
			var yynn1455 int
			if yyr1455 || yy2arr1455 {
				r.EncodeArrayStart(2)
			} else {
				yynn1455 = 0
				for _, b := range yyq1455 {
					if b {
						yynn1455++
					}
				}
				r.EncodeMapStart(yynn1455)
				yynn1455 = 0
			}
			if yyr1455 || yy2arr1455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1455[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1455[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1458 := z.EncBinary()
						_ = yym1458
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1455 || yy2arr1455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1455[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1455[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1455 || yy2arr1455 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1462 := z.DecBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1463 := r.ContainerType()
		if yyct1463 == codecSelferValueTypeMap1234 {
			yyl1463 := r.ReadMapStart()
			if yyl1463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1463, d)
			}
		} else if yyct1463 == codecSelferValueTypeArray1234 {
			yyl1463 := r.ReadArrayStart()
			if yyl1463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1464Slc
	var yyhl1464 bool = l >= 0
	for yyj1464 := 0; ; yyj1464++ {
		if yyhl1464 {
			if yyj1464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1464Slc = r.DecodeBytes(yys1464Slc, true, true)
		yys1464 := string(yys1464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1464 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1465 := &x.Add
				yym1466 := z.DecBinary()
				_ = yym1466
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1465), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1467 := &x.Drop
				yym1468 := z.DecBinary()
				_ = yym1468
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1467), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1464)
		} // end switch yys1464
	} // end for yyj1464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1469 int
	var yyb1469 bool
	var yyhl1469 bool = l >= 0
	yyj1469++
	if yyhl1469 {
		yyb1469 = yyj1469 > l
	} else {
		yyb1469 = r.CheckBreak()
	}
	if yyb1469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1470 := &x.Add
		yym1471 := z.DecBinary()
		_ = yym1471
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1470), d)
		}
	}
	yyj1469++
	if yyhl1469 {
		yyb1469 = yyj1469 > l
	} else {
		yyb1469 = r.CheckBreak()
	}
	if yyb1469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1472 := &x.Drop
		yym1473 := z.DecBinary()
		_ = yym1473
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1472), d)
		}
	}
	for {
		yyj1469++
		if yyhl1469 {
			yyb1469 = yyj1469 > l
		} else {
			yyb1469 = r.CheckBreak()
		}
		if yyb1469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1474 := z.EncBinary()
		_ = yym1474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1475 := !z.EncBinary()
			yy2arr1475 := z.EncBasicHandle().StructToArray
			var yyq1475 [2]bool
			_, _, _ = yysep1475, yyq1475, yy2arr1475
			const yyr1475 bool = false
			yyq1475[0] = len(x.Limits) != 0
			yyq1475[1] = len(x.Requests) != 0
			var yynn1475 int
			if yyr1475 || yy2arr1475 {
				r.EncodeArrayStart(2)
			} else {
				yynn1475 = 0
				for _, b := range yyq1475 {
					if b {
						yynn1475++
					}
				}
				r.EncodeMapStart(yynn1475)
				yynn1475 = 0
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1478 := z.DecBinary()
	_ = yym1478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1479 := r.ContainerType()
		if yyct1479 == codecSelferValueTypeMap1234 {
			yyl1479 := r.ReadMapStart()
			if yyl1479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1479, d)
			}
		} else if yyct1479 == codecSelferValueTypeArray1234 {
			yyl1479 := r.ReadArrayStart()
			if yyl1479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1480Slc
	var yyhl1480 bool = l >= 0
	for yyj1480 := 0; ; yyj1480++ {
		if yyhl1480 {
			if yyj1480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1480Slc = r.DecodeBytes(yys1480Slc, true, true)
		yys1480 := string(yys1480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1480 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1481 := &x.Limits
				yyv1481.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1482 := &x.Requests
				yyv1482.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1480)
		} // end switch yys1480
	} // end for yyj1480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1483 int
	var yyb1483 bool
	var yyhl1483 bool = l >= 0
	yyj1483++
	if yyhl1483 {
		yyb1483 = yyj1483 > l
	} else {
		yyb1483 = r.CheckBreak()
	}
	if yyb1483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1484 := &x.Limits
		yyv1484.CodecDecodeSelf(d)
	}
	yyj1483++
	if yyhl1483 {
		yyb1483 = yyj1483 > l
	} else {
		yyb1483 = r.CheckBreak()
	}
	if yyb1483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1485 := &x.Requests
		yyv1485.CodecDecodeSelf(d)
	}
	for {
		yyj1483++
		if yyhl1483 {
			yyb1483 = yyj1483 > l
		} else {
			yyb1483 = r.CheckBreak()
		}
		if yyb1483 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1483-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1486 := z.EncBinary()
		_ = yym1486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1487 := !z.EncBinary()
			yy2arr1487 := z.EncBasicHandle().StructToArray
			var yyq1487 [18]bool
			_, _, _ = yysep1487, yyq1487, yy2arr1487
			const yyr1487 bool = false
			yyq1487[1] = x.Image != ""
			yyq1487[2] = len(x.Command) != 0
			yyq1487[3] = len(x.Args) != 0
			yyq1487[4] = x.WorkingDir != ""
			yyq1487[5] = len(x.Ports) != 0
			yyq1487[6] = len(x.Env) != 0
			yyq1487[7] = true
			yyq1487[8] = len(x.VolumeMounts) != 0
			yyq1487[9] = x.LivenessProbe != nil
			yyq1487[10] = x.ReadinessProbe != nil
			yyq1487[11] = x.Lifecycle != nil
			yyq1487[12] = x.TerminationMessagePath != ""
			yyq1487[13] = x.ImagePullPolicy != ""
			yyq1487[14] = x.SecurityContext != nil
			yyq1487[15] = x.Stdin != false
			yyq1487[16] = x.StdinOnce != false
			yyq1487[17] = x.TTY != false
			var yynn1487 int
			if yyr1487 || yy2arr1487 {
				r.EncodeArrayStart(18)
			} else {
				yynn1487 = 1
				for _, b := range yyq1487 {
					if b {
						yynn1487++
					}
				}
				r.EncodeMapStart(yynn1487)
				yynn1487 = 0
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1489 := z.EncBinary()
				_ = yym1489
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1490 := z.EncBinary()
				_ = yym1490
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[1] {
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1495 := z.EncBinary()
						_ = yym1495
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1496 := z.EncBinary()
						_ = yym1496
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1498 := z.EncBinary()
						_ = yym1498
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1499 := z.EncBinary()
						_ = yym1499
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[4] {
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1487[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1504 := z.EncBinary()
						_ = yym1504
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1505 := z.EncBinary()
						_ = yym1505
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1508 := z.EncBinary()
						_ = yym1508
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[7] {
					yy1510 := &x.Resources
					yy1510.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1511 := &x.Resources
					yy1511.CodecEncodeSelf(e)
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1513 := z.EncBinary()
						_ = yym1513
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[12] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1487[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1487[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[15] {
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1487[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[16] {
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1487[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1528 := z.EncBinary()
					_ = yym1528
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[17] {
					yym1530 := z.EncBinary()
					_ = yym1530
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1487[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1532 := z.DecBinary()
	_ = yym1532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1533 := r.ContainerType()
		if yyct1533 == codecSelferValueTypeMap1234 {
			yyl1533 := r.ReadMapStart()
			if yyl1533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1533, d)
			}
		} else if yyct1533 == codecSelferValueTypeArray1234 {
			yyl1533 := r.ReadArrayStart()
			if yyl1533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1534Slc
	var yyhl1534 bool = l >= 0
	for yyj1534 := 0; ; yyj1534++ {
		if yyhl1534 {
			if yyj1534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1534Slc = r.DecodeBytes(yys1534Slc, true, true)
		yys1534 := string(yys1534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1534 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1537 := &x.Command
				yym1538 := z.DecBinary()
				_ = yym1538
				if false {
				} else {
					z.F.DecSliceStringX(yyv1537, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1539 := &x.Args
				yym1540 := z.DecBinary()
				_ = yym1540
				if false {
				} else {
					z.F.DecSliceStringX(yyv1539, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1542 := &x.Ports
				yym1543 := z.DecBinary()
				_ = yym1543
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1542), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1544 := &x.Env
				yym1545 := z.DecBinary()
				_ = yym1545
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1544), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1546 := &x.Resources
				yyv1546.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1547 := &x.VolumeMounts
				yym1548 := z.DecBinary()
				_ = yym1548
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1547), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1534)
		} // end switch yys1534
	} // end for yyj1534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1558 int
	var yyb1558 bool
	var yyhl1558 bool = l >= 0
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1561 := &x.Command
		yym1562 := z.DecBinary()
		_ = yym1562
		if false {
		} else {
			z.F.DecSliceStringX(yyv1561, false, d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1563 := &x.Args
		yym1564 := z.DecBinary()
		_ = yym1564
		if false {
		} else {
			z.F.DecSliceStringX(yyv1563, false, d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1566 := &x.Ports
		yym1567 := z.DecBinary()
		_ = yym1567
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1566), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1568 := &x.Env
		yym1569 := z.DecBinary()
		_ = yym1569
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1568), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1570 := &x.Resources
		yyv1570.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1571 := &x.VolumeMounts
		yym1572 := z.DecBinary()
		_ = yym1572
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1571), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1558++
		if yyhl1558 {
			yyb1558 = yyj1558 > l
		} else {
			yyb1558 = r.CheckBreak()
		}
		if yyb1558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1582 := z.EncBinary()
		_ = yym1582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1583 := !z.EncBinary()
			yy2arr1583 := z.EncBasicHandle().StructToArray
			var yyq1583 [3]bool
			_, _, _ = yysep1583, yyq1583, yy2arr1583
			const yyr1583 bool = false
			yyq1583[0] = x.Exec != nil
			yyq1583[1] = x.HTTPGet != nil
			yyq1583[2] = x.TCPSocket != nil
			var yynn1583 int
			if yyr1583 || yy2arr1583 {
				r.EncodeArrayStart(3)
			} else {
				yynn1583 = 0
				for _, b := range yyq1583 {
					if b {
						yynn1583++
					}
				}
				r.EncodeMapStart(yynn1583)
				yynn1583 = 0
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1587 := z.DecBinary()
	_ = yym1587
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1588 := r.ContainerType()
		if yyct1588 == codecSelferValueTypeMap1234 {
			yyl1588 := r.ReadMapStart()
			if yyl1588 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1588, d)
			}
		} else if yyct1588 == codecSelferValueTypeArray1234 {
			yyl1588 := r.ReadArrayStart()
			if yyl1588 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1588, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1589Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1589Slc
	var yyhl1589 bool = l >= 0
	for yyj1589 := 0; ; yyj1589++ {
		if yyhl1589 {
			if yyj1589 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1589Slc = r.DecodeBytes(yys1589Slc, true, true)
		yys1589 := string(yys1589Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1589 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1589)
		} // end switch yys1589
	} // end for yyj1589
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1593 int
	var yyb1593 bool
	var yyhl1593 bool = l >= 0
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1593++
		if yyhl1593 {
			yyb1593 = yyj1593 > l
		} else {
			yyb1593 = r.CheckBreak()
		}
		if yyb1593 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1593-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1597 := z.EncBinary()
		_ = yym1597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1598 := !z.EncBinary()
			yy2arr1598 := z.EncBasicHandle().StructToArray
			var yyq1598 [2]bool
			_, _, _ = yysep1598, yyq1598, yy2arr1598
			const yyr1598 bool = false
			yyq1598[0] = x.PostStart != nil
			yyq1598[1] = x.PreStop != nil
			var yynn1598 int
			if yyr1598 || yy2arr1598 {
				r.EncodeArrayStart(2)
			} else {
				yynn1598 = 0
				for _, b := range yyq1598 {
					if b {
						yynn1598++
					}
				}
				r.EncodeMapStart(yynn1598)
				yynn1598 = 0
			}
			if yyr1598 || yy2arr1598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1598[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1598 || yy2arr1598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1598[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1598 || yy2arr1598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1601 := z.DecBinary()
	_ = yym1601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1602 := r.ContainerType()
		if yyct1602 == codecSelferValueTypeMap1234 {
			yyl1602 := r.ReadMapStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1602, d)
			}
		} else if yyct1602 == codecSelferValueTypeArray1234 {
			yyl1602 := r.ReadArrayStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1603Slc
	var yyhl1603 bool = l >= 0
	for yyj1603 := 0; ; yyj1603++ {
		if yyhl1603 {
			if yyj1603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1603Slc = r.DecodeBytes(yys1603Slc, true, true)
		yys1603 := string(yys1603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1603 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1603)
		} // end switch yys1603
	} // end for yyj1603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1606 int
	var yyb1606 bool
	var yyhl1606 bool = l >= 0
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1606++
		if yyhl1606 {
			yyb1606 = yyj1606 > l
		} else {
			yyb1606 = r.CheckBreak()
		}
		if yyb1606 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1606-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1609 := z.EncBinary()
	_ = yym1609
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1610 := z.DecBinary()
	_ = yym1610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1611 := z.EncBinary()
		_ = yym1611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1612 := !z.EncBinary()
			yy2arr1612 := z.EncBasicHandle().StructToArray
			var yyq1612 [2]bool
			_, _, _ = yysep1612, yyq1612, yy2arr1612
			const yyr1612 bool = false
			yyq1612[0] = x.Reason != ""
			yyq1612[1] = x.Message != ""
			var yynn1612 int
			if yyr1612 || yy2arr1612 {
				r.EncodeArrayStart(2)
			} else {
				yynn1612 = 0
				for _, b := range yyq1612 {
					if b {
						yynn1612++
					}
				}
				r.EncodeMapStart(yynn1612)
				yynn1612 = 0
			}
			if yyr1612 || yy2arr1612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1612[0] {
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1612[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1612 || yy2arr1612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1612[1] {
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1612[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1618 := z.EncBinary()
					_ = yym1618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1612 || yy2arr1612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1619 := z.DecBinary()
	_ = yym1619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1620 := r.ContainerType()
		if yyct1620 == codecSelferValueTypeMap1234 {
			yyl1620 := r.ReadMapStart()
			if yyl1620 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1620, d)
			}
		} else if yyct1620 == codecSelferValueTypeArray1234 {
			yyl1620 := r.ReadArrayStart()
			if yyl1620 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1620, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1621Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1621Slc
	var yyhl1621 bool = l >= 0
	for yyj1621 := 0; ; yyj1621++ {
		if yyhl1621 {
			if yyj1621 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1621Slc = r.DecodeBytes(yys1621Slc, true, true)
		yys1621 := string(yys1621Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1621 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1621)
		} // end switch yys1621
	} // end for yyj1621
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1624 int
	var yyb1624 bool
	var yyhl1624 bool = l >= 0
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1624++
		if yyhl1624 {
			yyb1624 = yyj1624 > l
		} else {
			yyb1624 = r.CheckBreak()
		}
		if yyb1624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1627 := z.EncBinary()
		_ = yym1627
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1628 := !z.EncBinary()
			yy2arr1628 := z.EncBasicHandle().StructToArray
			var yyq1628 [1]bool
			_, _, _ = yysep1628, yyq1628, yy2arr1628
			const yyr1628 bool = false
			yyq1628[0] = true
			var yynn1628 int
			if yyr1628 || yy2arr1628 {
				r.EncodeArrayStart(1)
			} else {
				yynn1628 = 0
				for _, b := range yyq1628 {
					if b {
						yynn1628++
					}
				}
				r.EncodeMapStart(yynn1628)
				yynn1628 = 0
			}
			if yyr1628 || yy2arr1628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1628[0] {
					yy1630 := &x.StartedAt
					yym1631 := z.EncBinary()
					_ = yym1631
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1630) {
					} else if yym1631 {
						z.EncBinaryMarshal(yy1630)
					} else if !yym1631 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1630)
					} else {
						z.EncFallback(yy1630)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1628[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1632 := &x.StartedAt
					yym1633 := z.EncBinary()
					_ = yym1633
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1632) {
					} else if yym1633 {
						z.EncBinaryMarshal(yy1632)
					} else if !yym1633 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1632)
					} else {
						z.EncFallback(yy1632)
					}
				}
			}
			if yyr1628 || yy2arr1628 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1634 := z.DecBinary()
	_ = yym1634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1635 := r.ContainerType()
		if yyct1635 == codecSelferValueTypeMap1234 {
			yyl1635 := r.ReadMapStart()
			if yyl1635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1635, d)
			}
		} else if yyct1635 == codecSelferValueTypeArray1234 {
			yyl1635 := r.ReadArrayStart()
			if yyl1635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1636Slc
	var yyhl1636 bool = l >= 0
	for yyj1636 := 0; ; yyj1636++ {
		if yyhl1636 {
			if yyj1636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1636Slc = r.DecodeBytes(yys1636Slc, true, true)
		yys1636 := string(yys1636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1636 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1637 := &x.StartedAt
				yym1638 := z.DecBinary()
				_ = yym1638
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1637) {
				} else if yym1638 {
					z.DecBinaryUnmarshal(yyv1637)
				} else if !yym1638 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1637)
				} else {
					z.DecFallback(yyv1637, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1636)
		} // end switch yys1636
	} // end for yyj1636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1639 int
	var yyb1639 bool
	var yyhl1639 bool = l >= 0
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1640 := &x.StartedAt
		yym1641 := z.DecBinary()
		_ = yym1641
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1640) {
		} else if yym1641 {
			z.DecBinaryUnmarshal(yyv1640)
		} else if !yym1641 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1640)
		} else {
			z.DecFallback(yyv1640, false)
		}
	}
	for {
		yyj1639++
		if yyhl1639 {
			yyb1639 = yyj1639 > l
		} else {
			yyb1639 = r.CheckBreak()
		}
		if yyb1639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1642 := z.EncBinary()
		_ = yym1642
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1643 := !z.EncBinary()
			yy2arr1643 := z.EncBasicHandle().StructToArray
			var yyq1643 [7]bool
			_, _, _ = yysep1643, yyq1643, yy2arr1643
			const yyr1643 bool = false
			yyq1643[1] = x.Signal != 0
			yyq1643[2] = x.Reason != ""
			yyq1643[3] = x.Message != ""
			yyq1643[4] = true
			yyq1643[5] = true
			yyq1643[6] = x.ContainerID != ""
			var yynn1643 int
			if yyr1643 || yy2arr1643 {
				r.EncodeArrayStart(7)
			} else {
				yynn1643 = 1
				for _, b := range yyq1643 {
					if b {
						yynn1643++
					}
				}
				r.EncodeMapStart(yynn1643)
				yynn1643 = 0
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1645 := z.EncBinary()
				_ = yym1645
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1646 := z.EncBinary()
				_ = yym1646
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1643[1] {
					yym1648 := z.EncBinary()
					_ = yym1648
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1643[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1649 := z.EncBinary()
					_ = yym1649
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1643[2] {
					yym1651 := z.EncBinary()
					_ = yym1651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1643[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1652 := z.EncBinary()
					_ = yym1652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1643[3] {
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1643[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1643[4] {
					yy1657 := &x.StartedAt
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1657) {
					} else if yym1658 {
						z.EncBinaryMarshal(yy1657)
					} else if !yym1658 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1657)
					} else {
						z.EncFallback(yy1657)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1643[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1659 := &x.StartedAt
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1659) {
					} else if yym1660 {
						z.EncBinaryMarshal(yy1659)
					} else if !yym1660 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1659)
					} else {
						z.EncFallback(yy1659)
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1643[5] {
					yy1662 := &x.FinishedAt
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1662) {
					} else if yym1663 {
						z.EncBinaryMarshal(yy1662)
					} else if !yym1663 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1662)
					} else {
						z.EncFallback(yy1662)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1643[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1664 := &x.FinishedAt
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1664) {
					} else if yym1665 {
						z.EncBinaryMarshal(yy1664)
					} else if !yym1665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1664)
					} else {
						z.EncFallback(yy1664)
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1643[6] {
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1643[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1669 := z.DecBinary()
	_ = yym1669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1670 := r.ContainerType()
		if yyct1670 == codecSelferValueTypeMap1234 {
			yyl1670 := r.ReadMapStart()
			if yyl1670 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1670, d)
			}
		} else if yyct1670 == codecSelferValueTypeArray1234 {
			yyl1670 := r.ReadArrayStart()
			if yyl1670 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1671Slc
	var yyhl1671 bool = l >= 0
	for yyj1671 := 0; ; yyj1671++ {
		if yyhl1671 {
			if yyj1671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1671Slc = r.DecodeBytes(yys1671Slc, true, true)
		yys1671 := string(yys1671Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1671 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1676 := &x.StartedAt
				yym1677 := z.DecBinary()
				_ = yym1677
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1676) {
				} else if yym1677 {
					z.DecBinaryUnmarshal(yyv1676)
				} else if !yym1677 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1676)
				} else {
					z.DecFallback(yyv1676, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1678 := &x.FinishedAt
				yym1679 := z.DecBinary()
				_ = yym1679
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1678) {
				} else if yym1679 {
					z.DecBinaryUnmarshal(yyv1678)
				} else if !yym1679 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1678)
				} else {
					z.DecFallback(yyv1678, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1671)
		} // end switch yys1671
	} // end for yyj1671
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1681 int
	var yyb1681 bool
	var yyhl1681 bool = l >= 0
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1686 := &x.StartedAt
		yym1687 := z.DecBinary()
		_ = yym1687
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1686) {
		} else if yym1687 {
			z.DecBinaryUnmarshal(yyv1686)
		} else if !yym1687 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1686)
		} else {
			z.DecFallback(yyv1686, false)
		}
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1688 := &x.FinishedAt
		yym1689 := z.DecBinary()
		_ = yym1689
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1688) {
		} else if yym1689 {
			z.DecBinaryUnmarshal(yyv1688)
		} else if !yym1689 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1688)
		} else {
			z.DecFallback(yyv1688, false)
		}
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1681++
		if yyhl1681 {
			yyb1681 = yyj1681 > l
		} else {
			yyb1681 = r.CheckBreak()
		}
		if yyb1681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1691 := z.EncBinary()
		_ = yym1691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1692 := !z.EncBinary()
			yy2arr1692 := z.EncBasicHandle().StructToArray
			var yyq1692 [3]bool
			_, _, _ = yysep1692, yyq1692, yy2arr1692
			const yyr1692 bool = false
			yyq1692[0] = x.Waiting != nil
			yyq1692[1] = x.Running != nil
			yyq1692[2] = x.Terminated != nil
			var yynn1692 int
			if yyr1692 || yy2arr1692 {
				r.EncodeArrayStart(3)
			} else {
				yynn1692 = 0
				for _, b := range yyq1692 {
					if b {
						yynn1692++
					}
				}
				r.EncodeMapStart(yynn1692)
				yynn1692 = 0
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1692[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1692[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1692[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1692[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1692[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1692[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1696 := z.DecBinary()
	_ = yym1696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1697 := r.ContainerType()
		if yyct1697 == codecSelferValueTypeMap1234 {
			yyl1697 := r.ReadMapStart()
			if yyl1697 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1697, d)
			}
		} else if yyct1697 == codecSelferValueTypeArray1234 {
			yyl1697 := r.ReadArrayStart()
			if yyl1697 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1698Slc
	var yyhl1698 bool = l >= 0
	for yyj1698 := 0; ; yyj1698++ {
		if yyhl1698 {
			if yyj1698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1698Slc = r.DecodeBytes(yys1698Slc, true, true)
		yys1698 := string(yys1698Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1698 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1698)
		} // end switch yys1698
	} // end for yyj1698
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1706 := z.EncBinary()
		_ = yym1706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1707 := !z.EncBinary()
			yy2arr1707 := z.EncBasicHandle().StructToArray
			var yyq1707 [8]bool
			_, _, _ = yysep1707, yyq1707, yy2arr1707
			const yyr1707 bool = false
			yyq1707[1] = true
			yyq1707[2] = true
			yyq1707[7] = x.ContainerID != ""
			var yynn1707 int
			if yyr1707 || yy2arr1707 {
				r.EncodeArrayStart(8)
			} else {
				yynn1707 = 5
				for _, b := range yyq1707 {
					if b {
						yynn1707++
					}
				}
				r.EncodeMapStart(yynn1707)
				yynn1707 = 0
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1709 := z.EncBinary()
				_ = yym1709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1710 := z.EncBinary()
				_ = yym1710
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1707[1] {
					yy1712 := &x.State
					yy1712.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1707[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1713 := &x.State
					yy1713.CodecEncodeSelf(e)
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1707[2] {
					yy1715 := &x.LastTerminationState
					yy1715.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1707[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1716 := &x.LastTerminationState
					yy1716.CodecEncodeSelf(e)
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1718 := z.EncBinary()
				_ = yym1718
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1719 := z.EncBinary()
				_ = yym1719
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1721 := z.EncBinary()
				_ = yym1721
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1722 := z.EncBinary()
				_ = yym1722
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1724 := z.EncBinary()
				_ = yym1724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1725 := z.EncBinary()
				_ = yym1725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1727 := z.EncBinary()
				_ = yym1727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1728 := z.EncBinary()
				_ = yym1728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1707[7] {
					yym1730 := z.EncBinary()
					_ = yym1730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1707[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1707 || yy2arr1707 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1732 := z.DecBinary()
	_ = yym1732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1733 := r.ContainerType()
		if yyct1733 == codecSelferValueTypeMap1234 {
			yyl1733 := r.ReadMapStart()
			if yyl1733 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1733, d)
			}
		} else if yyct1733 == codecSelferValueTypeArray1234 {
			yyl1733 := r.ReadArrayStart()
			if yyl1733 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1734Slc
	var yyhl1734 bool = l >= 0
	for yyj1734 := 0; ; yyj1734++ {
		if yyhl1734 {
			if yyj1734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1734Slc = r.DecodeBytes(yys1734Slc, true, true)
		yys1734 := string(yys1734Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1734 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1736 := &x.State
				yyv1736.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1737 := &x.LastTerminationState
				yyv1737.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1734)
		} // end switch yys1734
	} // end for yyj1734
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1743 int
	var yyb1743 bool
	var yyhl1743 bool = l >= 0
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1745 := &x.State
		yyv1745.CodecDecodeSelf(d)
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1746 := &x.LastTerminationState
		yyv1746.CodecDecodeSelf(d)
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1743++
		if yyhl1743 {
			yyb1743 = yyj1743 > l
		} else {
			yyb1743 = r.CheckBreak()
		}
		if yyb1743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1752 := z.EncBinary()
	_ = yym1752
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1753 := z.DecBinary()
	_ = yym1753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1754 := z.EncBinary()
	_ = yym1754
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1755 := z.DecBinary()
	_ = yym1755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1756 := z.EncBinary()
		_ = yym1756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1757 := !z.EncBinary()
			yy2arr1757 := z.EncBasicHandle().StructToArray
			var yyq1757 [6]bool
			_, _, _ = yysep1757, yyq1757, yy2arr1757
			const yyr1757 bool = false
			yyq1757[2] = true
			yyq1757[3] = true
			yyq1757[4] = x.Reason != ""
			yyq1757[5] = x.Message != ""
			var yynn1757 int
			if yyr1757 || yy2arr1757 {
				r.EncodeArrayStart(6)
			} else {
				yynn1757 = 2
				for _, b := range yyq1757 {
					if b {
						yynn1757++
					}
				}
				r.EncodeMapStart(yynn1757)
				yynn1757 = 0
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[2] {
					yy1761 := &x.LastProbeTime
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1761) {
					} else if yym1762 {
						z.EncBinaryMarshal(yy1761)
					} else if !yym1762 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1761)
					} else {
						z.EncFallback(yy1761)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1763 := &x.LastProbeTime
					yym1764 := z.EncBinary()
					_ = yym1764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1763) {
					} else if yym1764 {
						z.EncBinaryMarshal(yy1763)
					} else if !yym1764 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1763)
					} else {
						z.EncFallback(yy1763)
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[3] {
					yy1766 := &x.LastTransitionTime
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1766) {
					} else if yym1767 {
						z.EncBinaryMarshal(yy1766)
					} else if !yym1767 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1766)
					} else {
						z.EncFallback(yy1766)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1768 := &x.LastTransitionTime
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1768) {
					} else if yym1769 {
						z.EncBinaryMarshal(yy1768)
					} else if !yym1769 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1768)
					} else {
						z.EncFallback(yy1768)
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[4] {
					yym1771 := z.EncBinary()
					_ = yym1771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1757[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[5] {
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1757[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1776 := z.DecBinary()
	_ = yym1776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1777 := r.ContainerType()
		if yyct1777 == codecSelferValueTypeMap1234 {
			yyl1777 := r.ReadMapStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1777, d)
			}
		} else if yyct1777 == codecSelferValueTypeArray1234 {
			yyl1777 := r.ReadArrayStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1778Slc
	var yyhl1778 bool = l >= 0
	for yyj1778 := 0; ; yyj1778++ {
		if yyhl1778 {
			if yyj1778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1778Slc = r.DecodeBytes(yys1778Slc, true, true)
		yys1778 := string(yys1778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1778 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1781 := &x.LastProbeTime
				yym1782 := z.DecBinary()
				_ = yym1782
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1781) {
				} else if yym1782 {
					z.DecBinaryUnmarshal(yyv1781)
				} else if !yym1782 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1781)
				} else {
					z.DecFallback(yyv1781, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1783 := &x.LastTransitionTime
				yym1784 := z.DecBinary()
				_ = yym1784
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1783) {
				} else if yym1784 {
					z.DecBinaryUnmarshal(yyv1783)
				} else if !yym1784 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1783)
				} else {
					z.DecFallback(yyv1783, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1778)
		} // end switch yys1778
	} // end for yyj1778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1787 int
	var yyb1787 bool
	var yyhl1787 bool = l >= 0
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1790 := &x.LastProbeTime
		yym1791 := z.DecBinary()
		_ = yym1791
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1790) {
		} else if yym1791 {
			z.DecBinaryUnmarshal(yyv1790)
		} else if !yym1791 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1790)
		} else {
			z.DecFallback(yyv1790, false)
		}
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1792 := &x.LastTransitionTime
		yym1793 := z.DecBinary()
		_ = yym1793
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1792) {
		} else if yym1793 {
			z.DecBinaryUnmarshal(yyv1792)
		} else if !yym1793 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1792)
		} else {
			z.DecFallback(yyv1792, false)
		}
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1787++
		if yyhl1787 {
			yyb1787 = yyj1787 > l
		} else {
			yyb1787 = r.CheckBreak()
		}
		if yyb1787 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1787-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1796 := z.EncBinary()
	_ = yym1796
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1797 := z.DecBinary()
	_ = yym1797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1798 := z.EncBinary()
	_ = yym1798
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1799 := z.DecBinary()
	_ = yym1799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1800 := z.EncBinary()
		_ = yym1800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1801 := !z.EncBinary()
			yy2arr1801 := z.EncBasicHandle().StructToArray
			var yyq1801 [1]bool
			_, _, _ = yysep1801, yyq1801, yy2arr1801
			const yyr1801 bool = false
			var yynn1801 int
			if yyr1801 || yy2arr1801 {
				r.EncodeArrayStart(1)
			} else {
				yynn1801 = 1
				for _, b := range yyq1801 {
					if b {
						yynn1801++
					}
				}
				r.EncodeMapStart(yynn1801)
				yynn1801 = 0
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1803 := z.EncBinary()
					_ = yym1803
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1804 := z.EncBinary()
					_ = yym1804
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1805 := z.DecBinary()
	_ = yym1805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1806 := r.ContainerType()
		if yyct1806 == codecSelferValueTypeMap1234 {
			yyl1806 := r.ReadMapStart()
			if yyl1806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1806, d)
			}
		} else if yyct1806 == codecSelferValueTypeArray1234 {
			yyl1806 := r.ReadArrayStart()
			if yyl1806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1807Slc
	var yyhl1807 bool = l >= 0
	for yyj1807 := 0; ; yyj1807++ {
		if yyhl1807 {
			if yyj1807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1807Slc = r.DecodeBytes(yys1807Slc, true, true)
		yys1807 := string(yys1807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1807 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1808 := &x.NodeSelectorTerms
				yym1809 := z.DecBinary()
				_ = yym1809
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1808), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1807)
		} // end switch yys1807
	} // end for yyj1807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1810 int
	var yyb1810 bool
	var yyhl1810 bool = l >= 0
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1811 := &x.NodeSelectorTerms
		yym1812 := z.DecBinary()
		_ = yym1812
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1811), d)
		}
	}
	for {
		yyj1810++
		if yyhl1810 {
			yyb1810 = yyj1810 > l
		} else {
			yyb1810 = r.CheckBreak()
		}
		if yyb1810 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1810-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1813 := z.EncBinary()
		_ = yym1813
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1814 := !z.EncBinary()
			yy2arr1814 := z.EncBasicHandle().StructToArray
			var yyq1814 [1]bool
			_, _, _ = yysep1814, yyq1814, yy2arr1814
			const yyr1814 bool = false
			var yynn1814 int
			if yyr1814 || yy2arr1814 {
				r.EncodeArrayStart(1)
			} else {
				yynn1814 = 1
				for _, b := range yyq1814 {
					if b {
						yynn1814++
					}
				}
				r.EncodeMapStart(yynn1814)
				yynn1814 = 0
			}
			if yyr1814 || yy2arr1814 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1814 || yy2arr1814 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1818 := z.DecBinary()
	_ = yym1818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1819 := r.ContainerType()
		if yyct1819 == codecSelferValueTypeMap1234 {
			yyl1819 := r.ReadMapStart()
			if yyl1819 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1819, d)
			}
		} else if yyct1819 == codecSelferValueTypeArray1234 {
			yyl1819 := r.ReadArrayStart()
			if yyl1819 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1820Slc
	var yyhl1820 bool = l >= 0
	for yyj1820 := 0; ; yyj1820++ {
		if yyhl1820 {
			if yyj1820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1820Slc = r.DecodeBytes(yys1820Slc, true, true)
		yys1820 := string(yys1820Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1820 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1821 := &x.MatchExpressions
				yym1822 := z.DecBinary()
				_ = yym1822
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1821), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1820)
		} // end switch yys1820
	} // end for yyj1820
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1823 int
	var yyb1823 bool
	var yyhl1823 bool = l >= 0
	yyj1823++
	if yyhl1823 {
		yyb1823 = yyj1823 > l
	} else {
		yyb1823 = r.CheckBreak()
	}
	if yyb1823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1824 := &x.MatchExpressions
		yym1825 := z.DecBinary()
		_ = yym1825
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1824), d)
		}
	}
	for {
		yyj1823++
		if yyhl1823 {
			yyb1823 = yyj1823 > l
		} else {
			yyb1823 = r.CheckBreak()
		}
		if yyb1823 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1823-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1826 := z.EncBinary()
		_ = yym1826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1827 := !z.EncBinary()
			yy2arr1827 := z.EncBasicHandle().StructToArray
			var yyq1827 [3]bool
			_, _, _ = yysep1827, yyq1827, yy2arr1827
			const yyr1827 bool = false
			yyq1827[2] = len(x.Values) != 0
			var yynn1827 int
			if yyr1827 || yy2arr1827 {
				r.EncodeArrayStart(3)
			} else {
				yynn1827 = 2
				for _, b := range yyq1827 {
					if b {
						yynn1827++
					}
				}
				r.EncodeMapStart(yynn1827)
				yynn1827 = 0
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1829 := z.EncBinary()
				_ = yym1829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1830 := z.EncBinary()
				_ = yym1830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1827[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1833 := z.EncBinary()
						_ = yym1833
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1834 := z.EncBinary()
						_ = yym1834
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1835 := z.DecBinary()
	_ = yym1835
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1836 := r.ContainerType()
		if yyct1836 == codecSelferValueTypeMap1234 {
			yyl1836 := r.ReadMapStart()
			if yyl1836 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1836, d)
			}
		} else if yyct1836 == codecSelferValueTypeArray1234 {
			yyl1836 := r.ReadArrayStart()
			if yyl1836 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1836, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1837Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1837Slc
	var yyhl1837 bool = l >= 0
	for yyj1837 := 0; ; yyj1837++ {
		if yyhl1837 {
			if yyj1837 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1837Slc = r.DecodeBytes(yys1837Slc, true, true)
		yys1837 := string(yys1837Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1837 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1840 := &x.Values
				yym1841 := z.DecBinary()
				_ = yym1841
				if false {
				} else {
					z.F.DecSliceStringX(yyv1840, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1837)
		} // end switch yys1837
	} // end for yyj1837
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1842 int
	var yyb1842 bool
	var yyhl1842 bool = l >= 0
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1845 := &x.Values
		yym1846 := z.DecBinary()
		_ = yym1846
		if false {
		} else {
			z.F.DecSliceStringX(yyv1845, false, d)
		}
	}
	for {
		yyj1842++
		if yyhl1842 {
			yyb1842 = yyj1842 > l
		} else {
			yyb1842 = r.CheckBreak()
		}
		if yyb1842 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1842-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1847 := z.EncBinary()
	_ = yym1847
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1848 := z.DecBinary()
	_ = yym1848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1849 := z.EncBinary()
		_ = yym1849
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1850 := !z.EncBinary()
			yy2arr1850 := z.EncBasicHandle().StructToArray
			var yyq1850 [3]bool
			_, _, _ = yysep1850, yyq1850, yy2arr1850
			const yyr1850 bool = false
			yyq1850[0] = x.NodeAffinity != nil
			yyq1850[1] = x.PodAffinity != nil
			yyq1850[2] = x.PodAntiAffinity != nil
			var yynn1850 int
			if yyr1850 || yy2arr1850 {
				r.EncodeArrayStart(3)
			} else {
				yynn1850 = 0
				for _, b := range yyq1850 {
					if b {
						yynn1850++
					}
				}
				r.EncodeMapStart(yynn1850)
				yynn1850 = 0
			}
			if yyr1850 || yy2arr1850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1850[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1850[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1850 || yy2arr1850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1850[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1850[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1850 || yy2arr1850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1850[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1850[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1850 || yy2arr1850 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1854 := z.DecBinary()
	_ = yym1854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1855 := r.ContainerType()
		if yyct1855 == codecSelferValueTypeMap1234 {
			yyl1855 := r.ReadMapStart()
			if yyl1855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1855, d)
			}
		} else if yyct1855 == codecSelferValueTypeArray1234 {
			yyl1855 := r.ReadArrayStart()
			if yyl1855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1856Slc
	var yyhl1856 bool = l >= 0
	for yyj1856 := 0; ; yyj1856++ {
		if yyhl1856 {
			if yyj1856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1856Slc = r.DecodeBytes(yys1856Slc, true, true)
		yys1856 := string(yys1856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1856 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1856)
		} // end switch yys1856
	} // end for yyj1856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1860 int
	var yyb1860 bool
	var yyhl1860 bool = l >= 0
	yyj1860++
	if yyhl1860 {
		yyb1860 = yyj1860 > l
	} else {
		yyb1860 = r.CheckBreak()
	}
	if yyb1860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1860++
	if yyhl1860 {
		yyb1860 = yyj1860 > l
	} else {
		yyb1860 = r.CheckBreak()
	}
	if yyb1860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1860++
	if yyhl1860 {
		yyb1860 = yyj1860 > l
	} else {
		yyb1860 = r.CheckBreak()
	}
	if yyb1860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1860++
		if yyhl1860 {
			yyb1860 = yyj1860 > l
		} else {
			yyb1860 = r.CheckBreak()
		}
		if yyb1860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1864 := z.EncBinary()
		_ = yym1864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1865 := !z.EncBinary()
			yy2arr1865 := z.EncBasicHandle().StructToArray
			var yyq1865 [2]bool
			_, _, _ = yysep1865, yyq1865, yy2arr1865
			const yyr1865 bool = false
			yyq1865[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1865[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1865 int
			if yyr1865 || yy2arr1865 {
				r.EncodeArrayStart(2)
			} else {
				yynn1865 = 0
				for _, b := range yyq1865 {
					if b {
						yynn1865++
					}
				}
				r.EncodeMapStart(yynn1865)
				yynn1865 = 0
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1865[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1867 := z.EncBinary()
						_ = yym1867
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1865[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1868 := z.EncBinary()
						_ = yym1868
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1865[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1870 := z.EncBinary()
						_ = yym1870
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1865[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1871 := z.EncBinary()
						_ = yym1871
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1872 := z.DecBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1873 := r.ContainerType()
		if yyct1873 == codecSelferValueTypeMap1234 {
			yyl1873 := r.ReadMapStart()
			if yyl1873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1873, d)
			}
		} else if yyct1873 == codecSelferValueTypeArray1234 {
			yyl1873 := r.ReadArrayStart()
			if yyl1873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1874Slc
	var yyhl1874 bool = l >= 0
	for yyj1874 := 0; ; yyj1874++ {
		if yyhl1874 {
			if yyj1874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1874Slc = r.DecodeBytes(yys1874Slc, true, true)
		yys1874 := string(yys1874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1874 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1875 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1876 := z.DecBinary()
				_ = yym1876
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1875), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1877 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1878 := z.DecBinary()
				_ = yym1878
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1877), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1874)
		} // end switch yys1874
	} // end for yyj1874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1879 int
	var yyb1879 bool
	var yyhl1879 bool = l >= 0
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1880 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1881 := z.DecBinary()
		_ = yym1881
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1880), d)
		}
	}
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1882 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1883 := z.DecBinary()
		_ = yym1883
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1882), d)
		}
	}
	for {
		yyj1879++
		if yyhl1879 {
			yyb1879 = yyj1879 > l
		} else {
			yyb1879 = r.CheckBreak()
		}
		if yyb1879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1884 := z.EncBinary()
		_ = yym1884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1885 := !z.EncBinary()
			yy2arr1885 := z.EncBasicHandle().StructToArray
			var yyq1885 [2]bool
			_, _, _ = yysep1885, yyq1885, yy2arr1885
			const yyr1885 bool = false
			yyq1885[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1885[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1885 int
			if yyr1885 || yy2arr1885 {
				r.EncodeArrayStart(2)
			} else {
				yynn1885 = 0
				for _, b := range yyq1885 {
					if b {
						yynn1885++
					}
				}
				r.EncodeMapStart(yynn1885)
				yynn1885 = 0
			}
			if yyr1885 || yy2arr1885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1885[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1887 := z.EncBinary()
						_ = yym1887
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1885[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1888 := z.EncBinary()
						_ = yym1888
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1885 || yy2arr1885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1885[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1890 := z.EncBinary()
						_ = yym1890
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1885[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1891 := z.EncBinary()
						_ = yym1891
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1885 || yy2arr1885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1892 := z.DecBinary()
	_ = yym1892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1893 := r.ContainerType()
		if yyct1893 == codecSelferValueTypeMap1234 {
			yyl1893 := r.ReadMapStart()
			if yyl1893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1893, d)
			}
		} else if yyct1893 == codecSelferValueTypeArray1234 {
			yyl1893 := r.ReadArrayStart()
			if yyl1893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1894Slc
	var yyhl1894 bool = l >= 0
	for yyj1894 := 0; ; yyj1894++ {
		if yyhl1894 {
			if yyj1894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1894Slc = r.DecodeBytes(yys1894Slc, true, true)
		yys1894 := string(yys1894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1894 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1895 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1896 := z.DecBinary()
				_ = yym1896
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1895), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1897 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1898 := z.DecBinary()
				_ = yym1898
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1897), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1894)
		} // end switch yys1894
	} // end for yyj1894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1899 int
	var yyb1899 bool
	var yyhl1899 bool = l >= 0
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1900 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1901 := z.DecBinary()
		_ = yym1901
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1900), d)
		}
	}
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1902 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1903 := z.DecBinary()
		_ = yym1903
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1902), d)
		}
	}
	for {
		yyj1899++
		if yyhl1899 {
			yyb1899 = yyj1899 > l
		} else {
			yyb1899 = r.CheckBreak()
		}
		if yyb1899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1904 := z.EncBinary()
		_ = yym1904
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1905 := !z.EncBinary()
			yy2arr1905 := z.EncBasicHandle().StructToArray
			var yyq1905 [2]bool
			_, _, _ = yysep1905, yyq1905, yy2arr1905
			const yyr1905 bool = false
			var yynn1905 int
			if yyr1905 || yy2arr1905 {
				r.EncodeArrayStart(2)
			} else {
				yynn1905 = 2
				for _, b := range yyq1905 {
					if b {
						yynn1905++
					}
				}
				r.EncodeMapStart(yynn1905)
				yynn1905 = 0
			}
			if yyr1905 || yy2arr1905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1907 := z.EncBinary()
				_ = yym1907
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1908 := z.EncBinary()
				_ = yym1908
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1905 || yy2arr1905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1910 := &x.PodAffinityTerm
				yy1910.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1911 := &x.PodAffinityTerm
				yy1911.CodecEncodeSelf(e)
			}
			if yyr1905 || yy2arr1905 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1913 := r.ContainerType()
		if yyct1913 == codecSelferValueTypeMap1234 {
			yyl1913 := r.ReadMapStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1913, d)
			}
		} else if yyct1913 == codecSelferValueTypeArray1234 {
			yyl1913 := r.ReadArrayStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1914Slc
	var yyhl1914 bool = l >= 0
	for yyj1914 := 0; ; yyj1914++ {
		if yyhl1914 {
			if yyj1914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1914Slc = r.DecodeBytes(yys1914Slc, true, true)
		yys1914 := string(yys1914Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1914 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1916 := &x.PodAffinityTerm
				yyv1916.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1914)
		} // end switch yys1914
	} // end for yyj1914
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1917 int
	var yyb1917 bool
	var yyhl1917 bool = l >= 0
	yyj1917++
	if yyhl1917 {
		yyb1917 = yyj1917 > l
	} else {
		yyb1917 = r.CheckBreak()
	}
	if yyb1917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1917++
	if yyhl1917 {
		yyb1917 = yyj1917 > l
	} else {
		yyb1917 = r.CheckBreak()
	}
	if yyb1917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1919 := &x.PodAffinityTerm
		yyv1919.CodecDecodeSelf(d)
	}
	for {
		yyj1917++
		if yyhl1917 {
			yyb1917 = yyj1917 > l
		} else {
			yyb1917 = r.CheckBreak()
		}
		if yyb1917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1920 := z.EncBinary()
		_ = yym1920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1921 := !z.EncBinary()
			yy2arr1921 := z.EncBasicHandle().StructToArray
			var yyq1921 [3]bool
			_, _, _ = yysep1921, yyq1921, yy2arr1921
			const yyr1921 bool = false
			yyq1921[0] = x.LabelSelector != nil
			yyq1921[2] = x.TopologyKey != ""
			var yynn1921 int
			if yyr1921 || yy2arr1921 {
				r.EncodeArrayStart(3)
			} else {
				yynn1921 = 1
				for _, b := range yyq1921 {
					if b {
						yynn1921++
					}
				}
				r.EncodeMapStart(yynn1921)
				yynn1921 = 0
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1923 := z.EncBinary()
						_ = yym1923
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1924 := z.EncBinary()
						_ = yym1924
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[2] {
					yym1929 := z.EncBinary()
					_ = yym1929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1931 := z.DecBinary()
	_ = yym1931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1932 := r.ContainerType()
		if yyct1932 == codecSelferValueTypeMap1234 {
			yyl1932 := r.ReadMapStart()
			if yyl1932 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1932, d)
			}
		} else if yyct1932 == codecSelferValueTypeArray1234 {
			yyl1932 := r.ReadArrayStart()
			if yyl1932 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1933Slc
	var yyhl1933 bool = l >= 0
	for yyj1933 := 0; ; yyj1933++ {
		if yyhl1933 {
			if yyj1933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1933Slc = r.DecodeBytes(yys1933Slc, true, true)
		yys1933 := string(yys1933Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1933 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1935 := z.DecBinary()
				_ = yym1935
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1936 := &x.Namespaces
				yym1937 := z.DecBinary()
				_ = yym1937
				if false {
				} else {
					z.F.DecSliceStringX(yyv1936, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1933)
		} // end switch yys1933
	} // end for yyj1933
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1939 int
	var yyb1939 bool
	var yyhl1939 bool = l >= 0
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1941 := z.DecBinary()
		_ = yym1941
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1942 := &x.Namespaces
		yym1943 := z.DecBinary()
		_ = yym1943
		if false {
		} else {
			z.F.DecSliceStringX(yyv1942, false, d)
		}
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1939++
		if yyhl1939 {
			yyb1939 = yyj1939 > l
		} else {
			yyb1939 = r.CheckBreak()
		}
		if yyb1939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1945 := z.EncBinary()
		_ = yym1945
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1946 := !z.EncBinary()
			yy2arr1946 := z.EncBasicHandle().StructToArray
			var yyq1946 [2]bool
			_, _, _ = yysep1946, yyq1946, yy2arr1946
			const yyr1946 bool = false
			yyq1946[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1946[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1946 int
			if yyr1946 || yy2arr1946 {
				r.EncodeArrayStart(2)
			} else {
				yynn1946 = 0
				for _, b := range yyq1946 {
					if b {
						yynn1946++
					}
				}
				r.EncodeMapStart(yynn1946)
				yynn1946 = 0
			}
			if yyr1946 || yy2arr1946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1946[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1946[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1946 || yy2arr1946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1946[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1949 := z.EncBinary()
						_ = yym1949
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1946[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1950 := z.EncBinary()
						_ = yym1950
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1946 || yy2arr1946 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1951 := z.DecBinary()
	_ = yym1951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1952 := r.ContainerType()
		if yyct1952 == codecSelferValueTypeMap1234 {
			yyl1952 := r.ReadMapStart()
			if yyl1952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1952, d)
			}
		} else if yyct1952 == codecSelferValueTypeArray1234 {
			yyl1952 := r.ReadArrayStart()
			if yyl1952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1953Slc
	var yyhl1953 bool = l >= 0
	for yyj1953 := 0; ; yyj1953++ {
		if yyhl1953 {
			if yyj1953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1953Slc = r.DecodeBytes(yys1953Slc, true, true)
		yys1953 := string(yys1953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1953 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1955 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1956 := z.DecBinary()
				_ = yym1956
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1955), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1953)
		} // end switch yys1953
	} // end for yyj1953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1957 int
	var yyb1957 bool
	var yyhl1957 bool = l >= 0
	yyj1957++
	if yyhl1957 {
		yyb1957 = yyj1957 > l
	} else {
		yyb1957 = r.CheckBreak()
	}
	if yyb1957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1957++
	if yyhl1957 {
		yyb1957 = yyj1957 > l
	} else {
		yyb1957 = r.CheckBreak()
	}
	if yyb1957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1959 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1960 := z.DecBinary()
		_ = yym1960
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1959), d)
		}
	}
	for {
		yyj1957++
		if yyhl1957 {
			yyb1957 = yyj1957 > l
		} else {
			yyb1957 = r.CheckBreak()
		}
		if yyb1957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1961 := z.EncBinary()
		_ = yym1961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1962 := !z.EncBinary()
			yy2arr1962 := z.EncBasicHandle().StructToArray
			var yyq1962 [2]bool
			_, _, _ = yysep1962, yyq1962, yy2arr1962
			const yyr1962 bool = false
			var yynn1962 int
			if yyr1962 || yy2arr1962 {
				r.EncodeArrayStart(2)
			} else {
				yynn1962 = 2
				for _, b := range yyq1962 {
					if b {
						yynn1962++
					}
				}
				r.EncodeMapStart(yynn1962)
				yynn1962 = 0
			}
			if yyr1962 || yy2arr1962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1964 := z.EncBinary()
				_ = yym1964
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1965 := z.EncBinary()
				_ = yym1965
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1962 || yy2arr1962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1967 := &x.Preference
				yy1967.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1968 := &x.Preference
				yy1968.CodecEncodeSelf(e)
			}
			if yyr1962 || yy2arr1962 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1969 := z.DecBinary()
	_ = yym1969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1970 := r.ContainerType()
		if yyct1970 == codecSelferValueTypeMap1234 {
			yyl1970 := r.ReadMapStart()
			if yyl1970 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1970, d)
			}
		} else if yyct1970 == codecSelferValueTypeArray1234 {
			yyl1970 := r.ReadArrayStart()
			if yyl1970 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1971Slc
	var yyhl1971 bool = l >= 0
	for yyj1971 := 0; ; yyj1971++ {
		if yyhl1971 {
			if yyj1971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1971Slc = r.DecodeBytes(yys1971Slc, true, true)
		yys1971 := string(yys1971Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1971 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1973 := &x.Preference
				yyv1973.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1971)
		} // end switch yys1971
	} // end for yyj1971
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1974 int
	var yyb1974 bool
	var yyhl1974 bool = l >= 0
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1974++
	if yyhl1974 {
		yyb1974 = yyj1974 > l
	} else {
		yyb1974 = r.CheckBreak()
	}
	if yyb1974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1976 := &x.Preference
		yyv1976.CodecDecodeSelf(d)
	}
	for {
		yyj1974++
		if yyhl1974 {
			yyb1974 = yyj1974 > l
		} else {
			yyb1974 = r.CheckBreak()
		}
		if yyb1974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1977 := z.EncBinary()
		_ = yym1977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1978 := !z.EncBinary()
			yy2arr1978 := z.EncBasicHandle().StructToArray
			var yyq1978 [3]bool
			_, _, _ = yysep1978, yyq1978, yy2arr1978
			const yyr1978 bool = false
			yyq1978[1] = x.Value != ""
			var yynn1978 int
			if yyr1978 || yy2arr1978 {
				r.EncodeArrayStart(3)
			} else {
				yynn1978 = 2
				for _, b := range yyq1978 {
					if b {
						yynn1978++
					}
				}
				r.EncodeMapStart(yynn1978)
				yynn1978 = 0
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1980 := z.EncBinary()
				_ = yym1980
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1981 := z.EncBinary()
				_ = yym1981
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[1] {
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1986 := z.DecBinary()
	_ = yym1986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1987 := r.ContainerType()
		if yyct1987 == codecSelferValueTypeMap1234 {
			yyl1987 := r.ReadMapStart()
			if yyl1987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1987, d)
			}
		} else if yyct1987 == codecSelferValueTypeArray1234 {
			yyl1987 := r.ReadArrayStart()
			if yyl1987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1988Slc
	var yyhl1988 bool = l >= 0
	for yyj1988 := 0; ; yyj1988++ {
		if yyhl1988 {
			if yyj1988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1988Slc = r.DecodeBytes(yys1988Slc, true, true)
		yys1988 := string(yys1988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1988 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1988)
		} // end switch yys1988
	} // end for yyj1988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1992 int
	var yyb1992 bool
	var yyhl1992 bool = l >= 0
	yyj1992++
	if yyhl1992 {
		yyb1992 = yyj1992 > l
	} else {
		yyb1992 = r.CheckBreak()
	}
	if yyb1992 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1992++
	if yyhl1992 {
		yyb1992 = yyj1992 > l
	} else {
		yyb1992 = r.CheckBreak()
	}
	if yyb1992 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1992++
	if yyhl1992 {
		yyb1992 = yyj1992 > l
	} else {
		yyb1992 = r.CheckBreak()
	}
	if yyb1992 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1992++
		if yyhl1992 {
			yyb1992 = yyj1992 > l
		} else {
			yyb1992 = r.CheckBreak()
		}
		if yyb1992 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1992-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1996 := z.EncBinary()
	_ = yym1996
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1997 := z.DecBinary()
	_ = yym1997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1998 := z.EncBinary()
		_ = yym1998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1999 := !z.EncBinary()
			yy2arr1999 := z.EncBasicHandle().StructToArray
			var yyq1999 [4]bool
			_, _, _ = yysep1999, yyq1999, yy2arr1999
			const yyr1999 bool = false
			yyq1999[0] = x.Key != ""
			yyq1999[1] = x.Operator != ""
			yyq1999[2] = x.Value != ""
			yyq1999[3] = x.Effect != ""
			var yynn1999 int
			if yyr1999 || yy2arr1999 {
				r.EncodeArrayStart(4)
			} else {
				yynn1999 = 0
				for _, b := range yyq1999 {
					if b {
						yynn1999++
					}
				}
				r.EncodeMapStart(yynn1999)
				yynn1999 = 0
			}
			if yyr1999 || yy2arr1999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1999[0] {
					yym2001 := z.EncBinary()
					_ = yym2001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1999[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2002 := z.EncBinary()
					_ = yym2002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1999 || yy2arr1999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1999[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1999[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1999 || yy2arr1999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1999[2] {
					yym2005 := z.EncBinary()
					_ = yym2005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1999[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1999 || yy2arr1999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1999[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1999[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1999 || yy2arr1999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2008 := z.DecBinary()
	_ = yym2008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2009 := r.ContainerType()
		if yyct2009 == codecSelferValueTypeMap1234 {
			yyl2009 := r.ReadMapStart()
			if yyl2009 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2009, d)
			}
		} else if yyct2009 == codecSelferValueTypeArray1234 {
			yyl2009 := r.ReadArrayStart()
			if yyl2009 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2010Slc
	var yyhl2010 bool = l >= 0
	for yyj2010 := 0; ; yyj2010++ {
		if yyhl2010 {
			if yyj2010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2010Slc = r.DecodeBytes(yys2010Slc, true, true)
		yys2010 := string(yys2010Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2010 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2010)
		} // end switch yys2010
	} // end for yyj2010
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2015 int
	var yyb2015 bool
	var yyhl2015 bool = l >= 0
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2015++
		if yyhl2015 {
			yyb2015 = yyj2015 > l
		} else {
			yyb2015 = r.CheckBreak()
		}
		if yyb2015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2020 := z.EncBinary()
	_ = yym2020
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2021 := z.DecBinary()
	_ = yym2021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2022 := z.EncBinary()
		_ = yym2022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2023 := !z.EncBinary()
			yy2arr2023 := z.EncBasicHandle().StructToArray
			var yyq2023 [18]bool
			_, _, _ = yysep2023, yyq2023, yy2arr2023
			const yyr2023 bool = false
			yyq2023[0] = len(x.Volumes) != 0
			yyq2023[2] = x.RestartPolicy != ""
			yyq2023[3] = x.TerminationGracePeriodSeconds != nil
			yyq2023[4] = x.ActiveDeadlineSeconds != nil
			yyq2023[5] = x.DNSPolicy != ""
			yyq2023[6] = len(x.NodeSelector) != 0
			yyq2023[7] = x.ServiceAccountName != ""
			yyq2023[8] = x.DeprecatedServiceAccount != ""
			yyq2023[9] = x.NodeName != ""
			yyq2023[10] = x.HostNetwork != false
			yyq2023[11] = x.HostPID != false
			yyq2023[12] = x.HostIPC != false
			yyq2023[13] = x.SecurityContext != nil
			yyq2023[14] = len(x.ImagePullSecrets) != 0
			yyq2023[15] = x.Hostname != ""
			yyq2023[16] = x.Subdomain != ""
			yyq2023[17] = x.Affinity != nil
			var yynn2023 int
			if yyr2023 || yy2arr2023 {
				r.EncodeArrayStart(18)
			} else {
				yynn2023 = 1
				for _, b := range yyq2023 {
					if b {
						yynn2023++
					}
				}
				r.EncodeMapStart(yynn2023)
				yynn2023 = 0
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2026 := z.EncBinary()
						_ = yym2026
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2032 := *x.TerminationGracePeriodSeconds
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							r.EncodeInt(int64(yy2032))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2034 := *x.TerminationGracePeriodSeconds
						yym2035 := z.EncBinary()
						_ = yym2035
						if false {
						} else {
							r.EncodeInt(int64(yy2034))
						}
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2037 := *x.ActiveDeadlineSeconds
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							r.EncodeInt(int64(yy2037))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2039 := *x.ActiveDeadlineSeconds
						yym2040 := z.EncBinary()
						_ = yym2040
						if false {
						} else {
							r.EncodeInt(int64(yy2039))
						}
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2043 := z.EncBinary()
						_ = yym2043
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2044 := z.EncBinary()
						_ = yym2044
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[7] {
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[8] {
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2050 := z.EncBinary()
					_ = yym2050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[9] {
					yym2052 := z.EncBinary()
					_ = yym2052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2053 := z.EncBinary()
					_ = yym2053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[10] {
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2023[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2056 := z.EncBinary()
					_ = yym2056
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[11] {
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2023[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[12] {
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2023[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2062 := z.EncBinary()
					_ = yym2062
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2065 := z.EncBinary()
						_ = yym2065
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2066 := z.EncBinary()
						_ = yym2066
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[15] {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[16] {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[17] {
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("affinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2074 := z.DecBinary()
	_ = yym2074
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2075 := r.ContainerType()
		if yyct2075 == codecSelferValueTypeMap1234 {
			yyl2075 := r.ReadMapStart()
			if yyl2075 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2075, d)
			}
		} else if yyct2075 == codecSelferValueTypeArray1234 {
			yyl2075 := r.ReadArrayStart()
			if yyl2075 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2075, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2076Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2076Slc
	var yyhl2076 bool = l >= 0
	for yyj2076 := 0; ; yyj2076++ {
		if yyhl2076 {
			if yyj2076 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2076Slc = r.DecodeBytes(yys2076Slc, true, true)
		yys2076 := string(yys2076Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2076 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2077 := &x.Volumes
				yym2078 := z.DecBinary()
				_ = yym2078
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2077), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2079 := &x.Containers
				yym2080 := z.DecBinary()
				_ = yym2080
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2079), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2083 := z.DecBinary()
				_ = yym2083
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2085 := z.DecBinary()
				_ = yym2085
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2087 := &x.NodeSelector
				yym2088 := z.DecBinary()
				_ = yym2088
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2087, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2096 := &x.ImagePullSecrets
				yym2097 := z.DecBinary()
				_ = yym2097
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2096), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		case "affinity":
			if r.TryDecodeAsNil() {
				if x.Affinity != nil {
					x.Affinity = nil
				}
			} else {
				if x.Affinity == nil {
					x.Affinity = new(Affinity)
				}
				x.Affinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2076)
		} // end switch yys2076
	} // end for yyj2076
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2101 int
	var yyb2101 bool
	var yyhl2101 bool = l >= 0
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2102 := &x.Volumes
		yym2103 := z.DecBinary()
		_ = yym2103
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2102), d)
		}
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2104 := &x.Containers
		yym2105 := z.DecBinary()
		_ = yym2105
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2104), d)
		}
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2108 := z.DecBinary()
		_ = yym2108
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2110 := z.DecBinary()
		_ = yym2110
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2112 := &x.NodeSelector
		yym2113 := z.DecBinary()
		_ = yym2113
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2112, false, d)
		}
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2121 := &x.ImagePullSecrets
		yym2122 := z.DecBinary()
		_ = yym2122
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2121), d)
		}
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	yyj2101++
	if yyhl2101 {
		yyb2101 = yyj2101 > l
	} else {
		yyb2101 = r.CheckBreak()
	}
	if yyb2101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Affinity != nil {
			x.Affinity = nil
		}
	} else {
		if x.Affinity == nil {
			x.Affinity = new(Affinity)
		}
		x.Affinity.CodecDecodeSelf(d)
	}
	for {
		yyj2101++
		if yyhl2101 {
			yyb2101 = yyj2101 > l
		} else {
			yyb2101 = r.CheckBreak()
		}
		if yyb2101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2126 := z.EncBinary()
		_ = yym2126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2127 := !z.EncBinary()
			yy2arr2127 := z.EncBasicHandle().StructToArray
			var yyq2127 [5]bool
			_, _, _ = yysep2127, yyq2127, yy2arr2127
			const yyr2127 bool = false
			yyq2127[0] = x.SELinuxOptions != nil
			yyq2127[1] = x.RunAsUser != nil
			yyq2127[2] = x.RunAsNonRoot != nil
			yyq2127[3] = len(x.SupplementalGroups) != 0
			yyq2127[4] = x.FSGroup != nil
			var yynn2127 int
			if yyr2127 || yy2arr2127 {
				r.EncodeArrayStart(5)
			} else {
				yynn2127 = 0
				for _, b := range yyq2127 {
					if b {
						yynn2127++
					}
				}
				r.EncodeMapStart(yynn2127)
				yynn2127 = 0
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2130 := *x.RunAsUser
						yym2131 := z.EncBinary()
						_ = yym2131
						if false {
						} else {
							r.EncodeInt(int64(yy2130))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2132 := *x.RunAsUser
						yym2133 := z.EncBinary()
						_ = yym2133
						if false {
						} else {
							r.EncodeInt(int64(yy2132))
						}
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2135 := *x.RunAsNonRoot
						yym2136 := z.EncBinary()
						_ = yym2136
						if false {
						} else {
							r.EncodeBool(bool(yy2135))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2137 := *x.RunAsNonRoot
						yym2138 := z.EncBinary()
						_ = yym2138
						if false {
						} else {
							r.EncodeBool(bool(yy2137))
						}
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2140 := z.EncBinary()
						_ = yym2140
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2141 := z.EncBinary()
						_ = yym2141
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2143 := *x.FSGroup
						yym2144 := z.EncBinary()
						_ = yym2144
						if false {
						} else {
							r.EncodeInt(int64(yy2143))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2145 := *x.FSGroup
						yym2146 := z.EncBinary()
						_ = yym2146
						if false {
						} else {
							r.EncodeInt(int64(yy2145))
						}
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2147 := z.DecBinary()
	_ = yym2147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2148 := r.ContainerType()
		if yyct2148 == codecSelferValueTypeMap1234 {
			yyl2148 := r.ReadMapStart()
			if yyl2148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2148, d)
			}
		} else if yyct2148 == codecSelferValueTypeArray1234 {
			yyl2148 := r.ReadArrayStart()
			if yyl2148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2149Slc
	var yyhl2149 bool = l >= 0
	for yyj2149 := 0; ; yyj2149++ {
		if yyhl2149 {
			if yyj2149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2149Slc = r.DecodeBytes(yys2149Slc, true, true)
		yys2149 := string(yys2149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2149 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2152 := z.DecBinary()
				_ = yym2152
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2154 := z.DecBinary()
				_ = yym2154
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2155 := &x.SupplementalGroups
				yym2156 := z.DecBinary()
				_ = yym2156
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2155, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2158 := z.DecBinary()
				_ = yym2158
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2149)
		} // end switch yys2149
	} // end for yyj2149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2159 int
	var yyb2159 bool
	var yyhl2159 bool = l >= 0
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2162 := z.DecBinary()
		_ = yym2162
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2164 := z.DecBinary()
		_ = yym2164
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2165 := &x.SupplementalGroups
		yym2166 := z.DecBinary()
		_ = yym2166
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2165, false, d)
		}
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2168 := z.DecBinary()
		_ = yym2168
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2159++
		if yyhl2159 {
			yyb2159 = yyj2159 > l
		} else {
			yyb2159 = r.CheckBreak()
		}
		if yyb2159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2169 := z.EncBinary()
		_ = yym2169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2170 := !z.EncBinary()
			yy2arr2170 := z.EncBasicHandle().StructToArray
			var yyq2170 [8]bool
			_, _, _ = yysep2170, yyq2170, yy2arr2170
			const yyr2170 bool = false
			yyq2170[0] = x.Phase != ""
			yyq2170[1] = len(x.Conditions) != 0
			yyq2170[2] = x.Message != ""
			yyq2170[3] = x.Reason != ""
			yyq2170[4] = x.HostIP != ""
			yyq2170[5] = x.PodIP != ""
			yyq2170[6] = x.StartTime != nil
			yyq2170[7] = len(x.ContainerStatuses) != 0
			var yynn2170 int
			if yyr2170 || yy2arr2170 {
				r.EncodeArrayStart(8)
			} else {
				yynn2170 = 0
				for _, b := range yyq2170 {
					if b {
						yynn2170++
					}
				}
				r.EncodeMapStart(yynn2170)
				yynn2170 = 0
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2170[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2173 := z.EncBinary()
						_ = yym2173
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2170[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2174 := z.EncBinary()
						_ = yym2174
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[2] {
					yym2176 := z.EncBinary()
					_ = yym2176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2170[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[3] {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2170[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[4] {
					yym2182 := z.EncBinary()
					_ = yym2182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2170[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[5] {
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2170[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2188 := z.EncBinary()
						_ = yym2188
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2188 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2188 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2170[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2189 := z.EncBinary()
						_ = yym2189
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2189 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2189 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2191 := z.EncBinary()
						_ = yym2191
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2170[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2192 := z.EncBinary()
						_ = yym2192
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2193 := z.DecBinary()
	_ = yym2193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2194 := r.ContainerType()
		if yyct2194 == codecSelferValueTypeMap1234 {
			yyl2194 := r.ReadMapStart()
			if yyl2194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2194, d)
			}
		} else if yyct2194 == codecSelferValueTypeArray1234 {
			yyl2194 := r.ReadArrayStart()
			if yyl2194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2195Slc
	var yyhl2195 bool = l >= 0
	for yyj2195 := 0; ; yyj2195++ {
		if yyhl2195 {
			if yyj2195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2195Slc = r.DecodeBytes(yys2195Slc, true, true)
		yys2195 := string(yys2195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2195 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2197 := &x.Conditions
				yym2198 := z.DecBinary()
				_ = yym2198
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2197), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2204 := z.DecBinary()
				_ = yym2204
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2204 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2204 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2205 := &x.ContainerStatuses
				yym2206 := z.DecBinary()
				_ = yym2206
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2205), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2195)
		} // end switch yys2195
	} // end for yyj2195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2207 int
	var yyb2207 bool
	var yyhl2207 bool = l >= 0
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2209 := &x.Conditions
		yym2210 := z.DecBinary()
		_ = yym2210
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2209), d)
		}
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2216 := z.DecBinary()
		_ = yym2216
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2216 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2216 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2217 := &x.ContainerStatuses
		yym2218 := z.DecBinary()
		_ = yym2218
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2217), d)
		}
	}
	for {
		yyj2207++
		if yyhl2207 {
			yyb2207 = yyj2207 > l
		} else {
			yyb2207 = r.CheckBreak()
		}
		if yyb2207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2219 := z.EncBinary()
		_ = yym2219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2220 := !z.EncBinary()
			yy2arr2220 := z.EncBasicHandle().StructToArray
			var yyq2220 [4]bool
			_, _, _ = yysep2220, yyq2220, yy2arr2220
			const yyr2220 bool = false
			yyq2220[0] = x.Kind != ""
			yyq2220[1] = x.APIVersion != ""
			yyq2220[2] = true
			yyq2220[3] = true
			var yynn2220 int
			if yyr2220 || yy2arr2220 {
				r.EncodeArrayStart(4)
			} else {
				yynn2220 = 0
				for _, b := range yyq2220 {
					if b {
						yynn2220++
					}
				}
				r.EncodeMapStart(yynn2220)
				yynn2220 = 0
			}
			if yyr2220 || yy2arr2220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2220[0] {
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2220[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2223 := z.EncBinary()
					_ = yym2223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2220 || yy2arr2220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2220[1] {
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2220 || yy2arr2220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2220[2] {
					yy2228 := &x.ObjectMeta
					yy2228.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2229 := &x.ObjectMeta
					yy2229.CodecEncodeSelf(e)
				}
			}
			if yyr2220 || yy2arr2220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2220[3] {
					yy2231 := &x.Status
					yy2231.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2220[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2232 := &x.Status
					yy2232.CodecEncodeSelf(e)
				}
			}
			if yyr2220 || yy2arr2220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2233 := z.DecBinary()
	_ = yym2233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2234 := r.ContainerType()
		if yyct2234 == codecSelferValueTypeMap1234 {
			yyl2234 := r.ReadMapStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2234, d)
			}
		} else if yyct2234 == codecSelferValueTypeArray1234 {
			yyl2234 := r.ReadArrayStart()
			if yyl2234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2235Slc
	var yyhl2235 bool = l >= 0
	for yyj2235 := 0; ; yyj2235++ {
		if yyhl2235 {
			if yyj2235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2235Slc = r.DecodeBytes(yys2235Slc, true, true)
		yys2235 := string(yys2235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2235 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2238 := &x.ObjectMeta
				yyv2238.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2239 := &x.Status
				yyv2239.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2235)
		} // end switch yys2235
	} // end for yyj2235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2240 int
	var yyb2240 bool
	var yyhl2240 bool = l >= 0
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2243 := &x.ObjectMeta
		yyv2243.CodecDecodeSelf(d)
	}
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2244 := &x.Status
		yyv2244.CodecDecodeSelf(d)
	}
	for {
		yyj2240++
		if yyhl2240 {
			yyb2240 = yyj2240 > l
		} else {
			yyb2240 = r.CheckBreak()
		}
		if yyb2240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2245 := z.EncBinary()
		_ = yym2245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2246 := !z.EncBinary()
			yy2arr2246 := z.EncBasicHandle().StructToArray
			var yyq2246 [5]bool
			_, _, _ = yysep2246, yyq2246, yy2arr2246
			const yyr2246 bool = false
			yyq2246[0] = x.Kind != ""
			yyq2246[1] = x.APIVersion != ""
			yyq2246[2] = true
			yyq2246[3] = true
			yyq2246[4] = true
			var yynn2246 int
			if yyr2246 || yy2arr2246 {
				r.EncodeArrayStart(5)
			} else {
				yynn2246 = 0
				for _, b := range yyq2246 {
					if b {
						yynn2246++
					}
				}
				r.EncodeMapStart(yynn2246)
				yynn2246 = 0
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[0] {
					yym2248 := z.EncBinary()
					_ = yym2248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2246[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[1] {
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2246[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[2] {
					yy2254 := &x.ObjectMeta
					yy2254.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2246[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2255 := &x.ObjectMeta
					yy2255.CodecEncodeSelf(e)
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[3] {
					yy2257 := &x.Spec
					yy2257.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2246[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2258 := &x.Spec
					yy2258.CodecEncodeSelf(e)
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[4] {
					yy2260 := &x.Status
					yy2260.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2246[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2261 := &x.Status
					yy2261.CodecEncodeSelf(e)
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2262 := z.DecBinary()
	_ = yym2262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2263 := r.ContainerType()
		if yyct2263 == codecSelferValueTypeMap1234 {
			yyl2263 := r.ReadMapStart()
			if yyl2263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2263, d)
			}
		} else if yyct2263 == codecSelferValueTypeArray1234 {
			yyl2263 := r.ReadArrayStart()
			if yyl2263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2264Slc
	var yyhl2264 bool = l >= 0
	for yyj2264 := 0; ; yyj2264++ {
		if yyhl2264 {
			if yyj2264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2264Slc = r.DecodeBytes(yys2264Slc, true, true)
		yys2264 := string(yys2264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2264 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2267 := &x.ObjectMeta
				yyv2267.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2268 := &x.Spec
				yyv2268.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2269 := &x.Status
				yyv2269.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2264)
		} // end switch yys2264
	} // end for yyj2264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2270 int
	var yyb2270 bool
	var yyhl2270 bool = l >= 0
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2273 := &x.ObjectMeta
		yyv2273.CodecDecodeSelf(d)
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2274 := &x.Spec
		yyv2274.CodecDecodeSelf(d)
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2275 := &x.Status
		yyv2275.CodecDecodeSelf(d)
	}
	for {
		yyj2270++
		if yyhl2270 {
			yyb2270 = yyj2270 > l
		} else {
			yyb2270 = r.CheckBreak()
		}
		if yyb2270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2276 := z.EncBinary()
		_ = yym2276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2277 := !z.EncBinary()
			yy2arr2277 := z.EncBasicHandle().StructToArray
			var yyq2277 [4]bool
			_, _, _ = yysep2277, yyq2277, yy2arr2277
			const yyr2277 bool = false
			yyq2277[0] = x.Kind != ""
			yyq2277[1] = x.APIVersion != ""
			yyq2277[2] = true
			var yynn2277 int
			if yyr2277 || yy2arr2277 {
				r.EncodeArrayStart(4)
			} else {
				yynn2277 = 1
				for _, b := range yyq2277 {
					if b {
						yynn2277++
					}
				}
				r.EncodeMapStart(yynn2277)
				yynn2277 = 0
			}
			if yyr2277 || yy2arr2277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2277[0] {
					yym2279 := z.EncBinary()
					_ = yym2279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2277[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2277 || yy2arr2277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2277[1] {
					yym2282 := z.EncBinary()
					_ = yym2282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2277[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2277 || yy2arr2277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2277[2] {
					yy2285 := &x.ListMeta
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2285) {
					} else {
						z.EncFallback(yy2285)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2277[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2287 := &x.ListMeta
					yym2288 := z.EncBinary()
					_ = yym2288
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2287) {
					} else {
						z.EncFallback(yy2287)
					}
				}
			}
			if yyr2277 || yy2arr2277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2290 := z.EncBinary()
					_ = yym2290
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2277 || yy2arr2277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2292 := z.DecBinary()
	_ = yym2292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2293 := r.ContainerType()
		if yyct2293 == codecSelferValueTypeMap1234 {
			yyl2293 := r.ReadMapStart()
			if yyl2293 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2293, d)
			}
		} else if yyct2293 == codecSelferValueTypeArray1234 {
			yyl2293 := r.ReadArrayStart()
			if yyl2293 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2293, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2294Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2294Slc
	var yyhl2294 bool = l >= 0
	for yyj2294 := 0; ; yyj2294++ {
		if yyhl2294 {
			if yyj2294 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2294Slc = r.DecodeBytes(yys2294Slc, true, true)
		yys2294 := string(yys2294Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2294 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2297 := &x.ListMeta
				yym2298 := z.DecBinary()
				_ = yym2298
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2297) {
				} else {
					z.DecFallback(yyv2297, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2299 := &x.Items
				yym2300 := z.DecBinary()
				_ = yym2300
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2299), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2294)
		} // end switch yys2294
	} // end for yyj2294
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2301 int
	var yyb2301 bool
	var yyhl2301 bool = l >= 0
	yyj2301++
	if yyhl2301 {
		yyb2301 = yyj2301 > l
	} else {
		yyb2301 = r.CheckBreak()
	}
	if yyb2301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2301++
	if yyhl2301 {
		yyb2301 = yyj2301 > l
	} else {
		yyb2301 = r.CheckBreak()
	}
	if yyb2301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2301++
	if yyhl2301 {
		yyb2301 = yyj2301 > l
	} else {
		yyb2301 = r.CheckBreak()
	}
	if yyb2301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2304 := &x.ListMeta
		yym2305 := z.DecBinary()
		_ = yym2305
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2304) {
		} else {
			z.DecFallback(yyv2304, false)
		}
	}
	yyj2301++
	if yyhl2301 {
		yyb2301 = yyj2301 > l
	} else {
		yyb2301 = r.CheckBreak()
	}
	if yyb2301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2306 := &x.Items
		yym2307 := z.DecBinary()
		_ = yym2307
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2306), d)
		}
	}
	for {
		yyj2301++
		if yyhl2301 {
			yyb2301 = yyj2301 > l
		} else {
			yyb2301 = r.CheckBreak()
		}
		if yyb2301 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2301-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2308 := z.EncBinary()
		_ = yym2308
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2309 := !z.EncBinary()
			yy2arr2309 := z.EncBasicHandle().StructToArray
			var yyq2309 [2]bool
			_, _, _ = yysep2309, yyq2309, yy2arr2309
			const yyr2309 bool = false
			yyq2309[0] = true
			yyq2309[1] = true
			var yynn2309 int
			if yyr2309 || yy2arr2309 {
				r.EncodeArrayStart(2)
			} else {
				yynn2309 = 0
				for _, b := range yyq2309 {
					if b {
						yynn2309++
					}
				}
				r.EncodeMapStart(yynn2309)
				yynn2309 = 0
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[0] {
					yy2311 := &x.ObjectMeta
					yy2311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2309[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2312 := &x.ObjectMeta
					yy2312.CodecEncodeSelf(e)
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[1] {
					yy2314 := &x.Spec
					yy2314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2309[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2315 := &x.Spec
					yy2315.CodecEncodeSelf(e)
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2316 := z.DecBinary()
	_ = yym2316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2317 := r.ContainerType()
		if yyct2317 == codecSelferValueTypeMap1234 {
			yyl2317 := r.ReadMapStart()
			if yyl2317 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2317, d)
			}
		} else if yyct2317 == codecSelferValueTypeArray1234 {
			yyl2317 := r.ReadArrayStart()
			if yyl2317 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2318Slc
	var yyhl2318 bool = l >= 0
	for yyj2318 := 0; ; yyj2318++ {
		if yyhl2318 {
			if yyj2318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2318Slc = r.DecodeBytes(yys2318Slc, true, true)
		yys2318 := string(yys2318Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2318 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2319 := &x.ObjectMeta
				yyv2319.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2320 := &x.Spec
				yyv2320.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2318)
		} // end switch yys2318
	} // end for yyj2318
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2321 int
	var yyb2321 bool
	var yyhl2321 bool = l >= 0
	yyj2321++
	if yyhl2321 {
		yyb2321 = yyj2321 > l
	} else {
		yyb2321 = r.CheckBreak()
	}
	if yyb2321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2322 := &x.ObjectMeta
		yyv2322.CodecDecodeSelf(d)
	}
	yyj2321++
	if yyhl2321 {
		yyb2321 = yyj2321 > l
	} else {
		yyb2321 = r.CheckBreak()
	}
	if yyb2321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2323 := &x.Spec
		yyv2323.CodecDecodeSelf(d)
	}
	for {
		yyj2321++
		if yyhl2321 {
			yyb2321 = yyj2321 > l
		} else {
			yyb2321 = r.CheckBreak()
		}
		if yyb2321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2324 := z.EncBinary()
		_ = yym2324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2325 := !z.EncBinary()
			yy2arr2325 := z.EncBasicHandle().StructToArray
			var yyq2325 [4]bool
			_, _, _ = yysep2325, yyq2325, yy2arr2325
			const yyr2325 bool = false
			yyq2325[0] = x.Kind != ""
			yyq2325[1] = x.APIVersion != ""
			yyq2325[2] = true
			yyq2325[3] = true
			var yynn2325 int
			if yyr2325 || yy2arr2325 {
				r.EncodeArrayStart(4)
			} else {
				yynn2325 = 0
				for _, b := range yyq2325 {
					if b {
						yynn2325++
					}
				}
				r.EncodeMapStart(yynn2325)
				yynn2325 = 0
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[0] {
					yym2327 := z.EncBinary()
					_ = yym2327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2325[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2328 := z.EncBinary()
					_ = yym2328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[1] {
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2325[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[2] {
					yy2333 := &x.ObjectMeta
					yy2333.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2325[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2334 := &x.ObjectMeta
					yy2334.CodecEncodeSelf(e)
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[3] {
					yy2336 := &x.Template
					yy2336.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2325[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2337 := &x.Template
					yy2337.CodecEncodeSelf(e)
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2338 := z.DecBinary()
	_ = yym2338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2339 := r.ContainerType()
		if yyct2339 == codecSelferValueTypeMap1234 {
			yyl2339 := r.ReadMapStart()
			if yyl2339 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2339, d)
			}
		} else if yyct2339 == codecSelferValueTypeArray1234 {
			yyl2339 := r.ReadArrayStart()
			if yyl2339 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2340Slc
	var yyhl2340 bool = l >= 0
	for yyj2340 := 0; ; yyj2340++ {
		if yyhl2340 {
			if yyj2340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2340Slc = r.DecodeBytes(yys2340Slc, true, true)
		yys2340 := string(yys2340Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2340 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2343 := &x.ObjectMeta
				yyv2343.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2344 := &x.Template
				yyv2344.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2340)
		} // end switch yys2340
	} // end for yyj2340
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2345 int
	var yyb2345 bool
	var yyhl2345 bool = l >= 0
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2348 := &x.ObjectMeta
		yyv2348.CodecDecodeSelf(d)
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2349 := &x.Template
		yyv2349.CodecDecodeSelf(d)
	}
	for {
		yyj2345++
		if yyhl2345 {
			yyb2345 = yyj2345 > l
		} else {
			yyb2345 = r.CheckBreak()
		}
		if yyb2345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2350 := z.EncBinary()
		_ = yym2350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2351 := !z.EncBinary()
			yy2arr2351 := z.EncBasicHandle().StructToArray
			var yyq2351 [4]bool
			_, _, _ = yysep2351, yyq2351, yy2arr2351
			const yyr2351 bool = false
			yyq2351[0] = x.Kind != ""
			yyq2351[1] = x.APIVersion != ""
			yyq2351[2] = true
			var yynn2351 int
			if yyr2351 || yy2arr2351 {
				r.EncodeArrayStart(4)
			} else {
				yynn2351 = 1
				for _, b := range yyq2351 {
					if b {
						yynn2351++
					}
				}
				r.EncodeMapStart(yynn2351)
				yynn2351 = 0
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[0] {
					yym2353 := z.EncBinary()
					_ = yym2353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[1] {
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[2] {
					yy2359 := &x.ListMeta
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2359) {
					} else {
						z.EncFallback(yy2359)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2361 := &x.ListMeta
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2361) {
					} else {
						z.EncFallback(yy2361)
					}
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2366 := z.DecBinary()
	_ = yym2366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2367 := r.ContainerType()
		if yyct2367 == codecSelferValueTypeMap1234 {
			yyl2367 := r.ReadMapStart()
			if yyl2367 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2367, d)
			}
		} else if yyct2367 == codecSelferValueTypeArray1234 {
			yyl2367 := r.ReadArrayStart()
			if yyl2367 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2368Slc
	var yyhl2368 bool = l >= 0
	for yyj2368 := 0; ; yyj2368++ {
		if yyhl2368 {
			if yyj2368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2368Slc = r.DecodeBytes(yys2368Slc, true, true)
		yys2368 := string(yys2368Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2368 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2371 := &x.ListMeta
				yym2372 := z.DecBinary()
				_ = yym2372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2371) {
				} else {
					z.DecFallback(yyv2371, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2373 := &x.Items
				yym2374 := z.DecBinary()
				_ = yym2374
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2373), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2368)
		} // end switch yys2368
	} // end for yyj2368
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2375 int
	var yyb2375 bool
	var yyhl2375 bool = l >= 0
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2378 := &x.ListMeta
		yym2379 := z.DecBinary()
		_ = yym2379
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2378) {
		} else {
			z.DecFallback(yyv2378, false)
		}
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2380 := &x.Items
		yym2381 := z.DecBinary()
		_ = yym2381
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2380), d)
		}
	}
	for {
		yyj2375++
		if yyhl2375 {
			yyb2375 = yyj2375 > l
		} else {
			yyb2375 = r.CheckBreak()
		}
		if yyb2375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2382 := z.EncBinary()
		_ = yym2382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2383 := !z.EncBinary()
			yy2arr2383 := z.EncBasicHandle().StructToArray
			var yyq2383 [4]bool
			_, _, _ = yysep2383, yyq2383, yy2arr2383
			const yyr2383 bool = false
			yyq2383[0] = x.Replicas != nil
			yyq2383[1] = x.MinReadySeconds != 0
			yyq2383[2] = len(x.Selector) != 0
			yyq2383[3] = x.Template != nil
			var yynn2383 int
			if yyr2383 || yy2arr2383 {
				r.EncodeArrayStart(4)
			} else {
				yynn2383 = 0
				for _, b := range yyq2383 {
					if b {
						yynn2383++
					}
				}
				r.EncodeMapStart(yynn2383)
				yynn2383 = 0
			}
			if yyr2383 || yy2arr2383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2383[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2385 := *x.Replicas
						yym2386 := z.EncBinary()
						_ = yym2386
						if false {
						} else {
							r.EncodeInt(int64(yy2385))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2383[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2387 := *x.Replicas
						yym2388 := z.EncBinary()
						_ = yym2388
						if false {
						} else {
							r.EncodeInt(int64(yy2387))
						}
					}
				}
			}
			if yyr2383 || yy2arr2383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2383[1] {
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2383[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2383 || yy2arr2383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2383[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2393 := z.EncBinary()
						_ = yym2393
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2383[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2394 := z.EncBinary()
						_ = yym2394
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2383 || yy2arr2383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2383[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2383[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2383 || yy2arr2383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2396 := z.DecBinary()
	_ = yym2396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2397 := r.ContainerType()
		if yyct2397 == codecSelferValueTypeMap1234 {
			yyl2397 := r.ReadMapStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2397, d)
			}
		} else if yyct2397 == codecSelferValueTypeArray1234 {
			yyl2397 := r.ReadArrayStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2398Slc
	var yyhl2398 bool = l >= 0
	for yyj2398 := 0; ; yyj2398++ {
		if yyhl2398 {
			if yyj2398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2398Slc = r.DecodeBytes(yys2398Slc, true, true)
		yys2398 := string(yys2398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2398 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2400 := z.DecBinary()
				_ = yym2400
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2402 := &x.Selector
				yym2403 := z.DecBinary()
				_ = yym2403
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2402, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2398)
		} // end switch yys2398
	} // end for yyj2398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2405 int
	var yyb2405 bool
	var yyhl2405 bool = l >= 0
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2407 := z.DecBinary()
		_ = yym2407
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2409 := &x.Selector
		yym2410 := z.DecBinary()
		_ = yym2410
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2409, false, d)
		}
	}
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2405++
		if yyhl2405 {
			yyb2405 = yyj2405 > l
		} else {
			yyb2405 = r.CheckBreak()
		}
		if yyb2405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2412 := z.EncBinary()
		_ = yym2412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2413 := !z.EncBinary()
			yy2arr2413 := z.EncBasicHandle().StructToArray
			var yyq2413 [6]bool
			_, _, _ = yysep2413, yyq2413, yy2arr2413
			const yyr2413 bool = false
			yyq2413[1] = x.FullyLabeledReplicas != 0
			yyq2413[2] = x.ReadyReplicas != 0
			yyq2413[3] = x.AvailableReplicas != 0
			yyq2413[4] = x.ObservedGeneration != 0
			yyq2413[5] = len(x.Conditions) != 0
			var yynn2413 int
			if yyr2413 || yy2arr2413 {
				r.EncodeArrayStart(6)
			} else {
				yynn2413 = 1
				for _, b := range yyq2413 {
					if b {
						yynn2413++
					}
				}
				r.EncodeMapStart(yynn2413)
				yynn2413 = 0
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2415 := z.EncBinary()
				_ = yym2415
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2416 := z.EncBinary()
				_ = yym2416
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[1] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[2] {
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[3] {
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2413[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[4] {
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2413[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2430 := z.EncBinary()
						_ = yym2430
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2431 := z.EncBinary()
						_ = yym2431
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2432 := z.DecBinary()
	_ = yym2432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2433 := r.ContainerType()
		if yyct2433 == codecSelferValueTypeMap1234 {
			yyl2433 := r.ReadMapStart()
			if yyl2433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2433, d)
			}
		} else if yyct2433 == codecSelferValueTypeArray1234 {
			yyl2433 := r.ReadArrayStart()
			if yyl2433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2434Slc
	var yyhl2434 bool = l >= 0
	for yyj2434 := 0; ; yyj2434++ {
		if yyhl2434 {
			if yyj2434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2434Slc = r.DecodeBytes(yys2434Slc, true, true)
		yys2434 := string(yys2434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2434 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2440 := &x.Conditions
				yym2441 := z.DecBinary()
				_ = yym2441
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2440), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2434)
		} // end switch yys2434
	} // end for yyj2434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2442 int
	var yyb2442 bool
	var yyhl2442 bool = l >= 0
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2448 := &x.Conditions
		yym2449 := z.DecBinary()
		_ = yym2449
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2448), d)
		}
	}
	for {
		yyj2442++
		if yyhl2442 {
			yyb2442 = yyj2442 > l
		} else {
			yyb2442 = r.CheckBreak()
		}
		if yyb2442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2450 := z.EncBinary()
	_ = yym2450
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2451 := z.DecBinary()
	_ = yym2451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2452 := z.EncBinary()
		_ = yym2452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2453 := !z.EncBinary()
			yy2arr2453 := z.EncBasicHandle().StructToArray
			var yyq2453 [5]bool
			_, _, _ = yysep2453, yyq2453, yy2arr2453
			const yyr2453 bool = false
			yyq2453[2] = true
			yyq2453[3] = x.Reason != ""
			yyq2453[4] = x.Message != ""
			var yynn2453 int
			if yyr2453 || yy2arr2453 {
				r.EncodeArrayStart(5)
			} else {
				yynn2453 = 2
				for _, b := range yyq2453 {
					if b {
						yynn2453++
					}
				}
				r.EncodeMapStart(yynn2453)
				yynn2453 = 0
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[2] {
					yy2457 := &x.LastTransitionTime
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2457) {
					} else if yym2458 {
						z.EncBinaryMarshal(yy2457)
					} else if !yym2458 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2457)
					} else {
						z.EncFallback(yy2457)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2453[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2459 := &x.LastTransitionTime
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2459) {
					} else if yym2460 {
						z.EncBinaryMarshal(yy2459)
					} else if !yym2460 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2459)
					} else {
						z.EncFallback(yy2459)
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[3] {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2453[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[4] {
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2453[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2467 := z.DecBinary()
	_ = yym2467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2468 := r.ContainerType()
		if yyct2468 == codecSelferValueTypeMap1234 {
			yyl2468 := r.ReadMapStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2468, d)
			}
		} else if yyct2468 == codecSelferValueTypeArray1234 {
			yyl2468 := r.ReadArrayStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2469Slc
	var yyhl2469 bool = l >= 0
	for yyj2469 := 0; ; yyj2469++ {
		if yyhl2469 {
			if yyj2469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2469Slc = r.DecodeBytes(yys2469Slc, true, true)
		yys2469 := string(yys2469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2469 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2472 := &x.LastTransitionTime
				yym2473 := z.DecBinary()
				_ = yym2473
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2472) {
				} else if yym2473 {
					z.DecBinaryUnmarshal(yyv2472)
				} else if !yym2473 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2472)
				} else {
					z.DecFallback(yyv2472, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2469)
		} // end switch yys2469
	} // end for yyj2469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2476 int
	var yyb2476 bool
	var yyhl2476 bool = l >= 0
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2479 := &x.LastTransitionTime
		yym2480 := z.DecBinary()
		_ = yym2480
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2479) {
		} else if yym2480 {
			z.DecBinaryUnmarshal(yyv2479)
		} else if !yym2480 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2479)
		} else {
			z.DecFallback(yyv2479, false)
		}
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2476++
	if yyhl2476 {
		yyb2476 = yyj2476 > l
	} else {
		yyb2476 = r.CheckBreak()
	}
	if yyb2476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2476++
		if yyhl2476 {
			yyb2476 = yyj2476 > l
		} else {
			yyb2476 = r.CheckBreak()
		}
		if yyb2476 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2476-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2483 := z.EncBinary()
		_ = yym2483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2484 := !z.EncBinary()
			yy2arr2484 := z.EncBasicHandle().StructToArray
			var yyq2484 [5]bool
			_, _, _ = yysep2484, yyq2484, yy2arr2484
			const yyr2484 bool = false
			yyq2484[0] = x.Kind != ""
			yyq2484[1] = x.APIVersion != ""
			yyq2484[2] = true
			yyq2484[3] = true
			yyq2484[4] = true
			var yynn2484 int
			if yyr2484 || yy2arr2484 {
				r.EncodeArrayStart(5)
			} else {
				yynn2484 = 0
				for _, b := range yyq2484 {
					if b {
						yynn2484++
					}
				}
				r.EncodeMapStart(yynn2484)
				yynn2484 = 0
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[0] {
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2484[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2487 := z.EncBinary()
					_ = yym2487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[1] {
					yym2489 := z.EncBinary()
					_ = yym2489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2484[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2490 := z.EncBinary()
					_ = yym2490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[2] {
					yy2492 := &x.ObjectMeta
					yy2492.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2484[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2493 := &x.ObjectMeta
					yy2493.CodecEncodeSelf(e)
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[3] {
					yy2495 := &x.Spec
					yy2495.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2484[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2496 := &x.Spec
					yy2496.CodecEncodeSelf(e)
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[4] {
					yy2498 := &x.Status
					yy2498.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2484[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2499 := &x.Status
					yy2499.CodecEncodeSelf(e)
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2500 := z.DecBinary()
	_ = yym2500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2501 := r.ContainerType()
		if yyct2501 == codecSelferValueTypeMap1234 {
			yyl2501 := r.ReadMapStart()
			if yyl2501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2501, d)
			}
		} else if yyct2501 == codecSelferValueTypeArray1234 {
			yyl2501 := r.ReadArrayStart()
			if yyl2501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2502Slc
	var yyhl2502 bool = l >= 0
	for yyj2502 := 0; ; yyj2502++ {
		if yyhl2502 {
			if yyj2502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2502Slc = r.DecodeBytes(yys2502Slc, true, true)
		yys2502 := string(yys2502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2502 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2505 := &x.ObjectMeta
				yyv2505.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2506 := &x.Spec
				yyv2506.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2507 := &x.Status
				yyv2507.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2502)
		} // end switch yys2502
	} // end for yyj2502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2508 int
	var yyb2508 bool
	var yyhl2508 bool = l >= 0
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2511 := &x.ObjectMeta
		yyv2511.CodecDecodeSelf(d)
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2512 := &x.Spec
		yyv2512.CodecDecodeSelf(d)
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2513 := &x.Status
		yyv2513.CodecDecodeSelf(d)
	}
	for {
		yyj2508++
		if yyhl2508 {
			yyb2508 = yyj2508 > l
		} else {
			yyb2508 = r.CheckBreak()
		}
		if yyb2508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2514 := z.EncBinary()
		_ = yym2514
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2515 := !z.EncBinary()
			yy2arr2515 := z.EncBasicHandle().StructToArray
			var yyq2515 [4]bool
			_, _, _ = yysep2515, yyq2515, yy2arr2515
			const yyr2515 bool = false
			yyq2515[0] = x.Kind != ""
			yyq2515[1] = x.APIVersion != ""
			yyq2515[2] = true
			var yynn2515 int
			if yyr2515 || yy2arr2515 {
				r.EncodeArrayStart(4)
			} else {
				yynn2515 = 1
				for _, b := range yyq2515 {
					if b {
						yynn2515++
					}
				}
				r.EncodeMapStart(yynn2515)
				yynn2515 = 0
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[0] {
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2515[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[1] {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2515[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[2] {
					yy2523 := &x.ListMeta
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2523) {
					} else {
						z.EncFallback(yy2523)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2515[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2525 := &x.ListMeta
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2525) {
					} else {
						z.EncFallback(yy2525)
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2530 := z.DecBinary()
	_ = yym2530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2531 := r.ContainerType()
		if yyct2531 == codecSelferValueTypeMap1234 {
			yyl2531 := r.ReadMapStart()
			if yyl2531 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2531, d)
			}
		} else if yyct2531 == codecSelferValueTypeArray1234 {
			yyl2531 := r.ReadArrayStart()
			if yyl2531 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2532Slc
	var yyhl2532 bool = l >= 0
	for yyj2532 := 0; ; yyj2532++ {
		if yyhl2532 {
			if yyj2532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2532Slc = r.DecodeBytes(yys2532Slc, true, true)
		yys2532 := string(yys2532Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2532 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2535 := &x.ListMeta
				yym2536 := z.DecBinary()
				_ = yym2536
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2535) {
				} else {
					z.DecFallback(yyv2535, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2537 := &x.Items
				yym2538 := z.DecBinary()
				_ = yym2538
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2537), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2532)
		} // end switch yys2532
	} // end for yyj2532
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2539 int
	var yyb2539 bool
	var yyhl2539 bool = l >= 0
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2542 := &x.ListMeta
		yym2543 := z.DecBinary()
		_ = yym2543
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2542) {
		} else {
			z.DecFallback(yyv2542, false)
		}
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2544 := &x.Items
		yym2545 := z.DecBinary()
		_ = yym2545
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2544), d)
		}
	}
	for {
		yyj2539++
		if yyhl2539 {
			yyb2539 = yyj2539 > l
		} else {
			yyb2539 = r.CheckBreak()
		}
		if yyb2539 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2539-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2546 := z.EncBinary()
	_ = yym2546
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2547 := z.DecBinary()
	_ = yym2547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2548 := z.EncBinary()
	_ = yym2548
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2549 := z.DecBinary()
	_ = yym2549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2550 := z.EncBinary()
		_ = yym2550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2551 := !z.EncBinary()
			yy2arr2551 := z.EncBasicHandle().StructToArray
			var yyq2551 [1]bool
			_, _, _ = yysep2551, yyq2551, yy2arr2551
			const yyr2551 bool = false
			yyq2551[0] = true
			var yynn2551 int
			if yyr2551 || yy2arr2551 {
				r.EncodeArrayStart(1)
			} else {
				yynn2551 = 0
				for _, b := range yyq2551 {
					if b {
						yynn2551++
					}
				}
				r.EncodeMapStart(yynn2551)
				yynn2551 = 0
			}
			if yyr2551 || yy2arr2551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2551[0] {
					yy2553 := &x.LoadBalancer
					yy2553.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2551[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2554 := &x.LoadBalancer
					yy2554.CodecEncodeSelf(e)
				}
			}
			if yyr2551 || yy2arr2551 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2555 := z.DecBinary()
	_ = yym2555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2556 := r.ContainerType()
		if yyct2556 == codecSelferValueTypeMap1234 {
			yyl2556 := r.ReadMapStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2556, d)
			}
		} else if yyct2556 == codecSelferValueTypeArray1234 {
			yyl2556 := r.ReadArrayStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2556, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2557Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2557Slc
	var yyhl2557 bool = l >= 0
	for yyj2557 := 0; ; yyj2557++ {
		if yyhl2557 {
			if yyj2557 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2557Slc = r.DecodeBytes(yys2557Slc, true, true)
		yys2557 := string(yys2557Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2557 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2558 := &x.LoadBalancer
				yyv2558.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2557)
		} // end switch yys2557
	} // end for yyj2557
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2559 int
	var yyb2559 bool
	var yyhl2559 bool = l >= 0
	yyj2559++
	if yyhl2559 {
		yyb2559 = yyj2559 > l
	} else {
		yyb2559 = r.CheckBreak()
	}
	if yyb2559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2560 := &x.LoadBalancer
		yyv2560.CodecDecodeSelf(d)
	}
	for {
		yyj2559++
		if yyhl2559 {
			yyb2559 = yyj2559 > l
		} else {
			yyb2559 = r.CheckBreak()
		}
		if yyb2559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2561 := z.EncBinary()
		_ = yym2561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2562 := !z.EncBinary()
			yy2arr2562 := z.EncBasicHandle().StructToArray
			var yyq2562 [1]bool
			_, _, _ = yysep2562, yyq2562, yy2arr2562
			const yyr2562 bool = false
			yyq2562[0] = len(x.Ingress) != 0
			var yynn2562 int
			if yyr2562 || yy2arr2562 {
				r.EncodeArrayStart(1)
			} else {
				yynn2562 = 0
				for _, b := range yyq2562 {
					if b {
						yynn2562++
					}
				}
				r.EncodeMapStart(yynn2562)
				yynn2562 = 0
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2562[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2564 := z.EncBinary()
						_ = yym2564
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2565 := z.EncBinary()
						_ = yym2565
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2566 := z.DecBinary()
	_ = yym2566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2567 := r.ContainerType()
		if yyct2567 == codecSelferValueTypeMap1234 {
			yyl2567 := r.ReadMapStart()
			if yyl2567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2567, d)
			}
		} else if yyct2567 == codecSelferValueTypeArray1234 {
			yyl2567 := r.ReadArrayStart()
			if yyl2567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2568Slc
	var yyhl2568 bool = l >= 0
	for yyj2568 := 0; ; yyj2568++ {
		if yyhl2568 {
			if yyj2568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2568Slc = r.DecodeBytes(yys2568Slc, true, true)
		yys2568 := string(yys2568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2568 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2569 := &x.Ingress
				yym2570 := z.DecBinary()
				_ = yym2570
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2569), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2568)
		} // end switch yys2568
	} // end for yyj2568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2571 int
	var yyb2571 bool
	var yyhl2571 bool = l >= 0
	yyj2571++
	if yyhl2571 {
		yyb2571 = yyj2571 > l
	} else {
		yyb2571 = r.CheckBreak()
	}
	if yyb2571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2572 := &x.Ingress
		yym2573 := z.DecBinary()
		_ = yym2573
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2572), d)
		}
	}
	for {
		yyj2571++
		if yyhl2571 {
			yyb2571 = yyj2571 > l
		} else {
			yyb2571 = r.CheckBreak()
		}
		if yyb2571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2574 := z.EncBinary()
		_ = yym2574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2575 := !z.EncBinary()
			yy2arr2575 := z.EncBasicHandle().StructToArray
			var yyq2575 [2]bool
			_, _, _ = yysep2575, yyq2575, yy2arr2575
			const yyr2575 bool = false
			yyq2575[0] = x.IP != ""
			yyq2575[1] = x.Hostname != ""
			var yynn2575 int
			if yyr2575 || yy2arr2575 {
				r.EncodeArrayStart(2)
			} else {
				yynn2575 = 0
				for _, b := range yyq2575 {
					if b {
						yynn2575++
					}
				}
				r.EncodeMapStart(yynn2575)
				yynn2575 = 0
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2575[0] {
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2575[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2575[1] {
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2575[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2575 || yy2arr2575 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2582 := z.DecBinary()
	_ = yym2582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2583 := r.ContainerType()
		if yyct2583 == codecSelferValueTypeMap1234 {
			yyl2583 := r.ReadMapStart()
			if yyl2583 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2583, d)
			}
		} else if yyct2583 == codecSelferValueTypeArray1234 {
			yyl2583 := r.ReadArrayStart()
			if yyl2583 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2584Slc
	var yyhl2584 bool = l >= 0
	for yyj2584 := 0; ; yyj2584++ {
		if yyhl2584 {
			if yyj2584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2584Slc = r.DecodeBytes(yys2584Slc, true, true)
		yys2584 := string(yys2584Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2584 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2584)
		} // end switch yys2584
	} // end for yyj2584
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2587 int
	var yyb2587 bool
	var yyhl2587 bool = l >= 0
	yyj2587++
	if yyhl2587 {
		yyb2587 = yyj2587 > l
	} else {
		yyb2587 = r.CheckBreak()
	}
	if yyb2587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2587++
	if yyhl2587 {
		yyb2587 = yyj2587 > l
	} else {
		yyb2587 = r.CheckBreak()
	}
	if yyb2587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2587++
		if yyhl2587 {
			yyb2587 = yyj2587 > l
		} else {
			yyb2587 = r.CheckBreak()
		}
		if yyb2587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2590 := z.EncBinary()
		_ = yym2590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2591 := !z.EncBinary()
			yy2arr2591 := z.EncBasicHandle().StructToArray
			var yyq2591 [10]bool
			_, _, _ = yysep2591, yyq2591, yy2arr2591
			const yyr2591 bool = false
			yyq2591[1] = len(x.Selector) != 0
			yyq2591[2] = x.ClusterIP != ""
			yyq2591[3] = x.Type != ""
			yyq2591[4] = len(x.ExternalIPs) != 0
			yyq2591[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2591[6] = x.SessionAffinity != ""
			yyq2591[7] = x.LoadBalancerIP != ""
			yyq2591[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2591[9] = x.ExternalName != ""
			var yynn2591 int
			if yyr2591 || yy2arr2591 {
				r.EncodeArrayStart(10)
			} else {
				yynn2591 = 1
				for _, b := range yyq2591 {
					if b {
						yynn2591++
					}
				}
				r.EncodeMapStart(yynn2591)
				yynn2591 = 0
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2596 := z.EncBinary()
						_ = yym2596
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2597 := z.EncBinary()
						_ = yym2597
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[2] {
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2603 := z.EncBinary()
						_ = yym2603
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2604 := z.EncBinary()
						_ = yym2604
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2606 := z.EncBinary()
						_ = yym2606
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2607 := z.EncBinary()
						_ = yym2607
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[7] {
					yym2610 := z.EncBinary()
					_ = yym2610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2613 := z.EncBinary()
						_ = yym2613
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2614 := z.EncBinary()
						_ = yym2614
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[9] {
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2618 := z.DecBinary()
	_ = yym2618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2619 := r.ContainerType()
		if yyct2619 == codecSelferValueTypeMap1234 {
			yyl2619 := r.ReadMapStart()
			if yyl2619 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2619, d)
			}
		} else if yyct2619 == codecSelferValueTypeArray1234 {
			yyl2619 := r.ReadArrayStart()
			if yyl2619 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2619, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2620Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2620Slc
	var yyhl2620 bool = l >= 0
	for yyj2620 := 0; ; yyj2620++ {
		if yyhl2620 {
			if yyj2620 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2620Slc = r.DecodeBytes(yys2620Slc, true, true)
		yys2620 := string(yys2620Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2620 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2621 := &x.Ports
				yym2622 := z.DecBinary()
				_ = yym2622
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2621), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2623 := &x.Selector
				yym2624 := z.DecBinary()
				_ = yym2624
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2623, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2627 := &x.ExternalIPs
				yym2628 := z.DecBinary()
				_ = yym2628
				if false {
				} else {
					z.F.DecSliceStringX(yyv2627, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2629 := &x.DeprecatedPublicIPs
				yym2630 := z.DecBinary()
				_ = yym2630
				if false {
				} else {
					z.F.DecSliceStringX(yyv2629, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2633 := &x.LoadBalancerSourceRanges
				yym2634 := z.DecBinary()
				_ = yym2634
				if false {
				} else {
					z.F.DecSliceStringX(yyv2633, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2620)
		} // end switch yys2620
	} // end for yyj2620
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2636 int
	var yyb2636 bool
	var yyhl2636 bool = l >= 0
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2637 := &x.Ports
		yym2638 := z.DecBinary()
		_ = yym2638
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2637), d)
		}
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2639 := &x.Selector
		yym2640 := z.DecBinary()
		_ = yym2640
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2639, false, d)
		}
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2643 := &x.ExternalIPs
		yym2644 := z.DecBinary()
		_ = yym2644
		if false {
		} else {
			z.F.DecSliceStringX(yyv2643, false, d)
		}
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2645 := &x.DeprecatedPublicIPs
		yym2646 := z.DecBinary()
		_ = yym2646
		if false {
		} else {
			z.F.DecSliceStringX(yyv2645, false, d)
		}
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2649 := &x.LoadBalancerSourceRanges
		yym2650 := z.DecBinary()
		_ = yym2650
		if false {
		} else {
			z.F.DecSliceStringX(yyv2649, false, d)
		}
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2636++
		if yyhl2636 {
			yyb2636 = yyj2636 > l
		} else {
			yyb2636 = r.CheckBreak()
		}
		if yyb2636 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2636-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2652 := z.EncBinary()
		_ = yym2652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2653 := !z.EncBinary()
			yy2arr2653 := z.EncBasicHandle().StructToArray
			var yyq2653 [5]bool
			_, _, _ = yysep2653, yyq2653, yy2arr2653
			const yyr2653 bool = false
			yyq2653[0] = x.Name != ""
			yyq2653[1] = x.Protocol != ""
			yyq2653[3] = true
			yyq2653[4] = x.NodePort != 0
			var yynn2653 int
			if yyr2653 || yy2arr2653 {
				r.EncodeArrayStart(5)
			} else {
				yynn2653 = 1
				for _, b := range yyq2653 {
					if b {
						yynn2653++
					}
				}
				r.EncodeMapStart(yynn2653)
				yynn2653 = 0
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[0] {
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2653[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2659 := z.EncBinary()
				_ = yym2659
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2660 := z.EncBinary()
				_ = yym2660
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[3] {
					yy2662 := &x.TargetPort
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2662) {
					} else if !yym2663 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2662)
					} else {
						z.EncFallback(yy2662)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2653[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2664 := &x.TargetPort
					yym2665 := z.EncBinary()
					_ = yym2665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2664) {
					} else if !yym2665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2664)
					} else {
						z.EncFallback(yy2664)
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2653[4] {
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2653[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2668 := z.EncBinary()
					_ = yym2668
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2653 || yy2arr2653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2669 := z.DecBinary()
	_ = yym2669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2670 := r.ContainerType()
		if yyct2670 == codecSelferValueTypeMap1234 {
			yyl2670 := r.ReadMapStart()
			if yyl2670 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2670, d)
			}
		} else if yyct2670 == codecSelferValueTypeArray1234 {
			yyl2670 := r.ReadArrayStart()
			if yyl2670 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2671Slc
	var yyhl2671 bool = l >= 0
	for yyj2671 := 0; ; yyj2671++ {
		if yyhl2671 {
			if yyj2671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2671Slc = r.DecodeBytes(yys2671Slc, true, true)
		yys2671 := string(yys2671Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2671 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2675 := &x.TargetPort
				yym2676 := z.DecBinary()
				_ = yym2676
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2675) {
				} else if !yym2676 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2675)
				} else {
					z.DecFallback(yyv2675, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2671)
		} // end switch yys2671
	} // end for yyj2671
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2678 int
	var yyb2678 bool
	var yyhl2678 bool = l >= 0
	yyj2678++
	if yyhl2678 {
		yyb2678 = yyj2678 > l
	} else {
		yyb2678 = r.CheckBreak()
	}
	if yyb2678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2678++
	if yyhl2678 {
		yyb2678 = yyj2678 > l
	} else {
		yyb2678 = r.CheckBreak()
	}
	if yyb2678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2678++
	if yyhl2678 {
		yyb2678 = yyj2678 > l
	} else {
		yyb2678 = r.CheckBreak()
	}
	if yyb2678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2678++
	if yyhl2678 {
		yyb2678 = yyj2678 > l
	} else {
		yyb2678 = r.CheckBreak()
	}
	if yyb2678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2682 := &x.TargetPort
		yym2683 := z.DecBinary()
		_ = yym2683
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2682) {
		} else if !yym2683 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2682)
		} else {
			z.DecFallback(yyv2682, false)
		}
	}
	yyj2678++
	if yyhl2678 {
		yyb2678 = yyj2678 > l
	} else {
		yyb2678 = r.CheckBreak()
	}
	if yyb2678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2678++
		if yyhl2678 {
			yyb2678 = yyj2678 > l
		} else {
			yyb2678 = r.CheckBreak()
		}
		if yyb2678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2685 := z.EncBinary()
		_ = yym2685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2686 := !z.EncBinary()
			yy2arr2686 := z.EncBasicHandle().StructToArray
			var yyq2686 [5]bool
			_, _, _ = yysep2686, yyq2686, yy2arr2686
			const yyr2686 bool = false
			yyq2686[0] = x.Kind != ""
			yyq2686[1] = x.APIVersion != ""
			yyq2686[2] = true
			yyq2686[3] = true
			yyq2686[4] = true
			var yynn2686 int
			if yyr2686 || yy2arr2686 {
				r.EncodeArrayStart(5)
			} else {
				yynn2686 = 0
				for _, b := range yyq2686 {
					if b {
						yynn2686++
					}
				}
				r.EncodeMapStart(yynn2686)
				yynn2686 = 0
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[0] {
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2686[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[1] {
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2686[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[2] {
					yy2694 := &x.ObjectMeta
					yy2694.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2686[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2695 := &x.ObjectMeta
					yy2695.CodecEncodeSelf(e)
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[3] {
					yy2697 := &x.Spec
					yy2697.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2686[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2698 := &x.Spec
					yy2698.CodecEncodeSelf(e)
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[4] {
					yy2700 := &x.Status
					yy2700.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2686[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2701 := &x.Status
					yy2701.CodecEncodeSelf(e)
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2702 := z.DecBinary()
	_ = yym2702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2703 := r.ContainerType()
		if yyct2703 == codecSelferValueTypeMap1234 {
			yyl2703 := r.ReadMapStart()
			if yyl2703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2703, d)
			}
		} else if yyct2703 == codecSelferValueTypeArray1234 {
			yyl2703 := r.ReadArrayStart()
			if yyl2703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2704Slc
	var yyhl2704 bool = l >= 0
	for yyj2704 := 0; ; yyj2704++ {
		if yyhl2704 {
			if yyj2704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2704Slc = r.DecodeBytes(yys2704Slc, true, true)
		yys2704 := string(yys2704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2704 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2707 := &x.ObjectMeta
				yyv2707.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2708 := &x.Spec
				yyv2708.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2709 := &x.Status
				yyv2709.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2704)
		} // end switch yys2704
	} // end for yyj2704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2710 int
	var yyb2710 bool
	var yyhl2710 bool = l >= 0
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2713 := &x.ObjectMeta
		yyv2713.CodecDecodeSelf(d)
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2714 := &x.Spec
		yyv2714.CodecDecodeSelf(d)
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2715 := &x.Status
		yyv2715.CodecDecodeSelf(d)
	}
	for {
		yyj2710++
		if yyhl2710 {
			yyb2710 = yyj2710 > l
		} else {
			yyb2710 = r.CheckBreak()
		}
		if yyb2710 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2710-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2716 := z.EncBinary()
		_ = yym2716
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2717 := !z.EncBinary()
			yy2arr2717 := z.EncBasicHandle().StructToArray
			var yyq2717 [4]bool
			_, _, _ = yysep2717, yyq2717, yy2arr2717
			const yyr2717 bool = false
			yyq2717[0] = x.Kind != ""
			yyq2717[1] = x.APIVersion != ""
			yyq2717[2] = true
			var yynn2717 int
			if yyr2717 || yy2arr2717 {
				r.EncodeArrayStart(4)
			} else {
				yynn2717 = 1
				for _, b := range yyq2717 {
					if b {
						yynn2717++
					}
				}
				r.EncodeMapStart(yynn2717)
				yynn2717 = 0
			}
			if yyr2717 || yy2arr2717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2717[0] {
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2717[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2717 || yy2arr2717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2717[1] {
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2717[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2717 || yy2arr2717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2717[2] {
					yy2725 := &x.ListMeta
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2725) {
					} else {
						z.EncFallback(yy2725)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2717[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2727 := &x.ListMeta
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2727) {
					} else {
						z.EncFallback(yy2727)
					}
				}
			}
			if yyr2717 || yy2arr2717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2717 || yy2arr2717 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2732 := z.DecBinary()
	_ = yym2732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2733 := r.ContainerType()
		if yyct2733 == codecSelferValueTypeMap1234 {
			yyl2733 := r.ReadMapStart()
			if yyl2733 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2733, d)
			}
		} else if yyct2733 == codecSelferValueTypeArray1234 {
			yyl2733 := r.ReadArrayStart()
			if yyl2733 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2734Slc
	var yyhl2734 bool = l >= 0
	for yyj2734 := 0; ; yyj2734++ {
		if yyhl2734 {
			if yyj2734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2734Slc = r.DecodeBytes(yys2734Slc, true, true)
		yys2734 := string(yys2734Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2734 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2737 := &x.ListMeta
				yym2738 := z.DecBinary()
				_ = yym2738
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2737) {
				} else {
					z.DecFallback(yyv2737, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2739 := &x.Items
				yym2740 := z.DecBinary()
				_ = yym2740
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2739), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2734)
		} // end switch yys2734
	} // end for yyj2734
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2741 int
	var yyb2741 bool
	var yyhl2741 bool = l >= 0
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2744 := &x.ListMeta
		yym2745 := z.DecBinary()
		_ = yym2745
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2744) {
		} else {
			z.DecFallback(yyv2744, false)
		}
	}
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2746 := &x.Items
		yym2747 := z.DecBinary()
		_ = yym2747
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2746), d)
		}
	}
	for {
		yyj2741++
		if yyhl2741 {
			yyb2741 = yyj2741 > l
		} else {
			yyb2741 = r.CheckBreak()
		}
		if yyb2741 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2741-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2748 := z.EncBinary()
		_ = yym2748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2749 := !z.EncBinary()
			yy2arr2749 := z.EncBasicHandle().StructToArray
			var yyq2749 [5]bool
			_, _, _ = yysep2749, yyq2749, yy2arr2749
			const yyr2749 bool = false
			yyq2749[0] = x.Kind != ""
			yyq2749[1] = x.APIVersion != ""
			yyq2749[2] = true
			yyq2749[3] = len(x.Secrets) != 0
			yyq2749[4] = len(x.ImagePullSecrets) != 0
			var yynn2749 int
			if yyr2749 || yy2arr2749 {
				r.EncodeArrayStart(5)
			} else {
				yynn2749 = 0
				for _, b := range yyq2749 {
					if b {
						yynn2749++
					}
				}
				r.EncodeMapStart(yynn2749)
				yynn2749 = 0
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[0] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2749[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[1] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2749[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[2] {
					yy2757 := &x.ObjectMeta
					yy2757.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2749[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2758 := &x.ObjectMeta
					yy2758.CodecEncodeSelf(e)
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2760 := z.EncBinary()
						_ = yym2760
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2749[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2761 := z.EncBinary()
						_ = yym2761
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2763 := z.EncBinary()
						_ = yym2763
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2749[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2764 := z.EncBinary()
						_ = yym2764
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2765 := z.DecBinary()
	_ = yym2765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2766 := r.ContainerType()
		if yyct2766 == codecSelferValueTypeMap1234 {
			yyl2766 := r.ReadMapStart()
			if yyl2766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2766, d)
			}
		} else if yyct2766 == codecSelferValueTypeArray1234 {
			yyl2766 := r.ReadArrayStart()
			if yyl2766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2767Slc
	var yyhl2767 bool = l >= 0
	for yyj2767 := 0; ; yyj2767++ {
		if yyhl2767 {
			if yyj2767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2767Slc = r.DecodeBytes(yys2767Slc, true, true)
		yys2767 := string(yys2767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2767 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2770 := &x.ObjectMeta
				yyv2770.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2771 := &x.Secrets
				yym2772 := z.DecBinary()
				_ = yym2772
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2771), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2773 := &x.ImagePullSecrets
				yym2774 := z.DecBinary()
				_ = yym2774
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2773), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2767)
		} // end switch yys2767
	} // end for yyj2767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2775 int
	var yyb2775 bool
	var yyhl2775 bool = l >= 0
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2778 := &x.ObjectMeta
		yyv2778.CodecDecodeSelf(d)
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2779 := &x.Secrets
		yym2780 := z.DecBinary()
		_ = yym2780
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2779), d)
		}
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2781 := &x.ImagePullSecrets
		yym2782 := z.DecBinary()
		_ = yym2782
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2781), d)
		}
	}
	for {
		yyj2775++
		if yyhl2775 {
			yyb2775 = yyj2775 > l
		} else {
			yyb2775 = r.CheckBreak()
		}
		if yyb2775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2783 := z.EncBinary()
		_ = yym2783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2784 := !z.EncBinary()
			yy2arr2784 := z.EncBasicHandle().StructToArray
			var yyq2784 [4]bool
			_, _, _ = yysep2784, yyq2784, yy2arr2784
			const yyr2784 bool = false
			yyq2784[0] = x.Kind != ""
			yyq2784[1] = x.APIVersion != ""
			yyq2784[2] = true
			var yynn2784 int
			if yyr2784 || yy2arr2784 {
				r.EncodeArrayStart(4)
			} else {
				yynn2784 = 1
				for _, b := range yyq2784 {
					if b {
						yynn2784++
					}
				}
				r.EncodeMapStart(yynn2784)
				yynn2784 = 0
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[0] {
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[1] {
					yym2789 := z.EncBinary()
					_ = yym2789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2784[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[2] {
					yy2792 := &x.ListMeta
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2792) {
					} else {
						z.EncFallback(yy2792)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2784[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2794 := &x.ListMeta
					yym2795 := z.EncBinary()
					_ = yym2795
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2794) {
					} else {
						z.EncFallback(yy2794)
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2799 := z.DecBinary()
	_ = yym2799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2800 := r.ContainerType()
		if yyct2800 == codecSelferValueTypeMap1234 {
			yyl2800 := r.ReadMapStart()
			if yyl2800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2800, d)
			}
		} else if yyct2800 == codecSelferValueTypeArray1234 {
			yyl2800 := r.ReadArrayStart()
			if yyl2800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2801Slc
	var yyhl2801 bool = l >= 0
	for yyj2801 := 0; ; yyj2801++ {
		if yyhl2801 {
			if yyj2801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2801Slc = r.DecodeBytes(yys2801Slc, true, true)
		yys2801 := string(yys2801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2801 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2804 := &x.ListMeta
				yym2805 := z.DecBinary()
				_ = yym2805
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2804) {
				} else {
					z.DecFallback(yyv2804, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2806 := &x.Items
				yym2807 := z.DecBinary()
				_ = yym2807
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2806), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2801)
		} // end switch yys2801
	} // end for yyj2801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2808 int
	var yyb2808 bool
	var yyhl2808 bool = l >= 0
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2811 := &x.ListMeta
		yym2812 := z.DecBinary()
		_ = yym2812
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2811) {
		} else {
			z.DecFallback(yyv2811, false)
		}
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2813 := &x.Items
		yym2814 := z.DecBinary()
		_ = yym2814
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2813), d)
		}
	}
	for {
		yyj2808++
		if yyhl2808 {
			yyb2808 = yyj2808 > l
		} else {
			yyb2808 = r.CheckBreak()
		}
		if yyb2808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2815 := z.EncBinary()
		_ = yym2815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2816 := !z.EncBinary()
			yy2arr2816 := z.EncBasicHandle().StructToArray
			var yyq2816 [4]bool
			_, _, _ = yysep2816, yyq2816, yy2arr2816
			const yyr2816 bool = false
			yyq2816[0] = x.Kind != ""
			yyq2816[1] = x.APIVersion != ""
			yyq2816[2] = true
			var yynn2816 int
			if yyr2816 || yy2arr2816 {
				r.EncodeArrayStart(4)
			} else {
				yynn2816 = 1
				for _, b := range yyq2816 {
					if b {
						yynn2816++
					}
				}
				r.EncodeMapStart(yynn2816)
				yynn2816 = 0
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2816[0] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2816[1] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2816[2] {
					yy2824 := &x.ObjectMeta
					yy2824.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2816[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2825 := &x.ObjectMeta
					yy2825.CodecEncodeSelf(e)
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2829 := z.DecBinary()
	_ = yym2829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2830 := r.ContainerType()
		if yyct2830 == codecSelferValueTypeMap1234 {
			yyl2830 := r.ReadMapStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2830, d)
			}
		} else if yyct2830 == codecSelferValueTypeArray1234 {
			yyl2830 := r.ReadArrayStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2831Slc
	var yyhl2831 bool = l >= 0
	for yyj2831 := 0; ; yyj2831++ {
		if yyhl2831 {
			if yyj2831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2831Slc = r.DecodeBytes(yys2831Slc, true, true)
		yys2831 := string(yys2831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2831 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2834 := &x.ObjectMeta
				yyv2834.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2835 := &x.Subsets
				yym2836 := z.DecBinary()
				_ = yym2836
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2835), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2831)
		} // end switch yys2831
	} // end for yyj2831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2837 int
	var yyb2837 bool
	var yyhl2837 bool = l >= 0
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2840 := &x.ObjectMeta
		yyv2840.CodecDecodeSelf(d)
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2841 := &x.Subsets
		yym2842 := z.DecBinary()
		_ = yym2842
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2841), d)
		}
	}
	for {
		yyj2837++
		if yyhl2837 {
			yyb2837 = yyj2837 > l
		} else {
			yyb2837 = r.CheckBreak()
		}
		if yyb2837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2843 := z.EncBinary()
		_ = yym2843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2844 := !z.EncBinary()
			yy2arr2844 := z.EncBasicHandle().StructToArray
			var yyq2844 [3]bool
			_, _, _ = yysep2844, yyq2844, yy2arr2844
			const yyr2844 bool = false
			yyq2844[0] = len(x.Addresses) != 0
			yyq2844[1] = len(x.NotReadyAddresses) != 0
			yyq2844[2] = len(x.Ports) != 0
			var yynn2844 int
			if yyr2844 || yy2arr2844 {
				r.EncodeArrayStart(3)
			} else {
				yynn2844 = 0
				for _, b := range yyq2844 {
					if b {
						yynn2844++
					}
				}
				r.EncodeMapStart(yynn2844)
				yynn2844 = 0
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2846 := z.EncBinary()
						_ = yym2846
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2847 := z.EncBinary()
						_ = yym2847
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2849 := z.EncBinary()
						_ = yym2849
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2850 := z.EncBinary()
						_ = yym2850
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2852 := z.EncBinary()
						_ = yym2852
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2853 := z.EncBinary()
						_ = yym2853
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2854 := z.DecBinary()
	_ = yym2854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2855 := r.ContainerType()
		if yyct2855 == codecSelferValueTypeMap1234 {
			yyl2855 := r.ReadMapStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2855, d)
			}
		} else if yyct2855 == codecSelferValueTypeArray1234 {
			yyl2855 := r.ReadArrayStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2856Slc
	var yyhl2856 bool = l >= 0
	for yyj2856 := 0; ; yyj2856++ {
		if yyhl2856 {
			if yyj2856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2856Slc = r.DecodeBytes(yys2856Slc, true, true)
		yys2856 := string(yys2856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2856 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2857 := &x.Addresses
				yym2858 := z.DecBinary()
				_ = yym2858
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2857), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2859 := &x.NotReadyAddresses
				yym2860 := z.DecBinary()
				_ = yym2860
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2859), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2861 := &x.Ports
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2861), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2856)
		} // end switch yys2856
	} // end for yyj2856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2864 := &x.Addresses
		yym2865 := z.DecBinary()
		_ = yym2865
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2864), d)
		}
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2866 := &x.NotReadyAddresses
		yym2867 := z.DecBinary()
		_ = yym2867
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2866), d)
		}
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2868 := &x.Ports
		yym2869 := z.DecBinary()
		_ = yym2869
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2868), d)
		}
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2870 := z.EncBinary()
		_ = yym2870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2871 := !z.EncBinary()
			yy2arr2871 := z.EncBasicHandle().StructToArray
			var yyq2871 [4]bool
			_, _, _ = yysep2871, yyq2871, yy2arr2871
			const yyr2871 bool = false
			yyq2871[1] = x.Hostname != ""
			yyq2871[2] = x.NodeName != nil
			yyq2871[3] = x.TargetRef != nil
			var yynn2871 int
			if yyr2871 || yy2arr2871 {
				r.EncodeArrayStart(4)
			} else {
				yynn2871 = 1
				for _, b := range yyq2871 {
					if b {
						yynn2871++
					}
				}
				r.EncodeMapStart(yynn2871)
				yynn2871 = 0
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2873 := z.EncBinary()
				_ = yym2873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2874 := z.EncBinary()
				_ = yym2874
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[1] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2879 := *x.NodeName
						yym2880 := z.EncBinary()
						_ = yym2880
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2879))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2881 := *x.NodeName
						yym2882 := z.EncBinary()
						_ = yym2882
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2881))
						}
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2871[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2885 := r.ContainerType()
		if yyct2885 == codecSelferValueTypeMap1234 {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if yyct2885 == codecSelferValueTypeArray1234 {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2886 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2890 := z.DecBinary()
				_ = yym2890
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2892 int
	var yyb2892 bool
	var yyhl2892 bool = l >= 0
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2896 := z.DecBinary()
		_ = yym2896
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2892++
		if yyhl2892 {
			yyb2892 = yyj2892 > l
		} else {
			yyb2892 = r.CheckBreak()
		}
		if yyb2892 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2892-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2898 := z.EncBinary()
		_ = yym2898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2899 := !z.EncBinary()
			yy2arr2899 := z.EncBasicHandle().StructToArray
			var yyq2899 [3]bool
			_, _, _ = yysep2899, yyq2899, yy2arr2899
			const yyr2899 bool = false
			yyq2899[0] = x.Name != ""
			yyq2899[2] = x.Protocol != ""
			var yynn2899 int
			if yyr2899 || yy2arr2899 {
				r.EncodeArrayStart(3)
			} else {
				yynn2899 = 1
				for _, b := range yyq2899 {
					if b {
						yynn2899++
					}
				}
				r.EncodeMapStart(yynn2899)
				yynn2899 = 0
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2899[0] {
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2904 := z.EncBinary()
				_ = yym2904
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2905 := z.EncBinary()
				_ = yym2905
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2899[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2899[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2907 := z.DecBinary()
	_ = yym2907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2908 := r.ContainerType()
		if yyct2908 == codecSelferValueTypeMap1234 {
			yyl2908 := r.ReadMapStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2908, d)
			}
		} else if yyct2908 == codecSelferValueTypeArray1234 {
			yyl2908 := r.ReadArrayStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2909Slc
	var yyhl2909 bool = l >= 0
	for yyj2909 := 0; ; yyj2909++ {
		if yyhl2909 {
			if yyj2909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2909Slc = r.DecodeBytes(yys2909Slc, true, true)
		yys2909 := string(yys2909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2909 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2909)
		} // end switch yys2909
	} // end for yyj2909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2913 int
	var yyb2913 bool
	var yyhl2913 bool = l >= 0
	yyj2913++
	if yyhl2913 {
		yyb2913 = yyj2913 > l
	} else {
		yyb2913 = r.CheckBreak()
	}
	if yyb2913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2913++
	if yyhl2913 {
		yyb2913 = yyj2913 > l
	} else {
		yyb2913 = r.CheckBreak()
	}
	if yyb2913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2913++
	if yyhl2913 {
		yyb2913 = yyj2913 > l
	} else {
		yyb2913 = r.CheckBreak()
	}
	if yyb2913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2913++
		if yyhl2913 {
			yyb2913 = yyj2913 > l
		} else {
			yyb2913 = r.CheckBreak()
		}
		if yyb2913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2917 := z.EncBinary()
		_ = yym2917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2918 := !z.EncBinary()
			yy2arr2918 := z.EncBasicHandle().StructToArray
			var yyq2918 [4]bool
			_, _, _ = yysep2918, yyq2918, yy2arr2918
			const yyr2918 bool = false
			yyq2918[0] = x.Kind != ""
			yyq2918[1] = x.APIVersion != ""
			yyq2918[2] = true
			var yynn2918 int
			if yyr2918 || yy2arr2918 {
				r.EncodeArrayStart(4)
			} else {
				yynn2918 = 1
				for _, b := range yyq2918 {
					if b {
						yynn2918++
					}
				}
				r.EncodeMapStart(yynn2918)
				yynn2918 = 0
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[0] {
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[1] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[2] {
					yy2926 := &x.ListMeta
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2926) {
					} else {
						z.EncFallback(yy2926)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2918[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2928 := &x.ListMeta
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2928) {
					} else {
						z.EncFallback(yy2928)
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2933 := z.DecBinary()
	_ = yym2933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2934 := r.ContainerType()
		if yyct2934 == codecSelferValueTypeMap1234 {
			yyl2934 := r.ReadMapStart()
			if yyl2934 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2934, d)
			}
		} else if yyct2934 == codecSelferValueTypeArray1234 {
			yyl2934 := r.ReadArrayStart()
			if yyl2934 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2935Slc
	var yyhl2935 bool = l >= 0
	for yyj2935 := 0; ; yyj2935++ {
		if yyhl2935 {
			if yyj2935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2935Slc = r.DecodeBytes(yys2935Slc, true, true)
		yys2935 := string(yys2935Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2935 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2938 := &x.ListMeta
				yym2939 := z.DecBinary()
				_ = yym2939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2938) {
				} else {
					z.DecFallback(yyv2938, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2940 := &x.Items
				yym2941 := z.DecBinary()
				_ = yym2941
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2935)
		} // end switch yys2935
	} // end for yyj2935
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2942 int
	var yyb2942 bool
	var yyhl2942 bool = l >= 0
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2945 := &x.ListMeta
		yym2946 := z.DecBinary()
		_ = yym2946
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2945) {
		} else {
			z.DecFallback(yyv2945, false)
		}
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2947 := &x.Items
		yym2948 := z.DecBinary()
		_ = yym2948
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2947), d)
		}
	}
	for {
		yyj2942++
		if yyhl2942 {
			yyb2942 = yyj2942 > l
		} else {
			yyb2942 = r.CheckBreak()
		}
		if yyb2942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2949 := z.EncBinary()
		_ = yym2949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2950 := !z.EncBinary()
			yy2arr2950 := z.EncBasicHandle().StructToArray
			var yyq2950 [4]bool
			_, _, _ = yysep2950, yyq2950, yy2arr2950
			const yyr2950 bool = false
			yyq2950[0] = x.PodCIDR != ""
			yyq2950[1] = x.ExternalID != ""
			yyq2950[2] = x.ProviderID != ""
			yyq2950[3] = x.Unschedulable != false
			var yynn2950 int
			if yyr2950 || yy2arr2950 {
				r.EncodeArrayStart(4)
			} else {
				yynn2950 = 0
				for _, b := range yyq2950 {
					if b {
						yynn2950++
					}
				}
				r.EncodeMapStart(yynn2950)
				yynn2950 = 0
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[0] {
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[1] {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[2] {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[3] {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2950[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2963 := z.DecBinary()
	_ = yym2963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2964 := r.ContainerType()
		if yyct2964 == codecSelferValueTypeMap1234 {
			yyl2964 := r.ReadMapStart()
			if yyl2964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2964, d)
			}
		} else if yyct2964 == codecSelferValueTypeArray1234 {
			yyl2964 := r.ReadArrayStart()
			if yyl2964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2965Slc
	var yyhl2965 bool = l >= 0
	for yyj2965 := 0; ; yyj2965++ {
		if yyhl2965 {
			if yyj2965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2965Slc = r.DecodeBytes(yys2965Slc, true, true)
		yys2965 := string(yys2965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2965 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2965)
		} // end switch yys2965
	} // end for yyj2965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2970 int
	var yyb2970 bool
	var yyhl2970 bool = l >= 0
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2970++
		if yyhl2970 {
			yyb2970 = yyj2970 > l
		} else {
			yyb2970 = r.CheckBreak()
		}
		if yyb2970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2975 := z.EncBinary()
		_ = yym2975
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2976 := !z.EncBinary()
			yy2arr2976 := z.EncBasicHandle().StructToArray
			var yyq2976 [1]bool
			_, _, _ = yysep2976, yyq2976, yy2arr2976
			const yyr2976 bool = false
			var yynn2976 int
			if yyr2976 || yy2arr2976 {
				r.EncodeArrayStart(1)
			} else {
				yynn2976 = 1
				for _, b := range yyq2976 {
					if b {
						yynn2976++
					}
				}
				r.EncodeMapStart(yynn2976)
				yynn2976 = 0
			}
			if yyr2976 || yy2arr2976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2978 := z.EncBinary()
				_ = yym2978
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2979 := z.EncBinary()
				_ = yym2979
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2976 || yy2arr2976 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2980 := z.DecBinary()
	_ = yym2980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2981 := r.ContainerType()
		if yyct2981 == codecSelferValueTypeMap1234 {
			yyl2981 := r.ReadMapStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2981, d)
			}
		} else if yyct2981 == codecSelferValueTypeArray1234 {
			yyl2981 := r.ReadArrayStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2982Slc
	var yyhl2982 bool = l >= 0
	for yyj2982 := 0; ; yyj2982++ {
		if yyhl2982 {
			if yyj2982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2982Slc = r.DecodeBytes(yys2982Slc, true, true)
		yys2982 := string(yys2982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2982 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2982)
		} // end switch yys2982
	} // end for yyj2982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2984 int
	var yyb2984 bool
	var yyhl2984 bool = l >= 0
	yyj2984++
	if yyhl2984 {
		yyb2984 = yyj2984 > l
	} else {
		yyb2984 = r.CheckBreak()
	}
	if yyb2984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2984++
		if yyhl2984 {
			yyb2984 = yyj2984 > l
		} else {
			yyb2984 = r.CheckBreak()
		}
		if yyb2984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2986 := z.EncBinary()
		_ = yym2986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2987 := !z.EncBinary()
			yy2arr2987 := z.EncBasicHandle().StructToArray
			var yyq2987 [1]bool
			_, _, _ = yysep2987, yyq2987, yy2arr2987
			const yyr2987 bool = false
			yyq2987[0] = true
			var yynn2987 int
			if yyr2987 || yy2arr2987 {
				r.EncodeArrayStart(1)
			} else {
				yynn2987 = 0
				for _, b := range yyq2987 {
					if b {
						yynn2987++
					}
				}
				r.EncodeMapStart(yynn2987)
				yynn2987 = 0
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[0] {
					yy2989 := &x.KubeletEndpoint
					yy2989.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2987[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2990 := &x.KubeletEndpoint
					yy2990.CodecEncodeSelf(e)
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2991 := z.DecBinary()
	_ = yym2991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2992 := r.ContainerType()
		if yyct2992 == codecSelferValueTypeMap1234 {
			yyl2992 := r.ReadMapStart()
			if yyl2992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2992, d)
			}
		} else if yyct2992 == codecSelferValueTypeArray1234 {
			yyl2992 := r.ReadArrayStart()
			if yyl2992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2993Slc
	var yyhl2993 bool = l >= 0
	for yyj2993 := 0; ; yyj2993++ {
		if yyhl2993 {
			if yyj2993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2993Slc = r.DecodeBytes(yys2993Slc, true, true)
		yys2993 := string(yys2993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2993 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2994 := &x.KubeletEndpoint
				yyv2994.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2993)
		} // end switch yys2993
	} // end for yyj2993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2995 int
	var yyb2995 bool
	var yyhl2995 bool = l >= 0
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2996 := &x.KubeletEndpoint
		yyv2996.CodecDecodeSelf(d)
	}
	for {
		yyj2995++
		if yyhl2995 {
			yyb2995 = yyj2995 > l
		} else {
			yyb2995 = r.CheckBreak()
		}
		if yyb2995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2997 := z.EncBinary()
		_ = yym2997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2998 := !z.EncBinary()
			yy2arr2998 := z.EncBasicHandle().StructToArray
			var yyq2998 [10]bool
			_, _, _ = yysep2998, yyq2998, yy2arr2998
			const yyr2998 bool = false
			var yynn2998 int
			if yyr2998 || yy2arr2998 {
				r.EncodeArrayStart(10)
			} else {
				yynn2998 = 10
				for _, b := range yyq2998 {
					if b {
						yynn2998++
					}
				}
				r.EncodeMapStart(yynn2998)
				yynn2998 = 0
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3000 := z.EncBinary()
				_ = yym3000
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3001 := z.EncBinary()
				_ = yym3001
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3003 := z.EncBinary()
				_ = yym3003
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3004 := z.EncBinary()
				_ = yym3004
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3006 := z.EncBinary()
				_ = yym3006
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3007 := z.EncBinary()
				_ = yym3007
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3009 := z.EncBinary()
				_ = yym3009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3010 := z.EncBinary()
				_ = yym3010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3012 := z.EncBinary()
				_ = yym3012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3015 := z.EncBinary()
				_ = yym3015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3016 := z.EncBinary()
				_ = yym3016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3018 := z.EncBinary()
				_ = yym3018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3019 := z.EncBinary()
				_ = yym3019
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3021 := z.EncBinary()
				_ = yym3021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3022 := z.EncBinary()
				_ = yym3022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3024 := z.EncBinary()
				_ = yym3024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3027 := z.EncBinary()
				_ = yym3027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3029 := z.DecBinary()
	_ = yym3029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3030 := r.ContainerType()
		if yyct3030 == codecSelferValueTypeMap1234 {
			yyl3030 := r.ReadMapStart()
			if yyl3030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3030, d)
			}
		} else if yyct3030 == codecSelferValueTypeArray1234 {
			yyl3030 := r.ReadArrayStart()
			if yyl3030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3031Slc
	var yyhl3031 bool = l >= 0
	for yyj3031 := 0; ; yyj3031++ {
		if yyhl3031 {
			if yyj3031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3031Slc = r.DecodeBytes(yys3031Slc, true, true)
		yys3031 := string(yys3031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3031 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3031)
		} // end switch yys3031
	} // end for yyj3031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3042 int
	var yyb3042 bool
	var yyhl3042 bool = l >= 0
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3042++
		if yyhl3042 {
			yyb3042 = yyj3042 > l
		} else {
			yyb3042 = r.CheckBreak()
		}
		if yyb3042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3053 := z.EncBinary()
		_ = yym3053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3054 := !z.EncBinary()
			yy2arr3054 := z.EncBasicHandle().StructToArray
			var yyq3054 [10]bool
			_, _, _ = yysep3054, yyq3054, yy2arr3054
			const yyr3054 bool = false
			yyq3054[0] = len(x.Capacity) != 0
			yyq3054[1] = len(x.Allocatable) != 0
			yyq3054[2] = x.Phase != ""
			yyq3054[3] = len(x.Conditions) != 0
			yyq3054[4] = len(x.Addresses) != 0
			yyq3054[5] = true
			yyq3054[6] = true
			yyq3054[7] = len(x.Images) != 0
			yyq3054[8] = len(x.VolumesInUse) != 0
			yyq3054[9] = len(x.VolumesAttached) != 0
			var yynn3054 int
			if yyr3054 || yy2arr3054 {
				r.EncodeArrayStart(10)
			} else {
				yynn3054 = 0
				for _, b := range yyq3054 {
					if b {
						yynn3054++
					}
				}
				r.EncodeMapStart(yynn3054)
				yynn3054 = 0
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3054[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3059 := z.EncBinary()
						_ = yym3059
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3060 := z.EncBinary()
						_ = yym3060
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3062 := z.EncBinary()
						_ = yym3062
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3063 := z.EncBinary()
						_ = yym3063
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[5] {
					yy3065 := &x.DaemonEndpoints
					yy3065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3066 := &x.DaemonEndpoints
					yy3066.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[6] {
					yy3068 := &x.NodeInfo
					yy3068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3069 := &x.NodeInfo
					yy3069.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3071 := z.EncBinary()
						_ = yym3071
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3072 := z.EncBinary()
						_ = yym3072
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3074 := z.EncBinary()
						_ = yym3074
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3075 := z.EncBinary()
						_ = yym3075
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3077 := z.EncBinary()
						_ = yym3077
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3078 := z.EncBinary()
						_ = yym3078
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3079 := z.DecBinary()
	_ = yym3079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3080 := r.ContainerType()
		if yyct3080 == codecSelferValueTypeMap1234 {
			yyl3080 := r.ReadMapStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3080, d)
			}
		} else if yyct3080 == codecSelferValueTypeArray1234 {
			yyl3080 := r.ReadArrayStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3081Slc
	var yyhl3081 bool = l >= 0
	for yyj3081 := 0; ; yyj3081++ {
		if yyhl3081 {
			if yyj3081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3081Slc = r.DecodeBytes(yys3081Slc, true, true)
		yys3081 := string(yys3081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3081 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3082 := &x.Capacity
				yyv3082.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3083 := &x.Allocatable
				yyv3083.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3085 := &x.Conditions
				yym3086 := z.DecBinary()
				_ = yym3086
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3085), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3087 := &x.Addresses
				yym3088 := z.DecBinary()
				_ = yym3088
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3087), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3089 := &x.DaemonEndpoints
				yyv3089.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3090 := &x.NodeInfo
				yyv3090.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3091 := &x.Images
				yym3092 := z.DecBinary()
				_ = yym3092
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3091), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3093 := &x.VolumesInUse
				yym3094 := z.DecBinary()
				_ = yym3094
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3093), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3095 := &x.VolumesAttached
				yym3096 := z.DecBinary()
				_ = yym3096
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3095), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3081)
		} // end switch yys3081
	} // end for yyj3081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3097 int
	var yyb3097 bool
	var yyhl3097 bool = l >= 0
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3098 := &x.Capacity
		yyv3098.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3099 := &x.Allocatable
		yyv3099.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3101 := &x.Conditions
		yym3102 := z.DecBinary()
		_ = yym3102
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3101), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3103 := &x.Addresses
		yym3104 := z.DecBinary()
		_ = yym3104
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3103), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3105 := &x.DaemonEndpoints
		yyv3105.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3106 := &x.NodeInfo
		yyv3106.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3107 := &x.Images
		yym3108 := z.DecBinary()
		_ = yym3108
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3107), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3109 := &x.VolumesInUse
		yym3110 := z.DecBinary()
		_ = yym3110
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3109), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3111 := &x.VolumesAttached
		yym3112 := z.DecBinary()
		_ = yym3112
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3111), d)
		}
	}
	for {
		yyj3097++
		if yyhl3097 {
			yyb3097 = yyj3097 > l
		} else {
			yyb3097 = r.CheckBreak()
		}
		if yyb3097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3113 := z.EncBinary()
	_ = yym3113
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3114 := z.DecBinary()
	_ = yym3114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3115 := z.EncBinary()
		_ = yym3115
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3116 := !z.EncBinary()
			yy2arr3116 := z.EncBasicHandle().StructToArray
			var yyq3116 [2]bool
			_, _, _ = yysep3116, yyq3116, yy2arr3116
			const yyr3116 bool = false
			var yynn3116 int
			if yyr3116 || yy2arr3116 {
				r.EncodeArrayStart(2)
			} else {
				yynn3116 = 2
				for _, b := range yyq3116 {
					if b {
						yynn3116++
					}
				}
				r.EncodeMapStart(yynn3116)
				yynn3116 = 0
			}
			if yyr3116 || yy2arr3116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3116 || yy2arr3116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3119 := z.EncBinary()
				_ = yym3119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3120 := z.EncBinary()
				_ = yym3120
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3116 || yy2arr3116 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3121 := z.DecBinary()
	_ = yym3121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3122 := r.ContainerType()
		if yyct3122 == codecSelferValueTypeMap1234 {
			yyl3122 := r.ReadMapStart()
			if yyl3122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3122, d)
			}
		} else if yyct3122 == codecSelferValueTypeArray1234 {
			yyl3122 := r.ReadArrayStart()
			if yyl3122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3123Slc
	var yyhl3123 bool = l >= 0
	for yyj3123 := 0; ; yyj3123++ {
		if yyhl3123 {
			if yyj3123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3123Slc = r.DecodeBytes(yys3123Slc, true, true)
		yys3123 := string(yys3123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3123 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3123)
		} // end switch yys3123
	} // end for yyj3123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3126 int
	var yyb3126 bool
	var yyhl3126 bool = l >= 0
	yyj3126++
	if yyhl3126 {
		yyb3126 = yyj3126 > l
	} else {
		yyb3126 = r.CheckBreak()
	}
	if yyb3126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3126++
	if yyhl3126 {
		yyb3126 = yyj3126 > l
	} else {
		yyb3126 = r.CheckBreak()
	}
	if yyb3126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3126++
		if yyhl3126 {
			yyb3126 = yyj3126 > l
		} else {
			yyb3126 = r.CheckBreak()
		}
		if yyb3126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3129 := z.EncBinary()
		_ = yym3129
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3130 := !z.EncBinary()
			yy2arr3130 := z.EncBasicHandle().StructToArray
			var yyq3130 [1]bool
			_, _, _ = yysep3130, yyq3130, yy2arr3130
			const yyr3130 bool = false
			yyq3130[0] = len(x.PreferAvoidPods) != 0
			var yynn3130 int
			if yyr3130 || yy2arr3130 {
				r.EncodeArrayStart(1)
			} else {
				yynn3130 = 0
				for _, b := range yyq3130 {
					if b {
						yynn3130++
					}
				}
				r.EncodeMapStart(yynn3130)
				yynn3130 = 0
			}
			if yyr3130 || yy2arr3130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3130[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3132 := z.EncBinary()
						_ = yym3132
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3130[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3133 := z.EncBinary()
						_ = yym3133
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3130 || yy2arr3130 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3134 := z.DecBinary()
	_ = yym3134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3135 := r.ContainerType()
		if yyct3135 == codecSelferValueTypeMap1234 {
			yyl3135 := r.ReadMapStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3135, d)
			}
		} else if yyct3135 == codecSelferValueTypeArray1234 {
			yyl3135 := r.ReadArrayStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3136Slc
	var yyhl3136 bool = l >= 0
	for yyj3136 := 0; ; yyj3136++ {
		if yyhl3136 {
			if yyj3136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3136Slc = r.DecodeBytes(yys3136Slc, true, true)
		yys3136 := string(yys3136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3136 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3137 := &x.PreferAvoidPods
				yym3138 := z.DecBinary()
				_ = yym3138
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3137), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3136)
		} // end switch yys3136
	} // end for yyj3136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3139 int
	var yyb3139 bool
	var yyhl3139 bool = l >= 0
	yyj3139++
	if yyhl3139 {
		yyb3139 = yyj3139 > l
	} else {
		yyb3139 = r.CheckBreak()
	}
	if yyb3139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3140 := &x.PreferAvoidPods
		yym3141 := z.DecBinary()
		_ = yym3141
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3140), d)
		}
	}
	for {
		yyj3139++
		if yyhl3139 {
			yyb3139 = yyj3139 > l
		} else {
			yyb3139 = r.CheckBreak()
		}
		if yyb3139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3142 := z.EncBinary()
		_ = yym3142
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3143 := !z.EncBinary()
			yy2arr3143 := z.EncBasicHandle().StructToArray
			var yyq3143 [4]bool
			_, _, _ = yysep3143, yyq3143, yy2arr3143
			const yyr3143 bool = false
			yyq3143[1] = true
			yyq3143[2] = x.Reason != ""
			yyq3143[3] = x.Message != ""
			var yynn3143 int
			if yyr3143 || yy2arr3143 {
				r.EncodeArrayStart(4)
			} else {
				yynn3143 = 1
				for _, b := range yyq3143 {
					if b {
						yynn3143++
					}
				}
				r.EncodeMapStart(yynn3143)
				yynn3143 = 0
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3145 := &x.PodSignature
				yy3145.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3146 := &x.PodSignature
				yy3146.CodecEncodeSelf(e)
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[1] {
					yy3148 := &x.EvictionTime
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3148) {
					} else if yym3149 {
						z.EncBinaryMarshal(yy3148)
					} else if !yym3149 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3148)
					} else {
						z.EncFallback(yy3148)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3143[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3150 := &x.EvictionTime
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3150) {
					} else if yym3151 {
						z.EncBinaryMarshal(yy3150)
					} else if !yym3151 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3150)
					} else {
						z.EncFallback(yy3150)
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[2] {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3143[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[3] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3143[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3158 := z.DecBinary()
	_ = yym3158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3159 := r.ContainerType()
		if yyct3159 == codecSelferValueTypeMap1234 {
			yyl3159 := r.ReadMapStart()
			if yyl3159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3159, d)
			}
		} else if yyct3159 == codecSelferValueTypeArray1234 {
			yyl3159 := r.ReadArrayStart()
			if yyl3159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3160Slc
	var yyhl3160 bool = l >= 0
	for yyj3160 := 0; ; yyj3160++ {
		if yyhl3160 {
			if yyj3160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3160Slc = r.DecodeBytes(yys3160Slc, true, true)
		yys3160 := string(yys3160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3160 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3161 := &x.PodSignature
				yyv3161.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3162 := &x.EvictionTime
				yym3163 := z.DecBinary()
				_ = yym3163
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3162) {
				} else if yym3163 {
					z.DecBinaryUnmarshal(yyv3162)
				} else if !yym3163 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3162)
				} else {
					z.DecFallback(yyv3162, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3160)
		} // end switch yys3160
	} // end for yyj3160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3166 int
	var yyb3166 bool
	var yyhl3166 bool = l >= 0
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3167 := &x.PodSignature
		yyv3167.CodecDecodeSelf(d)
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3168 := &x.EvictionTime
		yym3169 := z.DecBinary()
		_ = yym3169
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3168) {
		} else if yym3169 {
			z.DecBinaryUnmarshal(yyv3168)
		} else if !yym3169 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3168)
		} else {
			z.DecFallback(yyv3168, false)
		}
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3166++
		if yyhl3166 {
			yyb3166 = yyj3166 > l
		} else {
			yyb3166 = r.CheckBreak()
		}
		if yyb3166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3172 := z.EncBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3173 := !z.EncBinary()
			yy2arr3173 := z.EncBasicHandle().StructToArray
			var yyq3173 [1]bool
			_, _, _ = yysep3173, yyq3173, yy2arr3173
			const yyr3173 bool = false
			yyq3173[0] = x.PodController != nil
			var yynn3173 int
			if yyr3173 || yy2arr3173 {
				r.EncodeArrayStart(1)
			} else {
				yynn3173 = 0
				for _, b := range yyq3173 {
					if b {
						yynn3173++
					}
				}
				r.EncodeMapStart(yynn3173)
				yynn3173 = 0
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3175 := z.DecBinary()
	_ = yym3175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3176 := r.ContainerType()
		if yyct3176 == codecSelferValueTypeMap1234 {
			yyl3176 := r.ReadMapStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3176, d)
			}
		} else if yyct3176 == codecSelferValueTypeArray1234 {
			yyl3176 := r.ReadArrayStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3177Slc
	var yyhl3177 bool = l >= 0
	for yyj3177 := 0; ; yyj3177++ {
		if yyhl3177 {
			if yyj3177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3177Slc = r.DecodeBytes(yys3177Slc, true, true)
		yys3177 := string(yys3177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3177 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3177)
		} // end switch yys3177
	} // end for yyj3177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3179 int
	var yyb3179 bool
	var yyhl3179 bool = l >= 0
	yyj3179++
	if yyhl3179 {
		yyb3179 = yyj3179 > l
	} else {
		yyb3179 = r.CheckBreak()
	}
	if yyb3179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3179++
		if yyhl3179 {
			yyb3179 = yyj3179 > l
		} else {
			yyb3179 = r.CheckBreak()
		}
		if yyb3179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3181 := z.EncBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3182 := !z.EncBinary()
			yy2arr3182 := z.EncBasicHandle().StructToArray
			var yyq3182 [2]bool
			_, _, _ = yysep3182, yyq3182, yy2arr3182
			const yyr3182 bool = false
			yyq3182[1] = x.SizeBytes != 0
			var yynn3182 int
			if yyr3182 || yy2arr3182 {
				r.EncodeArrayStart(2)
			} else {
				yynn3182 = 1
				for _, b := range yyq3182 {
					if b {
						yynn3182++
					}
				}
				r.EncodeMapStart(yynn3182)
				yynn3182 = 0
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[1] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3192 := &x.Names
				yym3193 := z.DecBinary()
				_ = yym3193
				if false {
				} else {
					z.F.DecSliceStringX(yyv3192, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3195 int
	var yyb3195 bool
	var yyhl3195 bool = l >= 0
	yyj3195++
	if yyhl3195 {
		yyb3195 = yyj3195 > l
	} else {
		yyb3195 = r.CheckBreak()
	}
	if yyb3195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3196 := &x.Names
		yym3197 := z.DecBinary()
		_ = yym3197
		if false {
		} else {
			z.F.DecSliceStringX(yyv3196, false, d)
		}
	}
	yyj3195++
	if yyhl3195 {
		yyb3195 = yyj3195 > l
	} else {
		yyb3195 = r.CheckBreak()
	}
	if yyb3195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3195++
		if yyhl3195 {
			yyb3195 = yyj3195 > l
		} else {
			yyb3195 = r.CheckBreak()
		}
		if yyb3195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3199 := z.EncBinary()
	_ = yym3199
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3200 := z.DecBinary()
	_ = yym3200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3201 := z.EncBinary()
	_ = yym3201
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3202 := z.DecBinary()
	_ = yym3202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3203 := z.EncBinary()
		_ = yym3203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3204 := !z.EncBinary()
			yy2arr3204 := z.EncBasicHandle().StructToArray
			var yyq3204 [6]bool
			_, _, _ = yysep3204, yyq3204, yy2arr3204
			const yyr3204 bool = false
			yyq3204[2] = true
			yyq3204[3] = true
			yyq3204[4] = x.Reason != ""
			yyq3204[5] = x.Message != ""
			var yynn3204 int
			if yyr3204 || yy2arr3204 {
				r.EncodeArrayStart(6)
			} else {
				yynn3204 = 2
				for _, b := range yyq3204 {
					if b {
						yynn3204++
					}
				}
				r.EncodeMapStart(yynn3204)
				yynn3204 = 0
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[2] {
					yy3208 := &x.LastHeartbeatTime
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3208) {
					} else if yym3209 {
						z.EncBinaryMarshal(yy3208)
					} else if !yym3209 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3208)
					} else {
						z.EncFallback(yy3208)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3210 := &x.LastHeartbeatTime
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3210) {
					} else if yym3211 {
						z.EncBinaryMarshal(yy3210)
					} else if !yym3211 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3210)
					} else {
						z.EncFallback(yy3210)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[3] {
					yy3213 := &x.LastTransitionTime
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3213) {
					} else if yym3214 {
						z.EncBinaryMarshal(yy3213)
					} else if !yym3214 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3213)
					} else {
						z.EncFallback(yy3213)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3215 := &x.LastTransitionTime
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3215) {
					} else if yym3216 {
						z.EncBinaryMarshal(yy3215)
					} else if !yym3216 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3215)
					} else {
						z.EncFallback(yy3215)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[4] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[5] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3223 := z.DecBinary()
	_ = yym3223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3224 := r.ContainerType()
		if yyct3224 == codecSelferValueTypeMap1234 {
			yyl3224 := r.ReadMapStart()
			if yyl3224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3224, d)
			}
		} else if yyct3224 == codecSelferValueTypeArray1234 {
			yyl3224 := r.ReadArrayStart()
			if yyl3224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3225Slc
	var yyhl3225 bool = l >= 0
	for yyj3225 := 0; ; yyj3225++ {
		if yyhl3225 {
			if yyj3225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3225Slc = r.DecodeBytes(yys3225Slc, true, true)
		yys3225 := string(yys3225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3225 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3228 := &x.LastHeartbeatTime
				yym3229 := z.DecBinary()
				_ = yym3229
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3228) {
				} else if yym3229 {
					z.DecBinaryUnmarshal(yyv3228)
				} else if !yym3229 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3228)
				} else {
					z.DecFallback(yyv3228, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3230 := &x.LastTransitionTime
				yym3231 := z.DecBinary()
				_ = yym3231
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3230) {
				} else if yym3231 {
					z.DecBinaryUnmarshal(yyv3230)
				} else if !yym3231 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3230)
				} else {
					z.DecFallback(yyv3230, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3225)
		} // end switch yys3225
	} // end for yyj3225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3234 int
	var yyb3234 bool
	var yyhl3234 bool = l >= 0
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3237 := &x.LastHeartbeatTime
		yym3238 := z.DecBinary()
		_ = yym3238
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3237) {
		} else if yym3238 {
			z.DecBinaryUnmarshal(yyv3237)
		} else if !yym3238 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3237)
		} else {
			z.DecFallback(yyv3237, false)
		}
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3239 := &x.LastTransitionTime
		yym3240 := z.DecBinary()
		_ = yym3240
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3239) {
		} else if yym3240 {
			z.DecBinaryUnmarshal(yyv3239)
		} else if !yym3240 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3239)
		} else {
			z.DecFallback(yyv3239, false)
		}
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3234++
		if yyhl3234 {
			yyb3234 = yyj3234 > l
		} else {
			yyb3234 = r.CheckBreak()
		}
		if yyb3234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3243 := z.EncBinary()
	_ = yym3243
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3244 := z.DecBinary()
	_ = yym3244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3245 := z.EncBinary()
		_ = yym3245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3246 := !z.EncBinary()
			yy2arr3246 := z.EncBasicHandle().StructToArray
			var yyq3246 [2]bool
			_, _, _ = yysep3246, yyq3246, yy2arr3246
			const yyr3246 bool = false
			var yynn3246 int
			if yyr3246 || yy2arr3246 {
				r.EncodeArrayStart(2)
			} else {
				yynn3246 = 2
				for _, b := range yyq3246 {
					if b {
						yynn3246++
					}
				}
				r.EncodeMapStart(yynn3246)
				yynn3246 = 0
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3249 := z.EncBinary()
				_ = yym3249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3250 := z.EncBinary()
				_ = yym3250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3251 := z.DecBinary()
	_ = yym3251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3252 := r.ContainerType()
		if yyct3252 == codecSelferValueTypeMap1234 {
			yyl3252 := r.ReadMapStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3252, d)
			}
		} else if yyct3252 == codecSelferValueTypeArray1234 {
			yyl3252 := r.ReadArrayStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3253Slc
	var yyhl3253 bool = l >= 0
	for yyj3253 := 0; ; yyj3253++ {
		if yyhl3253 {
			if yyj3253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3253Slc = r.DecodeBytes(yys3253Slc, true, true)
		yys3253 := string(yys3253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3253 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3253)
		} // end switch yys3253
	} // end for yyj3253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3256 int
	var yyb3256 bool
	var yyhl3256 bool = l >= 0
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3256++
		if yyhl3256 {
			yyb3256 = yyj3256 > l
		} else {
			yyb3256 = r.CheckBreak()
		}
		if yyb3256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3259 := z.EncBinary()
	_ = yym3259
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3260 := z.DecBinary()
	_ = yym3260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3261 := z.EncBinary()
		_ = yym3261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3262 := z.DecBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3263 := z.EncBinary()
		_ = yym3263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3264 := !z.EncBinary()
			yy2arr3264 := z.EncBasicHandle().StructToArray
			var yyq3264 [5]bool
			_, _, _ = yysep3264, yyq3264, yy2arr3264
			const yyr3264 bool = false
			yyq3264[0] = x.Kind != ""
			yyq3264[1] = x.APIVersion != ""
			yyq3264[2] = true
			yyq3264[3] = true
			yyq3264[4] = true
			var yynn3264 int
			if yyr3264 || yy2arr3264 {
				r.EncodeArrayStart(5)
			} else {
				yynn3264 = 0
				for _, b := range yyq3264 {
					if b {
						yynn3264++
					}
				}
				r.EncodeMapStart(yynn3264)
				yynn3264 = 0
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[0] {
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[1] {
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[2] {
					yy3272 := &x.ObjectMeta
					yy3272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3273 := &x.ObjectMeta
					yy3273.CodecEncodeSelf(e)
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[3] {
					yy3275 := &x.Spec
					yy3275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3264[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3276 := &x.Spec
					yy3276.CodecEncodeSelf(e)
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[4] {
					yy3278 := &x.Status
					yy3278.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3264[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3279 := &x.Status
					yy3279.CodecEncodeSelf(e)
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3280 := z.DecBinary()
	_ = yym3280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3281 := r.ContainerType()
		if yyct3281 == codecSelferValueTypeMap1234 {
			yyl3281 := r.ReadMapStart()
			if yyl3281 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3281, d)
			}
		} else if yyct3281 == codecSelferValueTypeArray1234 {
			yyl3281 := r.ReadArrayStart()
			if yyl3281 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3281, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3282Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3282Slc
	var yyhl3282 bool = l >= 0
	for yyj3282 := 0; ; yyj3282++ {
		if yyhl3282 {
			if yyj3282 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3282Slc = r.DecodeBytes(yys3282Slc, true, true)
		yys3282 := string(yys3282Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3282 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3285 := &x.ObjectMeta
				yyv3285.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3286 := &x.Spec
				yyv3286.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3287 := &x.Status
				yyv3287.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3282)
		} // end switch yys3282
	} // end for yyj3282
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3288 int
	var yyb3288 bool
	var yyhl3288 bool = l >= 0
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3291 := &x.ObjectMeta
		yyv3291.CodecDecodeSelf(d)
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3292 := &x.Spec
		yyv3292.CodecDecodeSelf(d)
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3293 := &x.Status
		yyv3293.CodecDecodeSelf(d)
	}
	for {
		yyj3288++
		if yyhl3288 {
			yyb3288 = yyj3288 > l
		} else {
			yyb3288 = r.CheckBreak()
		}
		if yyb3288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3294 := z.EncBinary()
		_ = yym3294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3295 := !z.EncBinary()
			yy2arr3295 := z.EncBasicHandle().StructToArray
			var yyq3295 [4]bool
			_, _, _ = yysep3295, yyq3295, yy2arr3295
			const yyr3295 bool = false
			yyq3295[0] = x.Kind != ""
			yyq3295[1] = x.APIVersion != ""
			yyq3295[2] = true
			var yynn3295 int
			if yyr3295 || yy2arr3295 {
				r.EncodeArrayStart(4)
			} else {
				yynn3295 = 1
				for _, b := range yyq3295 {
					if b {
						yynn3295++
					}
				}
				r.EncodeMapStart(yynn3295)
				yynn3295 = 0
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[0] {
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[1] {
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[2] {
					yy3303 := &x.ListMeta
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3303) {
					} else {
						z.EncFallback(yy3303)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3295[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3305 := &x.ListMeta
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3305) {
					} else {
						z.EncFallback(yy3305)
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3310 := z.DecBinary()
	_ = yym3310
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3311 := r.ContainerType()
		if yyct3311 == codecSelferValueTypeMap1234 {
			yyl3311 := r.ReadMapStart()
			if yyl3311 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3311, d)
			}
		} else if yyct3311 == codecSelferValueTypeArray1234 {
			yyl3311 := r.ReadArrayStart()
			if yyl3311 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3311, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3312Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3312Slc
	var yyhl3312 bool = l >= 0
	for yyj3312 := 0; ; yyj3312++ {
		if yyhl3312 {
			if yyj3312 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3312Slc = r.DecodeBytes(yys3312Slc, true, true)
		yys3312 := string(yys3312Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3312 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3315 := &x.ListMeta
				yym3316 := z.DecBinary()
				_ = yym3316
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3315) {
				} else {
					z.DecFallback(yyv3315, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3317 := &x.Items
				yym3318 := z.DecBinary()
				_ = yym3318
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3317), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3312)
		} // end switch yys3312
	} // end for yyj3312
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3319 int
	var yyb3319 bool
	var yyhl3319 bool = l >= 0
	yyj3319++
	if yyhl3319 {
		yyb3319 = yyj3319 > l
	} else {
		yyb3319 = r.CheckBreak()
	}
	if yyb3319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3319++
	if yyhl3319 {
		yyb3319 = yyj3319 > l
	} else {
		yyb3319 = r.CheckBreak()
	}
	if yyb3319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3319++
	if yyhl3319 {
		yyb3319 = yyj3319 > l
	} else {
		yyb3319 = r.CheckBreak()
	}
	if yyb3319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3322 := &x.ListMeta
		yym3323 := z.DecBinary()
		_ = yym3323
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3322) {
		} else {
			z.DecFallback(yyv3322, false)
		}
	}
	yyj3319++
	if yyhl3319 {
		yyb3319 = yyj3319 > l
	} else {
		yyb3319 = r.CheckBreak()
	}
	if yyb3319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3324 := &x.Items
		yym3325 := z.DecBinary()
		_ = yym3325
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3324), d)
		}
	}
	for {
		yyj3319++
		if yyhl3319 {
			yyb3319 = yyj3319 > l
		} else {
			yyb3319 = r.CheckBreak()
		}
		if yyb3319 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3319-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3326 := z.EncBinary()
	_ = yym3326
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3327 := z.DecBinary()
	_ = yym3327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3328 := z.EncBinary()
		_ = yym3328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3329 := !z.EncBinary()
			yy2arr3329 := z.EncBasicHandle().StructToArray
			var yyq3329 [1]bool
			_, _, _ = yysep3329, yyq3329, yy2arr3329
			const yyr3329 bool = false
			yyq3329[0] = len(x.Finalizers) != 0
			var yynn3329 int
			if yyr3329 || yy2arr3329 {
				r.EncodeArrayStart(1)
			} else {
				yynn3329 = 0
				for _, b := range yyq3329 {
					if b {
						yynn3329++
					}
				}
				r.EncodeMapStart(yynn3329)
				yynn3329 = 0
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3329[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3331 := z.EncBinary()
						_ = yym3331
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3332 := z.EncBinary()
						_ = yym3332
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3333 := z.DecBinary()
	_ = yym3333
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3334 := r.ContainerType()
		if yyct3334 == codecSelferValueTypeMap1234 {
			yyl3334 := r.ReadMapStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3334, d)
			}
		} else if yyct3334 == codecSelferValueTypeArray1234 {
			yyl3334 := r.ReadArrayStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3334, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3335Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3335Slc
	var yyhl3335 bool = l >= 0
	for yyj3335 := 0; ; yyj3335++ {
		if yyhl3335 {
			if yyj3335 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3335Slc = r.DecodeBytes(yys3335Slc, true, true)
		yys3335 := string(yys3335Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3335 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3336 := &x.Finalizers
				yym3337 := z.DecBinary()
				_ = yym3337
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3336), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3335)
		} // end switch yys3335
	} // end for yyj3335
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3338 int
	var yyb3338 bool
	var yyhl3338 bool = l >= 0
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3339 := &x.Finalizers
		yym3340 := z.DecBinary()
		_ = yym3340
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3339), d)
		}
	}
	for {
		yyj3338++
		if yyhl3338 {
			yyb3338 = yyj3338 > l
		} else {
			yyb3338 = r.CheckBreak()
		}
		if yyb3338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3341 := z.EncBinary()
		_ = yym3341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3342 := !z.EncBinary()
			yy2arr3342 := z.EncBasicHandle().StructToArray
			var yyq3342 [1]bool
			_, _, _ = yysep3342, yyq3342, yy2arr3342
			const yyr3342 bool = false
			yyq3342[0] = x.Phase != ""
			var yynn3342 int
			if yyr3342 || yy2arr3342 {
				r.EncodeArrayStart(1)
			} else {
				yynn3342 = 0
				for _, b := range yyq3342 {
					if b {
						yynn3342++
					}
				}
				r.EncodeMapStart(yynn3342)
				yynn3342 = 0
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3342[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3342 || yy2arr3342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3344 := z.DecBinary()
	_ = yym3344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3345 := r.ContainerType()
		if yyct3345 == codecSelferValueTypeMap1234 {
			yyl3345 := r.ReadMapStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3345, d)
			}
		} else if yyct3345 == codecSelferValueTypeArray1234 {
			yyl3345 := r.ReadArrayStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3346Slc
	var yyhl3346 bool = l >= 0
	for yyj3346 := 0; ; yyj3346++ {
		if yyhl3346 {
			if yyj3346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3346Slc = r.DecodeBytes(yys3346Slc, true, true)
		yys3346 := string(yys3346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3346 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3346)
		} // end switch yys3346
	} // end for yyj3346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3348 int
	var yyb3348 bool
	var yyhl3348 bool = l >= 0
	yyj3348++
	if yyhl3348 {
		yyb3348 = yyj3348 > l
	} else {
		yyb3348 = r.CheckBreak()
	}
	if yyb3348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3348++
		if yyhl3348 {
			yyb3348 = yyj3348 > l
		} else {
			yyb3348 = r.CheckBreak()
		}
		if yyb3348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3350 := z.EncBinary()
	_ = yym3350
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3351 := z.DecBinary()
	_ = yym3351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3352 := z.EncBinary()
		_ = yym3352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3353 := !z.EncBinary()
			yy2arr3353 := z.EncBasicHandle().StructToArray
			var yyq3353 [5]bool
			_, _, _ = yysep3353, yyq3353, yy2arr3353
			const yyr3353 bool = false
			yyq3353[0] = x.Kind != ""
			yyq3353[1] = x.APIVersion != ""
			yyq3353[2] = true
			yyq3353[3] = true
			yyq3353[4] = true
			var yynn3353 int
			if yyr3353 || yy2arr3353 {
				r.EncodeArrayStart(5)
			} else {
				yynn3353 = 0
				for _, b := range yyq3353 {
					if b {
						yynn3353++
					}
				}
				r.EncodeMapStart(yynn3353)
				yynn3353 = 0
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[0] {
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3353[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[1] {
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3353[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[2] {
					yy3361 := &x.ObjectMeta
					yy3361.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3362 := &x.ObjectMeta
					yy3362.CodecEncodeSelf(e)
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[3] {
					yy3364 := &x.Spec
					yy3364.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3353[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3365 := &x.Spec
					yy3365.CodecEncodeSelf(e)
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[4] {
					yy3367 := &x.Status
					yy3367.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3353[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3368 := &x.Status
					yy3368.CodecEncodeSelf(e)
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3369 := z.DecBinary()
	_ = yym3369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3370 := r.ContainerType()
		if yyct3370 == codecSelferValueTypeMap1234 {
			yyl3370 := r.ReadMapStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3370, d)
			}
		} else if yyct3370 == codecSelferValueTypeArray1234 {
			yyl3370 := r.ReadArrayStart()
			if yyl3370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3371Slc
	var yyhl3371 bool = l >= 0
	for yyj3371 := 0; ; yyj3371++ {
		if yyhl3371 {
			if yyj3371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3371Slc = r.DecodeBytes(yys3371Slc, true, true)
		yys3371 := string(yys3371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3371 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3374 := &x.ObjectMeta
				yyv3374.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3375 := &x.Spec
				yyv3375.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3376 := &x.Status
				yyv3376.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3371)
		} // end switch yys3371
	} // end for yyj3371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3377 int
	var yyb3377 bool
	var yyhl3377 bool = l >= 0
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3380 := &x.ObjectMeta
		yyv3380.CodecDecodeSelf(d)
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3381 := &x.Spec
		yyv3381.CodecDecodeSelf(d)
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3382 := &x.Status
		yyv3382.CodecDecodeSelf(d)
	}
	for {
		yyj3377++
		if yyhl3377 {
			yyb3377 = yyj3377 > l
		} else {
			yyb3377 = r.CheckBreak()
		}
		if yyb3377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3383 := z.EncBinary()
		_ = yym3383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3384 := !z.EncBinary()
			yy2arr3384 := z.EncBasicHandle().StructToArray
			var yyq3384 [4]bool
			_, _, _ = yysep3384, yyq3384, yy2arr3384
			const yyr3384 bool = false
			yyq3384[0] = x.Kind != ""
			yyq3384[1] = x.APIVersion != ""
			yyq3384[2] = true
			var yynn3384 int
			if yyr3384 || yy2arr3384 {
				r.EncodeArrayStart(4)
			} else {
				yynn3384 = 1
				for _, b := range yyq3384 {
					if b {
						yynn3384++
					}
				}
				r.EncodeMapStart(yynn3384)
				yynn3384 = 0
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[0] {
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[1] {
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[2] {
					yy3392 := &x.ListMeta
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3392) {
					} else {
						z.EncFallback(yy3392)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3384[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3394 := &x.ListMeta
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3394) {
					} else {
						z.EncFallback(yy3394)
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3399 := z.DecBinary()
	_ = yym3399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3400 := r.ContainerType()
		if yyct3400 == codecSelferValueTypeMap1234 {
			yyl3400 := r.ReadMapStart()
			if yyl3400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3400, d)
			}
		} else if yyct3400 == codecSelferValueTypeArray1234 {
			yyl3400 := r.ReadArrayStart()
			if yyl3400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3401Slc
	var yyhl3401 bool = l >= 0
	for yyj3401 := 0; ; yyj3401++ {
		if yyhl3401 {
			if yyj3401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3401Slc = r.DecodeBytes(yys3401Slc, true, true)
		yys3401 := string(yys3401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3401 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3404 := &x.ListMeta
				yym3405 := z.DecBinary()
				_ = yym3405
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3404) {
				} else {
					z.DecFallback(yyv3404, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3406 := &x.Items
				yym3407 := z.DecBinary()
				_ = yym3407
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3406), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3401)
		} // end switch yys3401
	} // end for yyj3401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3408 int
	var yyb3408 bool
	var yyhl3408 bool = l >= 0
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3411 := &x.ListMeta
		yym3412 := z.DecBinary()
		_ = yym3412
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3411) {
		} else {
			z.DecFallback(yyv3411, false)
		}
	}
	yyj3408++
	if yyhl3408 {
		yyb3408 = yyj3408 > l
	} else {
		yyb3408 = r.CheckBreak()
	}
	if yyb3408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3413 := &x.Items
		yym3414 := z.DecBinary()
		_ = yym3414
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3413), d)
		}
	}
	for {
		yyj3408++
		if yyhl3408 {
			yyb3408 = yyj3408 > l
		} else {
			yyb3408 = r.CheckBreak()
		}
		if yyb3408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3415 := z.EncBinary()
		_ = yym3415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3416 := !z.EncBinary()
			yy2arr3416 := z.EncBasicHandle().StructToArray
			var yyq3416 [4]bool
			_, _, _ = yysep3416, yyq3416, yy2arr3416
			const yyr3416 bool = false
			yyq3416[0] = x.Kind != ""
			yyq3416[1] = x.APIVersion != ""
			yyq3416[2] = true
			var yynn3416 int
			if yyr3416 || yy2arr3416 {
				r.EncodeArrayStart(4)
			} else {
				yynn3416 = 1
				for _, b := range yyq3416 {
					if b {
						yynn3416++
					}
				}
				r.EncodeMapStart(yynn3416)
				yynn3416 = 0
			}
			if yyr3416 || yy2arr3416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3416[0] {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3416[1] {
					yym3421 := z.EncBinary()
					_ = yym3421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3416[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3416 || yy2arr3416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3416[2] {
					yy3424 := &x.ObjectMeta
					yy3424.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3416[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3425 := &x.ObjectMeta
					yy3425.CodecEncodeSelf(e)
				}
			}
			if yyr3416 || yy2arr3416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3427 := &x.Target
				yy3427.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3428 := &x.Target
				yy3428.CodecEncodeSelf(e)
			}
			if yyr3416 || yy2arr3416 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3429 := z.DecBinary()
	_ = yym3429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3430 := r.ContainerType()
		if yyct3430 == codecSelferValueTypeMap1234 {
			yyl3430 := r.ReadMapStart()
			if yyl3430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3430, d)
			}
		} else if yyct3430 == codecSelferValueTypeArray1234 {
			yyl3430 := r.ReadArrayStart()
			if yyl3430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3431Slc
	var yyhl3431 bool = l >= 0
	for yyj3431 := 0; ; yyj3431++ {
		if yyhl3431 {
			if yyj3431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3431Slc = r.DecodeBytes(yys3431Slc, true, true)
		yys3431 := string(yys3431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3431 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3434 := &x.ObjectMeta
				yyv3434.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3435 := &x.Target
				yyv3435.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3431)
		} // end switch yys3431
	} // end for yyj3431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3436 int
	var yyb3436 bool
	var yyhl3436 bool = l >= 0
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3439 := &x.ObjectMeta
		yyv3439.CodecDecodeSelf(d)
	}
	yyj3436++
	if yyhl3436 {
		yyb3436 = yyj3436 > l
	} else {
		yyb3436 = r.CheckBreak()
	}
	if yyb3436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3440 := &x.Target
		yyv3440.CodecDecodeSelf(d)
	}
	for {
		yyj3436++
		if yyhl3436 {
			yyb3436 = yyj3436 > l
		} else {
			yyb3436 = r.CheckBreak()
		}
		if yyb3436 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3436-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3441 := z.EncBinary()
		_ = yym3441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3442 := !z.EncBinary()
			yy2arr3442 := z.EncBasicHandle().StructToArray
			var yyq3442 [1]bool
			_, _, _ = yysep3442, yyq3442, yy2arr3442
			const yyr3442 bool = false
			yyq3442[0] = x.UID != nil
			var yynn3442 int
			if yyr3442 || yy2arr3442 {
				r.EncodeArrayStart(1)
			} else {
				yynn3442 = 0
				for _, b := range yyq3442 {
					if b {
						yynn3442++
					}
				}
				r.EncodeMapStart(yynn3442)
				yynn3442 = 0
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3442[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3444 := *x.UID
						yym3445 := z.EncBinary()
						_ = yym3445
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3444) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3444))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3446 := *x.UID
						yym3447 := z.EncBinary()
						_ = yym3447
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3446) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3446))
						}
					}
				}
			}
			if yyr3442 || yy2arr3442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3448 := z.DecBinary()
	_ = yym3448
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3449 := r.ContainerType()
		if yyct3449 == codecSelferValueTypeMap1234 {
			yyl3449 := r.ReadMapStart()
			if yyl3449 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3449, d)
			}
		} else if yyct3449 == codecSelferValueTypeArray1234 {
			yyl3449 := r.ReadArrayStart()
			if yyl3449 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3449, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3450Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3450Slc
	var yyhl3450 bool = l >= 0
	for yyj3450 := 0; ; yyj3450++ {
		if yyhl3450 {
			if yyj3450 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3450Slc = r.DecodeBytes(yys3450Slc, true, true)
		yys3450 := string(yys3450Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3450 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3452 := z.DecBinary()
				_ = yym3452
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3450)
		} // end switch yys3450
	} // end for yyj3450
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3453 int
	var yyb3453 bool
	var yyhl3453 bool = l >= 0
	yyj3453++
	if yyhl3453 {
		yyb3453 = yyj3453 > l
	} else {
		yyb3453 = r.CheckBreak()
	}
	if yyb3453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3455 := z.DecBinary()
		_ = yym3455
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3453++
		if yyhl3453 {
			yyb3453 = yyj3453 > l
		} else {
			yyb3453 = r.CheckBreak()
		}
		if yyb3453 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3453-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3456 := z.EncBinary()
		_ = yym3456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3457 := !z.EncBinary()
			yy2arr3457 := z.EncBasicHandle().StructToArray
			var yyq3457 [5]bool
			_, _, _ = yysep3457, yyq3457, yy2arr3457
			const yyr3457 bool = false
			yyq3457[0] = x.Kind != ""
			yyq3457[1] = x.APIVersion != ""
			yyq3457[2] = x.GracePeriodSeconds != nil
			yyq3457[3] = x.Preconditions != nil
			yyq3457[4] = x.OrphanDependents != nil
			var yynn3457 int
			if yyr3457 || yy2arr3457 {
				r.EncodeArrayStart(5)
			} else {
				yynn3457 = 0
				for _, b := range yyq3457 {
					if b {
						yynn3457++
					}
				}
				r.EncodeMapStart(yynn3457)
				yynn3457 = 0
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[0] {
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[1] {
					yym3462 := z.EncBinary()
					_ = yym3462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3465 := *x.GracePeriodSeconds
						yym3466 := z.EncBinary()
						_ = yym3466
						if false {
						} else {
							r.EncodeInt(int64(yy3465))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3457[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3467 := *x.GracePeriodSeconds
						yym3468 := z.EncBinary()
						_ = yym3468
						if false {
						} else {
							r.EncodeInt(int64(yy3467))
						}
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3457[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3471 := *x.OrphanDependents
						yym3472 := z.EncBinary()
						_ = yym3472
						if false {
						} else {
							r.EncodeBool(bool(yy3471))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3457[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3473 := *x.OrphanDependents
						yym3474 := z.EncBinary()
						_ = yym3474
						if false {
						} else {
							r.EncodeBool(bool(yy3473))
						}
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3475 := z.DecBinary()
	_ = yym3475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3476 := r.ContainerType()
		if yyct3476 == codecSelferValueTypeMap1234 {
			yyl3476 := r.ReadMapStart()
			if yyl3476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3476, d)
			}
		} else if yyct3476 == codecSelferValueTypeArray1234 {
			yyl3476 := r.ReadArrayStart()
			if yyl3476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3477Slc
	var yyhl3477 bool = l >= 0
	for yyj3477 := 0; ; yyj3477++ {
		if yyhl3477 {
			if yyj3477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3477Slc = r.DecodeBytes(yys3477Slc, true, true)
		yys3477 := string(yys3477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3477 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3481 := z.DecBinary()
				_ = yym3481
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3484 := z.DecBinary()
				_ = yym3484
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3477)
		} // end switch yys3477
	} // end for yyj3477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3485 int
	var yyb3485 bool
	var yyhl3485 bool = l >= 0
	yyj3485++
	if yyhl3485 {
		yyb3485 = yyj3485 > l
	} else {
		yyb3485 = r.CheckBreak()
	}
	if yyb3485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3485++
	if yyhl3485 {
		yyb3485 = yyj3485 > l
	} else {
		yyb3485 = r.CheckBreak()
	}
	if yyb3485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3485++
	if yyhl3485 {
		yyb3485 = yyj3485 > l
	} else {
		yyb3485 = r.CheckBreak()
	}
	if yyb3485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3489 := z.DecBinary()
		_ = yym3489
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3485++
	if yyhl3485 {
		yyb3485 = yyj3485 > l
	} else {
		yyb3485 = r.CheckBreak()
	}
	if yyb3485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3485++
	if yyhl3485 {
		yyb3485 = yyj3485 > l
	} else {
		yyb3485 = r.CheckBreak()
	}
	if yyb3485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3492 := z.DecBinary()
		_ = yym3492
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3485++
		if yyhl3485 {
			yyb3485 = yyj3485 > l
		} else {
			yyb3485 = r.CheckBreak()
		}
		if yyb3485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3493 := z.EncBinary()
		_ = yym3493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3494 := !z.EncBinary()
			yy2arr3494 := z.EncBasicHandle().StructToArray
			var yyq3494 [4]bool
			_, _, _ = yysep3494, yyq3494, yy2arr3494
			const yyr3494 bool = false
			yyq3494[0] = x.Kind != ""
			yyq3494[1] = x.APIVersion != ""
			var yynn3494 int
			if yyr3494 || yy2arr3494 {
				r.EncodeArrayStart(4)
			} else {
				yynn3494 = 2
				for _, b := range yyq3494 {
					if b {
						yynn3494++
					}
				}
				r.EncodeMapStart(yynn3494)
				yynn3494 = 0
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[0] {
					yym3496 := z.EncBinary()
					_ = yym3496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3497 := z.EncBinary()
					_ = yym3497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[1] {
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3494[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3502 := z.EncBinary()
				_ = yym3502
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3503 := z.EncBinary()
				_ = yym3503
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3505 := z.EncBinary()
				_ = yym3505
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3506 := z.EncBinary()
				_ = yym3506
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3507 := z.DecBinary()
	_ = yym3507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3508 := r.ContainerType()
		if yyct3508 == codecSelferValueTypeMap1234 {
			yyl3508 := r.ReadMapStart()
			if yyl3508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3508, d)
			}
		} else if yyct3508 == codecSelferValueTypeArray1234 {
			yyl3508 := r.ReadArrayStart()
			if yyl3508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3509Slc
	var yyhl3509 bool = l >= 0
	for yyj3509 := 0; ; yyj3509++ {
		if yyhl3509 {
			if yyj3509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3509Slc = r.DecodeBytes(yys3509Slc, true, true)
		yys3509 := string(yys3509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3509 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3509)
		} // end switch yys3509
	} // end for yyj3509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3514 int
	var yyb3514 bool
	var yyhl3514 bool = l >= 0
	yyj3514++
	if yyhl3514 {
		yyb3514 = yyj3514 > l
	} else {
		yyb3514 = r.CheckBreak()
	}
	if yyb3514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3514++
	if yyhl3514 {
		yyb3514 = yyj3514 > l
	} else {
		yyb3514 = r.CheckBreak()
	}
	if yyb3514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3514++
	if yyhl3514 {
		yyb3514 = yyj3514 > l
	} else {
		yyb3514 = r.CheckBreak()
	}
	if yyb3514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3514++
	if yyhl3514 {
		yyb3514 = yyj3514 > l
	} else {
		yyb3514 = r.CheckBreak()
	}
	if yyb3514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3514++
		if yyhl3514 {
			yyb3514 = yyj3514 > l
		} else {
			yyb3514 = r.CheckBreak()
		}
		if yyb3514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3519 := z.EncBinary()
		_ = yym3519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3520 := !z.EncBinary()
			yy2arr3520 := z.EncBasicHandle().StructToArray
			var yyq3520 [7]bool
			_, _, _ = yysep3520, yyq3520, yy2arr3520
			const yyr3520 bool = false
			yyq3520[0] = x.Kind != ""
			yyq3520[1] = x.APIVersion != ""
			yyq3520[2] = x.LabelSelector != ""
			yyq3520[3] = x.FieldSelector != ""
			yyq3520[4] = x.Watch != false
			yyq3520[5] = x.ResourceVersion != ""
			yyq3520[6] = x.TimeoutSeconds != nil
			var yynn3520 int
			if yyr3520 || yy2arr3520 {
				r.EncodeArrayStart(7)
			} else {
				yynn3520 = 0
				for _, b := range yyq3520 {
					if b {
						yynn3520++
					}
				}
				r.EncodeMapStart(yynn3520)
				yynn3520 = 0
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[0] {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[1] {
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[2] {
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[3] {
					yym3531 := z.EncBinary()
					_ = yym3531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3520[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[4] {
					yym3534 := z.EncBinary()
					_ = yym3534
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3520[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3535 := z.EncBinary()
					_ = yym3535
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[5] {
					yym3537 := z.EncBinary()
					_ = yym3537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3520[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3540 := *x.TimeoutSeconds
						yym3541 := z.EncBinary()
						_ = yym3541
						if false {
						} else {
							r.EncodeInt(int64(yy3540))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3520[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3542 := *x.TimeoutSeconds
						yym3543 := z.EncBinary()
						_ = yym3543
						if false {
						} else {
							r.EncodeInt(int64(yy3542))
						}
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3544 := z.DecBinary()
	_ = yym3544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3545 := r.ContainerType()
		if yyct3545 == codecSelferValueTypeMap1234 {
			yyl3545 := r.ReadMapStart()
			if yyl3545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3545, d)
			}
		} else if yyct3545 == codecSelferValueTypeArray1234 {
			yyl3545 := r.ReadArrayStart()
			if yyl3545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3546Slc
	var yyhl3546 bool = l >= 0
	for yyj3546 := 0; ; yyj3546++ {
		if yyhl3546 {
			if yyj3546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3546Slc = r.DecodeBytes(yys3546Slc, true, true)
		yys3546 := string(yys3546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3546 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3554 := z.DecBinary()
				_ = yym3554
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3546)
		} // end switch yys3546
	} // end for yyj3546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3555 int
	var yyb3555 bool
	var yyhl3555 bool = l >= 0
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3563 := z.DecBinary()
		_ = yym3563
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3555++
		if yyhl3555 {
			yyb3555 = yyj3555 > l
		} else {
			yyb3555 = r.CheckBreak()
		}
		if yyb3555 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3555-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3564 := z.EncBinary()
		_ = yym3564
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3565 := !z.EncBinary()
			yy2arr3565 := z.EncBasicHandle().StructToArray
			var yyq3565 [10]bool
			_, _, _ = yysep3565, yyq3565, yy2arr3565
			const yyr3565 bool = false
			yyq3565[0] = x.Kind != ""
			yyq3565[1] = x.APIVersion != ""
			yyq3565[2] = x.Container != ""
			yyq3565[3] = x.Follow != false
			yyq3565[4] = x.Previous != false
			yyq3565[5] = x.SinceSeconds != nil
			yyq3565[6] = x.SinceTime != nil
			yyq3565[7] = x.Timestamps != false
			yyq3565[8] = x.TailLines != nil
			yyq3565[9] = x.LimitBytes != nil
			var yynn3565 int
			if yyr3565 || yy2arr3565 {
				r.EncodeArrayStart(10)
			} else {
				yynn3565 = 0
				for _, b := range yyq3565 {
					if b {
						yynn3565++
					}
				}
				r.EncodeMapStart(yynn3565)
				yynn3565 = 0
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[0] {
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3565[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3568 := z.EncBinary()
					_ = yym3568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[1] {
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3565[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[2] {
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3565[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[3] {
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3565[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[4] {
					yym3579 := z.EncBinary()
					_ = yym3579
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3565[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3582 := *x.SinceSeconds
						yym3583 := z.EncBinary()
						_ = yym3583
						if false {
						} else {
							r.EncodeInt(int64(yy3582))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3565[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3584 := *x.SinceSeconds
						yym3585 := z.EncBinary()
						_ = yym3585
						if false {
						} else {
							r.EncodeInt(int64(yy3584))
						}
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3587 := z.EncBinary()
						_ = yym3587
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3587 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3587 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3565[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3588 := z.EncBinary()
						_ = yym3588
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3588 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3588 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[7] {
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3565[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3593 := *x.TailLines
						yym3594 := z.EncBinary()
						_ = yym3594
						if false {
						} else {
							r.EncodeInt(int64(yy3593))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3565[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3595 := *x.TailLines
						yym3596 := z.EncBinary()
						_ = yym3596
						if false {
						} else {
							r.EncodeInt(int64(yy3595))
						}
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3565[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3598 := *x.LimitBytes
						yym3599 := z.EncBinary()
						_ = yym3599
						if false {
						} else {
							r.EncodeInt(int64(yy3598))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3565[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3600 := *x.LimitBytes
						yym3601 := z.EncBinary()
						_ = yym3601
						if false {
						} else {
							r.EncodeInt(int64(yy3600))
						}
					}
				}
			}
			if yyr3565 || yy2arr3565 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3602 := z.DecBinary()
	_ = yym3602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3603 := r.ContainerType()
		if yyct3603 == codecSelferValueTypeMap1234 {
			yyl3603 := r.ReadMapStart()
			if yyl3603 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3603, d)
			}
		} else if yyct3603 == codecSelferValueTypeArray1234 {
			yyl3603 := r.ReadArrayStart()
			if yyl3603 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3603, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3604Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3604Slc
	var yyhl3604 bool = l >= 0
	for yyj3604 := 0; ; yyj3604++ {
		if yyhl3604 {
			if yyj3604 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3604Slc = r.DecodeBytes(yys3604Slc, true, true)
		yys3604 := string(yys3604Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3604 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3611 := z.DecBinary()
				_ = yym3611
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3613 := z.DecBinary()
				_ = yym3613
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3613 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3613 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3616 := z.DecBinary()
				_ = yym3616
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3618 := z.DecBinary()
				_ = yym3618
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3604)
		} // end switch yys3604
	} // end for yyj3604
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3619 int
	var yyb3619 bool
	var yyhl3619 bool = l >= 0
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3626 := z.DecBinary()
		_ = yym3626
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3628 := z.DecBinary()
		_ = yym3628
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3628 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3628 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3631 := z.DecBinary()
		_ = yym3631
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3633 := z.DecBinary()
		_ = yym3633
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3619++
		if yyhl3619 {
			yyb3619 = yyj3619 > l
		} else {
			yyb3619 = r.CheckBreak()
		}
		if yyb3619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3634 := z.EncBinary()
		_ = yym3634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3635 := !z.EncBinary()
			yy2arr3635 := z.EncBasicHandle().StructToArray
			var yyq3635 [7]bool
			_, _, _ = yysep3635, yyq3635, yy2arr3635
			const yyr3635 bool = false
			yyq3635[0] = x.Kind != ""
			yyq3635[1] = x.APIVersion != ""
			yyq3635[2] = x.Stdin != false
			yyq3635[3] = x.Stdout != false
			yyq3635[4] = x.Stderr != false
			yyq3635[5] = x.TTY != false
			yyq3635[6] = x.Container != ""
			var yynn3635 int
			if yyr3635 || yy2arr3635 {
				r.EncodeArrayStart(7)
			} else {
				yynn3635 = 0
				for _, b := range yyq3635 {
					if b {
						yynn3635++
					}
				}
				r.EncodeMapStart(yynn3635)
				yynn3635 = 0
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3635[0] {
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3635[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3635[1] {
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3635[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3635[2] {
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3635[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3635[3] {
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3635[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3635[4] {
					yym3649 := z.EncBinary()
					_ = yym3649
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3635[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3635[5] {
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3635[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3635[6] {
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3635[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3635 || yy2arr3635 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3657 := z.DecBinary()
	_ = yym3657
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3658 := r.ContainerType()
		if yyct3658 == codecSelferValueTypeMap1234 {
			yyl3658 := r.ReadMapStart()
			if yyl3658 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3658, d)
			}
		} else if yyct3658 == codecSelferValueTypeArray1234 {
			yyl3658 := r.ReadArrayStart()
			if yyl3658 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3658, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3659Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3659Slc
	var yyhl3659 bool = l >= 0
	for yyj3659 := 0; ; yyj3659++ {
		if yyhl3659 {
			if yyj3659 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3659Slc = r.DecodeBytes(yys3659Slc, true, true)
		yys3659 := string(yys3659Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3659 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3659)
		} // end switch yys3659
	} // end for yyj3659
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3667 int
	var yyb3667 bool
	var yyhl3667 bool = l >= 0
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3667++
		if yyhl3667 {
			yyb3667 = yyj3667 > l
		} else {
			yyb3667 = r.CheckBreak()
		}
		if yyb3667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3675 := z.EncBinary()
		_ = yym3675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3676 := !z.EncBinary()
			yy2arr3676 := z.EncBasicHandle().StructToArray
			var yyq3676 [8]bool
			_, _, _ = yysep3676, yyq3676, yy2arr3676
			const yyr3676 bool = false
			yyq3676[0] = x.Kind != ""
			yyq3676[1] = x.APIVersion != ""
			yyq3676[2] = x.Stdin != false
			yyq3676[3] = x.Stdout != false
			yyq3676[4] = x.Stderr != false
			yyq3676[5] = x.TTY != false
			yyq3676[6] = x.Container != ""
			var yynn3676 int
			if yyr3676 || yy2arr3676 {
				r.EncodeArrayStart(8)
			} else {
				yynn3676 = 1
				for _, b := range yyq3676 {
					if b {
						yynn3676++
					}
				}
				r.EncodeMapStart(yynn3676)
				yynn3676 = 0
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[0] {
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3676[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[1] {
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3676[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[2] {
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[3] {
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3676[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3688 := z.EncBinary()
					_ = yym3688
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[4] {
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3676[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[5] {
					yym3693 := z.EncBinary()
					_ = yym3693
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3676[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[6] {
					yym3696 := z.EncBinary()
					_ = yym3696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3676[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3699 := z.EncBinary()
					_ = yym3699
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3701 := z.DecBinary()
	_ = yym3701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3702 := r.ContainerType()
		if yyct3702 == codecSelferValueTypeMap1234 {
			yyl3702 := r.ReadMapStart()
			if yyl3702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3702, d)
			}
		} else if yyct3702 == codecSelferValueTypeArray1234 {
			yyl3702 := r.ReadArrayStart()
			if yyl3702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3703Slc
	var yyhl3703 bool = l >= 0
	for yyj3703 := 0; ; yyj3703++ {
		if yyhl3703 {
			if yyj3703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3703Slc = r.DecodeBytes(yys3703Slc, true, true)
		yys3703 := string(yys3703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3703 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3711 := &x.Command
				yym3712 := z.DecBinary()
				_ = yym3712
				if false {
				} else {
					z.F.DecSliceStringX(yyv3711, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3703)
		} // end switch yys3703
	} // end for yyj3703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3713 int
	var yyb3713 bool
	var yyhl3713 bool = l >= 0
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3721 := &x.Command
		yym3722 := z.DecBinary()
		_ = yym3722
		if false {
		} else {
			z.F.DecSliceStringX(yyv3721, false, d)
		}
	}
	for {
		yyj3713++
		if yyhl3713 {
			yyb3713 = yyj3713 > l
		} else {
			yyb3713 = r.CheckBreak()
		}
		if yyb3713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3723 := z.EncBinary()
		_ = yym3723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3724 := !z.EncBinary()
			yy2arr3724 := z.EncBasicHandle().StructToArray
			var yyq3724 [3]bool
			_, _, _ = yysep3724, yyq3724, yy2arr3724
			const yyr3724 bool = false
			yyq3724[0] = x.Kind != ""
			yyq3724[1] = x.APIVersion != ""
			yyq3724[2] = x.Path != ""
			var yynn3724 int
			if yyr3724 || yy2arr3724 {
				r.EncodeArrayStart(3)
			} else {
				yynn3724 = 0
				for _, b := range yyq3724 {
					if b {
						yynn3724++
					}
				}
				r.EncodeMapStart(yynn3724)
				yynn3724 = 0
			}
			if yyr3724 || yy2arr3724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3724[0] {
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3724[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3724 || yy2arr3724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3724[1] {
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3724 || yy2arr3724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3724[2] {
					yym3732 := z.EncBinary()
					_ = yym3732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3724[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3724 || yy2arr3724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3734 := z.DecBinary()
	_ = yym3734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3735 := r.ContainerType()
		if yyct3735 == codecSelferValueTypeMap1234 {
			yyl3735 := r.ReadMapStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3735, d)
			}
		} else if yyct3735 == codecSelferValueTypeArray1234 {
			yyl3735 := r.ReadArrayStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3736Slc
	var yyhl3736 bool = l >= 0
	for yyj3736 := 0; ; yyj3736++ {
		if yyhl3736 {
			if yyj3736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3736Slc = r.DecodeBytes(yys3736Slc, true, true)
		yys3736 := string(yys3736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3736 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3736)
		} // end switch yys3736
	} // end for yyj3736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3740 int
	var yyb3740 bool
	var yyhl3740 bool = l >= 0
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3740++
	if yyhl3740 {
		yyb3740 = yyj3740 > l
	} else {
		yyb3740 = r.CheckBreak()
	}
	if yyb3740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3740++
		if yyhl3740 {
			yyb3740 = yyj3740 > l
		} else {
			yyb3740 = r.CheckBreak()
		}
		if yyb3740 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3740-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3744 := z.EncBinary()
		_ = yym3744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3745 := !z.EncBinary()
			yy2arr3745 := z.EncBasicHandle().StructToArray
			var yyq3745 [3]bool
			_, _, _ = yysep3745, yyq3745, yy2arr3745
			const yyr3745 bool = false
			yyq3745[0] = x.Kind != ""
			yyq3745[1] = x.APIVersion != ""
			yyq3745[2] = x.Path != ""
			var yynn3745 int
			if yyr3745 || yy2arr3745 {
				r.EncodeArrayStart(3)
			} else {
				yynn3745 = 0
				for _, b := range yyq3745 {
					if b {
						yynn3745++
					}
				}
				r.EncodeMapStart(yynn3745)
				yynn3745 = 0
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3745[0] {
					yym3747 := z.EncBinary()
					_ = yym3747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3745[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3745[1] {
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3745[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3745[2] {
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3745[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3745 || yy2arr3745 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3755 := z.DecBinary()
	_ = yym3755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3756 := r.ContainerType()
		if yyct3756 == codecSelferValueTypeMap1234 {
			yyl3756 := r.ReadMapStart()
			if yyl3756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3756, d)
			}
		} else if yyct3756 == codecSelferValueTypeArray1234 {
			yyl3756 := r.ReadArrayStart()
			if yyl3756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3757Slc
	var yyhl3757 bool = l >= 0
	for yyj3757 := 0; ; yyj3757++ {
		if yyhl3757 {
			if yyj3757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3757Slc = r.DecodeBytes(yys3757Slc, true, true)
		yys3757 := string(yys3757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3757 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3757)
		} // end switch yys3757
	} // end for yyj3757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3761 int
	var yyb3761 bool
	var yyhl3761 bool = l >= 0
	yyj3761++
	if yyhl3761 {
		yyb3761 = yyj3761 > l
	} else {
		yyb3761 = r.CheckBreak()
	}
	if yyb3761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3761++
	if yyhl3761 {
		yyb3761 = yyj3761 > l
	} else {
		yyb3761 = r.CheckBreak()
	}
	if yyb3761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3761++
	if yyhl3761 {
		yyb3761 = yyj3761 > l
	} else {
		yyb3761 = r.CheckBreak()
	}
	if yyb3761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3761++
		if yyhl3761 {
			yyb3761 = yyj3761 > l
		} else {
			yyb3761 = r.CheckBreak()
		}
		if yyb3761 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3761-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3765 := z.EncBinary()
		_ = yym3765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3766 := !z.EncBinary()
			yy2arr3766 := z.EncBasicHandle().StructToArray
			var yyq3766 [3]bool
			_, _, _ = yysep3766, yyq3766, yy2arr3766
			const yyr3766 bool = false
			yyq3766[0] = x.Kind != ""
			yyq3766[1] = x.APIVersion != ""
			yyq3766[2] = x.Path != ""
			var yynn3766 int
			if yyr3766 || yy2arr3766 {
				r.EncodeArrayStart(3)
			} else {
				yynn3766 = 0
				for _, b := range yyq3766 {
					if b {
						yynn3766++
					}
				}
				r.EncodeMapStart(yynn3766)
				yynn3766 = 0
			}
			if yyr3766 || yy2arr3766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3766[0] {
					yym3768 := z.EncBinary()
					_ = yym3768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3766[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3766 || yy2arr3766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3766[1] {
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3766[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3766 || yy2arr3766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3766[2] {
					yym3774 := z.EncBinary()
					_ = yym3774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3766[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3766 || yy2arr3766 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3776 := z.DecBinary()
	_ = yym3776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3777 := r.ContainerType()
		if yyct3777 == codecSelferValueTypeMap1234 {
			yyl3777 := r.ReadMapStart()
			if yyl3777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3777, d)
			}
		} else if yyct3777 == codecSelferValueTypeArray1234 {
			yyl3777 := r.ReadArrayStart()
			if yyl3777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3778Slc
	var yyhl3778 bool = l >= 0
	for yyj3778 := 0; ; yyj3778++ {
		if yyhl3778 {
			if yyj3778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3778Slc = r.DecodeBytes(yys3778Slc, true, true)
		yys3778 := string(yys3778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3778 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3778)
		} // end switch yys3778
	} // end for yyj3778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3782 int
	var yyb3782 bool
	var yyhl3782 bool = l >= 0
	yyj3782++
	if yyhl3782 {
		yyb3782 = yyj3782 > l
	} else {
		yyb3782 = r.CheckBreak()
	}
	if yyb3782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3782++
	if yyhl3782 {
		yyb3782 = yyj3782 > l
	} else {
		yyb3782 = r.CheckBreak()
	}
	if yyb3782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3782++
	if yyhl3782 {
		yyb3782 = yyj3782 > l
	} else {
		yyb3782 = r.CheckBreak()
	}
	if yyb3782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3782++
		if yyhl3782 {
			yyb3782 = yyj3782 > l
		} else {
			yyb3782 = r.CheckBreak()
		}
		if yyb3782 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3782-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3786 := z.EncBinary()
		_ = yym3786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3787 := !z.EncBinary()
			yy2arr3787 := z.EncBasicHandle().StructToArray
			var yyq3787 [5]bool
			_, _, _ = yysep3787, yyq3787, yy2arr3787
			const yyr3787 bool = false
			yyq3787[4] = x.Controller != nil
			var yynn3787 int
			if yyr3787 || yy2arr3787 {
				r.EncodeArrayStart(5)
			} else {
				yynn3787 = 4
				for _, b := range yyq3787 {
					if b {
						yynn3787++
					}
				}
				r.EncodeMapStart(yynn3787)
				yynn3787 = 0
			}
			if yyr3787 || yy2arr3787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3789 := z.EncBinary()
				_ = yym3789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3790 := z.EncBinary()
				_ = yym3790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3787 || yy2arr3787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3792 := z.EncBinary()
				_ = yym3792
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3793 := z.EncBinary()
				_ = yym3793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3787 || yy2arr3787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3795 := z.EncBinary()
				_ = yym3795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3796 := z.EncBinary()
				_ = yym3796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3787 || yy2arr3787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3798 := z.EncBinary()
				_ = yym3798
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3799 := z.EncBinary()
				_ = yym3799
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3787 || yy2arr3787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3787[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3801 := *x.Controller
						yym3802 := z.EncBinary()
						_ = yym3802
						if false {
						} else {
							r.EncodeBool(bool(yy3801))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3787[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3803 := *x.Controller
						yym3804 := z.EncBinary()
						_ = yym3804
						if false {
						} else {
							r.EncodeBool(bool(yy3803))
						}
					}
				}
			}
			if yyr3787 || yy2arr3787 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3805 := z.DecBinary()
	_ = yym3805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3806 := r.ContainerType()
		if yyct3806 == codecSelferValueTypeMap1234 {
			yyl3806 := r.ReadMapStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3806, d)
			}
		} else if yyct3806 == codecSelferValueTypeArray1234 {
			yyl3806 := r.ReadArrayStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3807Slc
	var yyhl3807 bool = l >= 0
	for yyj3807 := 0; ; yyj3807++ {
		if yyhl3807 {
			if yyj3807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3807Slc = r.DecodeBytes(yys3807Slc, true, true)
		yys3807 := string(yys3807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3807 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3813 := z.DecBinary()
				_ = yym3813
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3807)
		} // end switch yys3807
	} // end for yyj3807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3814 int
	var yyb3814 bool
	var yyhl3814 bool = l >= 0
	yyj3814++
	if yyhl3814 {
		yyb3814 = yyj3814 > l
	} else {
		yyb3814 = r.CheckBreak()
	}
	if yyb3814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3814++
	if yyhl3814 {
		yyb3814 = yyj3814 > l
	} else {
		yyb3814 = r.CheckBreak()
	}
	if yyb3814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3814++
	if yyhl3814 {
		yyb3814 = yyj3814 > l
	} else {
		yyb3814 = r.CheckBreak()
	}
	if yyb3814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3814++
	if yyhl3814 {
		yyb3814 = yyj3814 > l
	} else {
		yyb3814 = r.CheckBreak()
	}
	if yyb3814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3814++
	if yyhl3814 {
		yyb3814 = yyj3814 > l
	} else {
		yyb3814 = r.CheckBreak()
	}
	if yyb3814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3820 := z.DecBinary()
		_ = yym3820
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3814++
		if yyhl3814 {
			yyb3814 = yyj3814 > l
		} else {
			yyb3814 = r.CheckBreak()
		}
		if yyb3814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3821 := z.EncBinary()
		_ = yym3821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3822 := !z.EncBinary()
			yy2arr3822 := z.EncBasicHandle().StructToArray
			var yyq3822 [7]bool
			_, _, _ = yysep3822, yyq3822, yy2arr3822
			const yyr3822 bool = false
			yyq3822[0] = x.Kind != ""
			yyq3822[1] = x.Namespace != ""
			yyq3822[2] = x.Name != ""
			yyq3822[3] = x.UID != ""
			yyq3822[4] = x.APIVersion != ""
			yyq3822[5] = x.ResourceVersion != ""
			yyq3822[6] = x.FieldPath != ""
			var yynn3822 int
			if yyr3822 || yy2arr3822 {
				r.EncodeArrayStart(7)
			} else {
				yynn3822 = 0
				for _, b := range yyq3822 {
					if b {
						yynn3822++
					}
				}
				r.EncodeMapStart(yynn3822)
				yynn3822 = 0
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[0] {
					yym3824 := z.EncBinary()
					_ = yym3824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3825 := z.EncBinary()
					_ = yym3825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[1] {
					yym3827 := z.EncBinary()
					_ = yym3827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3828 := z.EncBinary()
					_ = yym3828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[2] {
					yym3830 := z.EncBinary()
					_ = yym3830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3831 := z.EncBinary()
					_ = yym3831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[3] {
					yym3833 := z.EncBinary()
					_ = yym3833
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[4] {
					yym3836 := z.EncBinary()
					_ = yym3836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3837 := z.EncBinary()
					_ = yym3837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[5] {
					yym3839 := z.EncBinary()
					_ = yym3839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3840 := z.EncBinary()
					_ = yym3840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[6] {
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3844 := z.DecBinary()
	_ = yym3844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3845 := r.ContainerType()
		if yyct3845 == codecSelferValueTypeMap1234 {
			yyl3845 := r.ReadMapStart()
			if yyl3845 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3845, d)
			}
		} else if yyct3845 == codecSelferValueTypeArray1234 {
			yyl3845 := r.ReadArrayStart()
			if yyl3845 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3845, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3846Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3846Slc
	var yyhl3846 bool = l >= 0
	for yyj3846 := 0; ; yyj3846++ {
		if yyhl3846 {
			if yyj3846 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3846Slc = r.DecodeBytes(yys3846Slc, true, true)
		yys3846 := string(yys3846Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3846 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3846)
		} // end switch yys3846
	} // end for yyj3846
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3854 int
	var yyb3854 bool
	var yyhl3854 bool = l >= 0
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3854++
	if yyhl3854 {
		yyb3854 = yyj3854 > l
	} else {
		yyb3854 = r.CheckBreak()
	}
	if yyb3854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3854++
		if yyhl3854 {
			yyb3854 = yyj3854 > l
		} else {
			yyb3854 = r.CheckBreak()
		}
		if yyb3854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3862 := z.EncBinary()
		_ = yym3862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3863 := !z.EncBinary()
			yy2arr3863 := z.EncBasicHandle().StructToArray
			var yyq3863 [1]bool
			_, _, _ = yysep3863, yyq3863, yy2arr3863
			const yyr3863 bool = false
			yyq3863[0] = x.Name != ""
			var yynn3863 int
			if yyr3863 || yy2arr3863 {
				r.EncodeArrayStart(1)
			} else {
				yynn3863 = 0
				for _, b := range yyq3863 {
					if b {
						yynn3863++
					}
				}
				r.EncodeMapStart(yynn3863)
				yynn3863 = 0
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[0] {
					yym3865 := z.EncBinary()
					_ = yym3865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3863[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3867 := z.DecBinary()
	_ = yym3867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3868 := r.ContainerType()
		if yyct3868 == codecSelferValueTypeMap1234 {
			yyl3868 := r.ReadMapStart()
			if yyl3868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3868, d)
			}
		} else if yyct3868 == codecSelferValueTypeArray1234 {
			yyl3868 := r.ReadArrayStart()
			if yyl3868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3869Slc
	var yyhl3869 bool = l >= 0
	for yyj3869 := 0; ; yyj3869++ {
		if yyhl3869 {
			if yyj3869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3869Slc = r.DecodeBytes(yys3869Slc, true, true)
		yys3869 := string(yys3869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3869 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3869)
		} // end switch yys3869
	} // end for yyj3869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3871 int
	var yyb3871 bool
	var yyhl3871 bool = l >= 0
	yyj3871++
	if yyhl3871 {
		yyb3871 = yyj3871 > l
	} else {
		yyb3871 = r.CheckBreak()
	}
	if yyb3871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3871++
		if yyhl3871 {
			yyb3871 = yyj3871 > l
		} else {
			yyb3871 = r.CheckBreak()
		}
		if yyb3871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3873 := z.EncBinary()
		_ = yym3873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3874 := !z.EncBinary()
			yy2arr3874 := z.EncBasicHandle().StructToArray
			var yyq3874 [3]bool
			_, _, _ = yysep3874, yyq3874, yy2arr3874
			const yyr3874 bool = false
			yyq3874[0] = x.Kind != ""
			yyq3874[1] = x.APIVersion != ""
			yyq3874[2] = true
			var yynn3874 int
			if yyr3874 || yy2arr3874 {
				r.EncodeArrayStart(3)
			} else {
				yynn3874 = 0
				for _, b := range yyq3874 {
					if b {
						yynn3874++
					}
				}
				r.EncodeMapStart(yynn3874)
				yynn3874 = 0
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3874[0] {
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3874[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3874[1] {
					yym3879 := z.EncBinary()
					_ = yym3879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3874[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3874[2] {
					yy3882 := &x.Reference
					yy3882.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3874[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3883 := &x.Reference
					yy3883.CodecEncodeSelf(e)
				}
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3884 := z.DecBinary()
	_ = yym3884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3885 := r.ContainerType()
		if yyct3885 == codecSelferValueTypeMap1234 {
			yyl3885 := r.ReadMapStart()
			if yyl3885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3885, d)
			}
		} else if yyct3885 == codecSelferValueTypeArray1234 {
			yyl3885 := r.ReadArrayStart()
			if yyl3885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3886Slc
	var yyhl3886 bool = l >= 0
	for yyj3886 := 0; ; yyj3886++ {
		if yyhl3886 {
			if yyj3886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3886Slc = r.DecodeBytes(yys3886Slc, true, true)
		yys3886 := string(yys3886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3886 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3889 := &x.Reference
				yyv3889.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3886)
		} // end switch yys3886
	} // end for yyj3886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3890 int
	var yyb3890 bool
	var yyhl3890 bool = l >= 0
	yyj3890++
	if yyhl3890 {
		yyb3890 = yyj3890 > l
	} else {
		yyb3890 = r.CheckBreak()
	}
	if yyb3890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3890++
	if yyhl3890 {
		yyb3890 = yyj3890 > l
	} else {
		yyb3890 = r.CheckBreak()
	}
	if yyb3890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3890++
	if yyhl3890 {
		yyb3890 = yyj3890 > l
	} else {
		yyb3890 = r.CheckBreak()
	}
	if yyb3890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3893 := &x.Reference
		yyv3893.CodecDecodeSelf(d)
	}
	for {
		yyj3890++
		if yyhl3890 {
			yyb3890 = yyj3890 > l
		} else {
			yyb3890 = r.CheckBreak()
		}
		if yyb3890 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3890-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3894 := z.EncBinary()
		_ = yym3894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3895 := !z.EncBinary()
			yy2arr3895 := z.EncBasicHandle().StructToArray
			var yyq3895 [2]bool
			_, _, _ = yysep3895, yyq3895, yy2arr3895
			const yyr3895 bool = false
			yyq3895[0] = x.Component != ""
			yyq3895[1] = x.Host != ""
			var yynn3895 int
			if yyr3895 || yy2arr3895 {
				r.EncodeArrayStart(2)
			} else {
				yynn3895 = 0
				for _, b := range yyq3895 {
					if b {
						yynn3895++
					}
				}
				r.EncodeMapStart(yynn3895)
				yynn3895 = 0
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[0] {
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[1] {
					yym3900 := z.EncBinary()
					_ = yym3900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3895[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3902 := z.DecBinary()
	_ = yym3902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3903 := r.ContainerType()
		if yyct3903 == codecSelferValueTypeMap1234 {
			yyl3903 := r.ReadMapStart()
			if yyl3903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3903, d)
			}
		} else if yyct3903 == codecSelferValueTypeArray1234 {
			yyl3903 := r.ReadArrayStart()
			if yyl3903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3904Slc
	var yyhl3904 bool = l >= 0
	for yyj3904 := 0; ; yyj3904++ {
		if yyhl3904 {
			if yyj3904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3904Slc = r.DecodeBytes(yys3904Slc, true, true)
		yys3904 := string(yys3904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3904 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3904)
		} // end switch yys3904
	} // end for yyj3904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3907 int
	var yyb3907 bool
	var yyhl3907 bool = l >= 0
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3907++
		if yyhl3907 {
			yyb3907 = yyj3907 > l
		} else {
			yyb3907 = r.CheckBreak()
		}
		if yyb3907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3910 := z.EncBinary()
		_ = yym3910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3911 := !z.EncBinary()
			yy2arr3911 := z.EncBasicHandle().StructToArray
			var yyq3911 [11]bool
			_, _, _ = yysep3911, yyq3911, yy2arr3911
			const yyr3911 bool = false
			yyq3911[0] = x.Kind != ""
			yyq3911[1] = x.APIVersion != ""
			yyq3911[4] = x.Reason != ""
			yyq3911[5] = x.Message != ""
			yyq3911[6] = true
			yyq3911[7] = true
			yyq3911[8] = true
			yyq3911[9] = x.Count != 0
			yyq3911[10] = x.Type != ""
			var yynn3911 int
			if yyr3911 || yy2arr3911 {
				r.EncodeArrayStart(11)
			} else {
				yynn3911 = 2
				for _, b := range yyq3911 {
					if b {
						yynn3911++
					}
				}
				r.EncodeMapStart(yynn3911)
				yynn3911 = 0
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[0] {
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3911[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[1] {
					yym3916 := z.EncBinary()
					_ = yym3916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3911[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3917 := z.EncBinary()
					_ = yym3917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3919 := &x.ObjectMeta
				yy3919.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3920 := &x.ObjectMeta
				yy3920.CodecEncodeSelf(e)
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3922 := &x.InvolvedObject
				yy3922.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3923 := &x.InvolvedObject
				yy3923.CodecEncodeSelf(e)
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[4] {
					yym3925 := z.EncBinary()
					_ = yym3925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3911[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[5] {
					yym3928 := z.EncBinary()
					_ = yym3928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3911[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3929 := z.EncBinary()
					_ = yym3929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[6] {
					yy3931 := &x.Source
					yy3931.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3911[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3932 := &x.Source
					yy3932.CodecEncodeSelf(e)
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[7] {
					yy3934 := &x.FirstTimestamp
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3934) {
					} else if yym3935 {
						z.EncBinaryMarshal(yy3934)
					} else if !yym3935 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3934)
					} else {
						z.EncFallback(yy3934)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3911[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3936 := &x.FirstTimestamp
					yym3937 := z.EncBinary()
					_ = yym3937
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3936) {
					} else if yym3937 {
						z.EncBinaryMarshal(yy3936)
					} else if !yym3937 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3936)
					} else {
						z.EncFallback(yy3936)
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[8] {
					yy3939 := &x.LastTimestamp
					yym3940 := z.EncBinary()
					_ = yym3940
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3939) {
					} else if yym3940 {
						z.EncBinaryMarshal(yy3939)
					} else if !yym3940 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3939)
					} else {
						z.EncFallback(yy3939)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3911[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3941 := &x.LastTimestamp
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3941) {
					} else if yym3942 {
						z.EncBinaryMarshal(yy3941)
					} else if !yym3942 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3941)
					} else {
						z.EncFallback(yy3941)
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[9] {
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3911[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3911[10] {
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3911[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3948 := z.EncBinary()
					_ = yym3948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3911 || yy2arr3911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3949 := z.DecBinary()
	_ = yym3949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3950 := r.ContainerType()
		if yyct3950 == codecSelferValueTypeMap1234 {
			yyl3950 := r.ReadMapStart()
			if yyl3950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3950, d)
			}
		} else if yyct3950 == codecSelferValueTypeArray1234 {
			yyl3950 := r.ReadArrayStart()
			if yyl3950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3951Slc
	var yyhl3951 bool = l >= 0
	for yyj3951 := 0; ; yyj3951++ {
		if yyhl3951 {
			if yyj3951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3951Slc = r.DecodeBytes(yys3951Slc, true, true)
		yys3951 := string(yys3951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3951 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3954 := &x.ObjectMeta
				yyv3954.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3955 := &x.InvolvedObject
				yyv3955.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3958 := &x.Source
				yyv3958.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3959 := &x.FirstTimestamp
				yym3960 := z.DecBinary()
				_ = yym3960
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3959) {
				} else if yym3960 {
					z.DecBinaryUnmarshal(yyv3959)
				} else if !yym3960 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3959)
				} else {
					z.DecFallback(yyv3959, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3961 := &x.LastTimestamp
				yym3962 := z.DecBinary()
				_ = yym3962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3961) {
				} else if yym3962 {
					z.DecBinaryUnmarshal(yyv3961)
				} else if !yym3962 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3961)
				} else {
					z.DecFallback(yyv3961, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3951)
		} // end switch yys3951
	} // end for yyj3951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3965 int
	var yyb3965 bool
	var yyhl3965 bool = l >= 0
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3968 := &x.ObjectMeta
		yyv3968.CodecDecodeSelf(d)
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3969 := &x.InvolvedObject
		yyv3969.CodecDecodeSelf(d)
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3972 := &x.Source
		yyv3972.CodecDecodeSelf(d)
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3973 := &x.FirstTimestamp
		yym3974 := z.DecBinary()
		_ = yym3974
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3973) {
		} else if yym3974 {
			z.DecBinaryUnmarshal(yyv3973)
		} else if !yym3974 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3973)
		} else {
			z.DecFallback(yyv3973, false)
		}
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3975 := &x.LastTimestamp
		yym3976 := z.DecBinary()
		_ = yym3976
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3975) {
		} else if yym3976 {
			z.DecBinaryUnmarshal(yyv3975)
		} else if !yym3976 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3975)
		} else {
			z.DecFallback(yyv3975, false)
		}
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3965++
		if yyhl3965 {
			yyb3965 = yyj3965 > l
		} else {
			yyb3965 = r.CheckBreak()
		}
		if yyb3965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3979 := z.EncBinary()
		_ = yym3979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3980 := !z.EncBinary()
			yy2arr3980 := z.EncBasicHandle().StructToArray
			var yyq3980 [4]bool
			_, _, _ = yysep3980, yyq3980, yy2arr3980
			const yyr3980 bool = false
			yyq3980[0] = x.Kind != ""
			yyq3980[1] = x.APIVersion != ""
			yyq3980[2] = true
			var yynn3980 int
			if yyr3980 || yy2arr3980 {
				r.EncodeArrayStart(4)
			} else {
				yynn3980 = 1
				for _, b := range yyq3980 {
					if b {
						yynn3980++
					}
				}
				r.EncodeMapStart(yynn3980)
				yynn3980 = 0
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3980[0] {
					yym3982 := z.EncBinary()
					_ = yym3982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3980[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3983 := z.EncBinary()
					_ = yym3983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3980[1] {
					yym3985 := z.EncBinary()
					_ = yym3985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3980[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3986 := z.EncBinary()
					_ = yym3986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3980[2] {
					yy3988 := &x.ListMeta
					yym3989 := z.EncBinary()
					_ = yym3989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3988) {
					} else {
						z.EncFallback(yy3988)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3980[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3990 := &x.ListMeta
					yym3991 := z.EncBinary()
					_ = yym3991
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3990) {
					} else {
						z.EncFallback(yy3990)
					}
				}
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3993 := z.EncBinary()
					_ = yym3993
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3994 := z.EncBinary()
					_ = yym3994
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3995 := z.DecBinary()
	_ = yym3995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3996 := r.ContainerType()
		if yyct3996 == codecSelferValueTypeMap1234 {
			yyl3996 := r.ReadMapStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3996, d)
			}
		} else if yyct3996 == codecSelferValueTypeArray1234 {
			yyl3996 := r.ReadArrayStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3997Slc
	var yyhl3997 bool = l >= 0
	for yyj3997 := 0; ; yyj3997++ {
		if yyhl3997 {
			if yyj3997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3997Slc = r.DecodeBytes(yys3997Slc, true, true)
		yys3997 := string(yys3997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3997 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4000 := &x.ListMeta
				yym4001 := z.DecBinary()
				_ = yym4001
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4000) {
				} else {
					z.DecFallback(yyv4000, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4002 := &x.Items
				yym4003 := z.DecBinary()
				_ = yym4003
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4002), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3997)
		} // end switch yys3997
	} // end for yyj3997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4004 int
	var yyb4004 bool
	var yyhl4004 bool = l >= 0
	yyj4004++
	if yyhl4004 {
		yyb4004 = yyj4004 > l
	} else {
		yyb4004 = r.CheckBreak()
	}
	if yyb4004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4004++
	if yyhl4004 {
		yyb4004 = yyj4004 > l
	} else {
		yyb4004 = r.CheckBreak()
	}
	if yyb4004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4004++
	if yyhl4004 {
		yyb4004 = yyj4004 > l
	} else {
		yyb4004 = r.CheckBreak()
	}
	if yyb4004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4007 := &x.ListMeta
		yym4008 := z.DecBinary()
		_ = yym4008
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4007) {
		} else {
			z.DecFallback(yyv4007, false)
		}
	}
	yyj4004++
	if yyhl4004 {
		yyb4004 = yyj4004 > l
	} else {
		yyb4004 = r.CheckBreak()
	}
	if yyb4004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4009 := &x.Items
		yym4010 := z.DecBinary()
		_ = yym4010
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4009), d)
		}
	}
	for {
		yyj4004++
		if yyhl4004 {
			yyb4004 = yyj4004 > l
		} else {
			yyb4004 = r.CheckBreak()
		}
		if yyb4004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4011 := z.EncBinary()
		_ = yym4011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4012 := !z.EncBinary()
			yy2arr4012 := z.EncBasicHandle().StructToArray
			var yyq4012 [4]bool
			_, _, _ = yysep4012, yyq4012, yy2arr4012
			const yyr4012 bool = false
			yyq4012[0] = x.Kind != ""
			yyq4012[1] = x.APIVersion != ""
			yyq4012[2] = true
			var yynn4012 int
			if yyr4012 || yy2arr4012 {
				r.EncodeArrayStart(4)
			} else {
				yynn4012 = 1
				for _, b := range yyq4012 {
					if b {
						yynn4012++
					}
				}
				r.EncodeMapStart(yynn4012)
				yynn4012 = 0
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[0] {
					yym4014 := z.EncBinary()
					_ = yym4014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4012[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[1] {
					yym4017 := z.EncBinary()
					_ = yym4017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4012[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[2] {
					yy4020 := &x.ListMeta
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4020) {
					} else {
						z.EncFallback(yy4020)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4012[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4022 := &x.ListMeta
					yym4023 := z.EncBinary()
					_ = yym4023
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4022) {
					} else {
						z.EncFallback(yy4022)
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4025 := z.EncBinary()
					_ = yym4025
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4026 := z.EncBinary()
					_ = yym4026
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4027 := z.DecBinary()
	_ = yym4027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4028 := r.ContainerType()
		if yyct4028 == codecSelferValueTypeMap1234 {
			yyl4028 := r.ReadMapStart()
			if yyl4028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4028, d)
			}
		} else if yyct4028 == codecSelferValueTypeArray1234 {
			yyl4028 := r.ReadArrayStart()
			if yyl4028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4029Slc
	var yyhl4029 bool = l >= 0
	for yyj4029 := 0; ; yyj4029++ {
		if yyhl4029 {
			if yyj4029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4029Slc = r.DecodeBytes(yys4029Slc, true, true)
		yys4029 := string(yys4029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4029 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4032 := &x.ListMeta
				yym4033 := z.DecBinary()
				_ = yym4033
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4032) {
				} else {
					z.DecFallback(yyv4032, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4034 := &x.Items
				yym4035 := z.DecBinary()
				_ = yym4035
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4034), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4029)
		} // end switch yys4029
	} // end for yyj4029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4036 int
	var yyb4036 bool
	var yyhl4036 bool = l >= 0
	yyj4036++
	if yyhl4036 {
		yyb4036 = yyj4036 > l
	} else {
		yyb4036 = r.CheckBreak()
	}
	if yyb4036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4036++
	if yyhl4036 {
		yyb4036 = yyj4036 > l
	} else {
		yyb4036 = r.CheckBreak()
	}
	if yyb4036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4036++
	if yyhl4036 {
		yyb4036 = yyj4036 > l
	} else {
		yyb4036 = r.CheckBreak()
	}
	if yyb4036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4039 := &x.ListMeta
		yym4040 := z.DecBinary()
		_ = yym4040
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4039) {
		} else {
			z.DecFallback(yyv4039, false)
		}
	}
	yyj4036++
	if yyhl4036 {
		yyb4036 = yyj4036 > l
	} else {
		yyb4036 = r.CheckBreak()
	}
	if yyb4036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4041 := &x.Items
		yym4042 := z.DecBinary()
		_ = yym4042
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4041), d)
		}
	}
	for {
		yyj4036++
		if yyhl4036 {
			yyb4036 = yyj4036 > l
		} else {
			yyb4036 = r.CheckBreak()
		}
		if yyb4036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4043 := z.EncBinary()
	_ = yym4043
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4044 := z.DecBinary()
	_ = yym4044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4045 := z.EncBinary()
		_ = yym4045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4046 := !z.EncBinary()
			yy2arr4046 := z.EncBasicHandle().StructToArray
			var yyq4046 [6]bool
			_, _, _ = yysep4046, yyq4046, yy2arr4046
			const yyr4046 bool = false
			yyq4046[0] = x.Type != ""
			yyq4046[1] = len(x.Max) != 0
			yyq4046[2] = len(x.Min) != 0
			yyq4046[3] = len(x.Default) != 0
			yyq4046[4] = len(x.DefaultRequest) != 0
			yyq4046[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4046 int
			if yyr4046 || yy2arr4046 {
				r.EncodeArrayStart(6)
			} else {
				yynn4046 = 0
				for _, b := range yyq4046 {
					if b {
						yynn4046++
					}
				}
				r.EncodeMapStart(yynn4046)
				yynn4046 = 0
			}
			if yyr4046 || yy2arr4046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4046[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4046[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4046 || yy2arr4046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4046[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4046[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4046 || yy2arr4046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4046[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4046[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4046 || yy2arr4046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4046[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4046[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4046 || yy2arr4046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4046[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4046[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4046 || yy2arr4046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4046[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4046[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4046 || yy2arr4046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4053 := z.DecBinary()
	_ = yym4053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4054 := r.ContainerType()
		if yyct4054 == codecSelferValueTypeMap1234 {
			yyl4054 := r.ReadMapStart()
			if yyl4054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4054, d)
			}
		} else if yyct4054 == codecSelferValueTypeArray1234 {
			yyl4054 := r.ReadArrayStart()
			if yyl4054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4055Slc
	var yyhl4055 bool = l >= 0
	for yyj4055 := 0; ; yyj4055++ {
		if yyhl4055 {
			if yyj4055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4055Slc = r.DecodeBytes(yys4055Slc, true, true)
		yys4055 := string(yys4055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4055 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4057 := &x.Max
				yyv4057.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4058 := &x.Min
				yyv4058.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4059 := &x.Default
				yyv4059.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4060 := &x.DefaultRequest
				yyv4060.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4061 := &x.MaxLimitRequestRatio
				yyv4061.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4055)
		} // end switch yys4055
	} // end for yyj4055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4062 int
	var yyb4062 bool
	var yyhl4062 bool = l >= 0
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4064 := &x.Max
		yyv4064.CodecDecodeSelf(d)
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4065 := &x.Min
		yyv4065.CodecDecodeSelf(d)
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4066 := &x.Default
		yyv4066.CodecDecodeSelf(d)
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4067 := &x.DefaultRequest
		yyv4067.CodecDecodeSelf(d)
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4068 := &x.MaxLimitRequestRatio
		yyv4068.CodecDecodeSelf(d)
	}
	for {
		yyj4062++
		if yyhl4062 {
			yyb4062 = yyj4062 > l
		} else {
			yyb4062 = r.CheckBreak()
		}
		if yyb4062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4069 := z.EncBinary()
		_ = yym4069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4070 := !z.EncBinary()
			yy2arr4070 := z.EncBasicHandle().StructToArray
			var yyq4070 [1]bool
			_, _, _ = yysep4070, yyq4070, yy2arr4070
			const yyr4070 bool = false
			var yynn4070 int
			if yyr4070 || yy2arr4070 {
				r.EncodeArrayStart(1)
			} else {
				yynn4070 = 1
				for _, b := range yyq4070 {
					if b {
						yynn4070++
					}
				}
				r.EncodeMapStart(yynn4070)
				yynn4070 = 0
			}
			if yyr4070 || yy2arr4070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4072 := z.EncBinary()
					_ = yym4072
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4073 := z.EncBinary()
					_ = yym4073
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4070 || yy2arr4070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4074 := z.DecBinary()
	_ = yym4074
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4075 := r.ContainerType()
		if yyct4075 == codecSelferValueTypeMap1234 {
			yyl4075 := r.ReadMapStart()
			if yyl4075 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4075, d)
			}
		} else if yyct4075 == codecSelferValueTypeArray1234 {
			yyl4075 := r.ReadArrayStart()
			if yyl4075 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4075, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4076Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4076Slc
	var yyhl4076 bool = l >= 0
	for yyj4076 := 0; ; yyj4076++ {
		if yyhl4076 {
			if yyj4076 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4076Slc = r.DecodeBytes(yys4076Slc, true, true)
		yys4076 := string(yys4076Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4076 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4077 := &x.Limits
				yym4078 := z.DecBinary()
				_ = yym4078
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4077), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4076)
		} // end switch yys4076
	} // end for yyj4076
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4079 int
	var yyb4079 bool
	var yyhl4079 bool = l >= 0
	yyj4079++
	if yyhl4079 {
		yyb4079 = yyj4079 > l
	} else {
		yyb4079 = r.CheckBreak()
	}
	if yyb4079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4080 := &x.Limits
		yym4081 := z.DecBinary()
		_ = yym4081
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4080), d)
		}
	}
	for {
		yyj4079++
		if yyhl4079 {
			yyb4079 = yyj4079 > l
		} else {
			yyb4079 = r.CheckBreak()
		}
		if yyb4079 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4079-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4082 := z.EncBinary()
		_ = yym4082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4083 := !z.EncBinary()
			yy2arr4083 := z.EncBasicHandle().StructToArray
			var yyq4083 [4]bool
			_, _, _ = yysep4083, yyq4083, yy2arr4083
			const yyr4083 bool = false
			yyq4083[0] = x.Kind != ""
			yyq4083[1] = x.APIVersion != ""
			yyq4083[2] = true
			yyq4083[3] = true
			var yynn4083 int
			if yyr4083 || yy2arr4083 {
				r.EncodeArrayStart(4)
			} else {
				yynn4083 = 0
				for _, b := range yyq4083 {
					if b {
						yynn4083++
					}
				}
				r.EncodeMapStart(yynn4083)
				yynn4083 = 0
			}
			if yyr4083 || yy2arr4083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4083[0] {
					yym4085 := z.EncBinary()
					_ = yym4085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4083[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4086 := z.EncBinary()
					_ = yym4086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4083 || yy2arr4083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4083[1] {
					yym4088 := z.EncBinary()
					_ = yym4088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4083[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4089 := z.EncBinary()
					_ = yym4089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4083 || yy2arr4083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4083[2] {
					yy4091 := &x.ObjectMeta
					yy4091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4083[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4092 := &x.ObjectMeta
					yy4092.CodecEncodeSelf(e)
				}
			}
			if yyr4083 || yy2arr4083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4083[3] {
					yy4094 := &x.Spec
					yy4094.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4083[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4095 := &x.Spec
					yy4095.CodecEncodeSelf(e)
				}
			}
			if yyr4083 || yy2arr4083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4096 := z.DecBinary()
	_ = yym4096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4097 := r.ContainerType()
		if yyct4097 == codecSelferValueTypeMap1234 {
			yyl4097 := r.ReadMapStart()
			if yyl4097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4097, d)
			}
		} else if yyct4097 == codecSelferValueTypeArray1234 {
			yyl4097 := r.ReadArrayStart()
			if yyl4097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4098Slc
	var yyhl4098 bool = l >= 0
	for yyj4098 := 0; ; yyj4098++ {
		if yyhl4098 {
			if yyj4098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4098Slc = r.DecodeBytes(yys4098Slc, true, true)
		yys4098 := string(yys4098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4098 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4101 := &x.ObjectMeta
				yyv4101.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4102 := &x.Spec
				yyv4102.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4098)
		} // end switch yys4098
	} // end for yyj4098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4103 int
	var yyb4103 bool
	var yyhl4103 bool = l >= 0
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4106 := &x.ObjectMeta
		yyv4106.CodecDecodeSelf(d)
	}
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4107 := &x.Spec
		yyv4107.CodecDecodeSelf(d)
	}
	for {
		yyj4103++
		if yyhl4103 {
			yyb4103 = yyj4103 > l
		} else {
			yyb4103 = r.CheckBreak()
		}
		if yyb4103 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4103-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4108 := z.EncBinary()
		_ = yym4108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4109 := !z.EncBinary()
			yy2arr4109 := z.EncBasicHandle().StructToArray
			var yyq4109 [4]bool
			_, _, _ = yysep4109, yyq4109, yy2arr4109
			const yyr4109 bool = false
			yyq4109[0] = x.Kind != ""
			yyq4109[1] = x.APIVersion != ""
			yyq4109[2] = true
			var yynn4109 int
			if yyr4109 || yy2arr4109 {
				r.EncodeArrayStart(4)
			} else {
				yynn4109 = 1
				for _, b := range yyq4109 {
					if b {
						yynn4109++
					}
				}
				r.EncodeMapStart(yynn4109)
				yynn4109 = 0
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[0] {
					yym4111 := z.EncBinary()
					_ = yym4111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[1] {
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4115 := z.EncBinary()
					_ = yym4115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[2] {
					yy4117 := &x.ListMeta
					yym4118 := z.EncBinary()
					_ = yym4118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4117) {
					} else {
						z.EncFallback(yy4117)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4109[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4119 := &x.ListMeta
					yym4120 := z.EncBinary()
					_ = yym4120
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4119) {
					} else {
						z.EncFallback(yy4119)
					}
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4122 := z.EncBinary()
					_ = yym4122
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4123 := z.EncBinary()
					_ = yym4123
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4124 := z.DecBinary()
	_ = yym4124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4125 := r.ContainerType()
		if yyct4125 == codecSelferValueTypeMap1234 {
			yyl4125 := r.ReadMapStart()
			if yyl4125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4125, d)
			}
		} else if yyct4125 == codecSelferValueTypeArray1234 {
			yyl4125 := r.ReadArrayStart()
			if yyl4125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4126Slc
	var yyhl4126 bool = l >= 0
	for yyj4126 := 0; ; yyj4126++ {
		if yyhl4126 {
			if yyj4126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4126Slc = r.DecodeBytes(yys4126Slc, true, true)
		yys4126 := string(yys4126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4126 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4129 := &x.ListMeta
				yym4130 := z.DecBinary()
				_ = yym4130
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4129) {
				} else {
					z.DecFallback(yyv4129, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4131 := &x.Items
				yym4132 := z.DecBinary()
				_ = yym4132
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4131), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4126)
		} // end switch yys4126
	} // end for yyj4126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4133 int
	var yyb4133 bool
	var yyhl4133 bool = l >= 0
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4136 := &x.ListMeta
		yym4137 := z.DecBinary()
		_ = yym4137
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4136) {
		} else {
			z.DecFallback(yyv4136, false)
		}
	}
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4138 := &x.Items
		yym4139 := z.DecBinary()
		_ = yym4139
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4138), d)
		}
	}
	for {
		yyj4133++
		if yyhl4133 {
			yyb4133 = yyj4133 > l
		} else {
			yyb4133 = r.CheckBreak()
		}
		if yyb4133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4140 := z.EncBinary()
	_ = yym4140
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4141 := z.DecBinary()
	_ = yym4141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4142 := z.EncBinary()
		_ = yym4142
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4143 := !z.EncBinary()
			yy2arr4143 := z.EncBasicHandle().StructToArray
			var yyq4143 [2]bool
			_, _, _ = yysep4143, yyq4143, yy2arr4143
			const yyr4143 bool = false
			yyq4143[0] = len(x.Hard) != 0
			yyq4143[1] = len(x.Scopes) != 0
			var yynn4143 int
			if yyr4143 || yy2arr4143 {
				r.EncodeArrayStart(2)
			} else {
				yynn4143 = 0
				for _, b := range yyq4143 {
					if b {
						yynn4143++
					}
				}
				r.EncodeMapStart(yynn4143)
				yynn4143 = 0
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4143[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4146 := z.EncBinary()
						_ = yym4146
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4143[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4147 := z.EncBinary()
						_ = yym4147
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4148 := z.DecBinary()
	_ = yym4148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4149 := r.ContainerType()
		if yyct4149 == codecSelferValueTypeMap1234 {
			yyl4149 := r.ReadMapStart()
			if yyl4149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4149, d)
			}
		} else if yyct4149 == codecSelferValueTypeArray1234 {
			yyl4149 := r.ReadArrayStart()
			if yyl4149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4150Slc
	var yyhl4150 bool = l >= 0
	for yyj4150 := 0; ; yyj4150++ {
		if yyhl4150 {
			if yyj4150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4150Slc = r.DecodeBytes(yys4150Slc, true, true)
		yys4150 := string(yys4150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4150 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4151 := &x.Hard
				yyv4151.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4152 := &x.Scopes
				yym4153 := z.DecBinary()
				_ = yym4153
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4152), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4150)
		} // end switch yys4150
	} // end for yyj4150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4154 int
	var yyb4154 bool
	var yyhl4154 bool = l >= 0
	yyj4154++
	if yyhl4154 {
		yyb4154 = yyj4154 > l
	} else {
		yyb4154 = r.CheckBreak()
	}
	if yyb4154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4155 := &x.Hard
		yyv4155.CodecDecodeSelf(d)
	}
	yyj4154++
	if yyhl4154 {
		yyb4154 = yyj4154 > l
	} else {
		yyb4154 = r.CheckBreak()
	}
	if yyb4154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4156 := &x.Scopes
		yym4157 := z.DecBinary()
		_ = yym4157
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4156), d)
		}
	}
	for {
		yyj4154++
		if yyhl4154 {
			yyb4154 = yyj4154 > l
		} else {
			yyb4154 = r.CheckBreak()
		}
		if yyb4154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4158 := z.EncBinary()
		_ = yym4158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4159 := !z.EncBinary()
			yy2arr4159 := z.EncBasicHandle().StructToArray
			var yyq4159 [2]bool
			_, _, _ = yysep4159, yyq4159, yy2arr4159
			const yyr4159 bool = false
			yyq4159[0] = len(x.Hard) != 0
			yyq4159[1] = len(x.Used) != 0
			var yynn4159 int
			if yyr4159 || yy2arr4159 {
				r.EncodeArrayStart(2)
			} else {
				yynn4159 = 0
				for _, b := range yyq4159 {
					if b {
						yynn4159++
					}
				}
				r.EncodeMapStart(yynn4159)
				yynn4159 = 0
			}
			if yyr4159 || yy2arr4159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4159[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4159[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4159 || yy2arr4159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4159[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4159[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4159 || yy2arr4159 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4162 := z.DecBinary()
	_ = yym4162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4163 := r.ContainerType()
		if yyct4163 == codecSelferValueTypeMap1234 {
			yyl4163 := r.ReadMapStart()
			if yyl4163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4163, d)
			}
		} else if yyct4163 == codecSelferValueTypeArray1234 {
			yyl4163 := r.ReadArrayStart()
			if yyl4163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4164Slc
	var yyhl4164 bool = l >= 0
	for yyj4164 := 0; ; yyj4164++ {
		if yyhl4164 {
			if yyj4164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4164Slc = r.DecodeBytes(yys4164Slc, true, true)
		yys4164 := string(yys4164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4164 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4165 := &x.Hard
				yyv4165.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4166 := &x.Used
				yyv4166.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4164)
		} // end switch yys4164
	} // end for yyj4164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4167 int
	var yyb4167 bool
	var yyhl4167 bool = l >= 0
	yyj4167++
	if yyhl4167 {
		yyb4167 = yyj4167 > l
	} else {
		yyb4167 = r.CheckBreak()
	}
	if yyb4167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4168 := &x.Hard
		yyv4168.CodecDecodeSelf(d)
	}
	yyj4167++
	if yyhl4167 {
		yyb4167 = yyj4167 > l
	} else {
		yyb4167 = r.CheckBreak()
	}
	if yyb4167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4169 := &x.Used
		yyv4169.CodecDecodeSelf(d)
	}
	for {
		yyj4167++
		if yyhl4167 {
			yyb4167 = yyj4167 > l
		} else {
			yyb4167 = r.CheckBreak()
		}
		if yyb4167 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4167-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4170 := z.EncBinary()
		_ = yym4170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4171 := !z.EncBinary()
			yy2arr4171 := z.EncBasicHandle().StructToArray
			var yyq4171 [5]bool
			_, _, _ = yysep4171, yyq4171, yy2arr4171
			const yyr4171 bool = false
			yyq4171[0] = x.Kind != ""
			yyq4171[1] = x.APIVersion != ""
			yyq4171[2] = true
			yyq4171[3] = true
			yyq4171[4] = true
			var yynn4171 int
			if yyr4171 || yy2arr4171 {
				r.EncodeArrayStart(5)
			} else {
				yynn4171 = 0
				for _, b := range yyq4171 {
					if b {
						yynn4171++
					}
				}
				r.EncodeMapStart(yynn4171)
				yynn4171 = 0
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4171[0] {
					yym4173 := z.EncBinary()
					_ = yym4173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4171[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4174 := z.EncBinary()
					_ = yym4174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4171[1] {
					yym4176 := z.EncBinary()
					_ = yym4176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4171[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4177 := z.EncBinary()
					_ = yym4177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4171[2] {
					yy4179 := &x.ObjectMeta
					yy4179.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4171[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4180 := &x.ObjectMeta
					yy4180.CodecEncodeSelf(e)
				}
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4171[3] {
					yy4182 := &x.Spec
					yy4182.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4171[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4183 := &x.Spec
					yy4183.CodecEncodeSelf(e)
				}
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4171[4] {
					yy4185 := &x.Status
					yy4185.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4171[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4186 := &x.Status
					yy4186.CodecEncodeSelf(e)
				}
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4187 := z.DecBinary()
	_ = yym4187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4188 := r.ContainerType()
		if yyct4188 == codecSelferValueTypeMap1234 {
			yyl4188 := r.ReadMapStart()
			if yyl4188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4188, d)
			}
		} else if yyct4188 == codecSelferValueTypeArray1234 {
			yyl4188 := r.ReadArrayStart()
			if yyl4188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4189Slc
	var yyhl4189 bool = l >= 0
	for yyj4189 := 0; ; yyj4189++ {
		if yyhl4189 {
			if yyj4189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4189Slc = r.DecodeBytes(yys4189Slc, true, true)
		yys4189 := string(yys4189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4189 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4192 := &x.ObjectMeta
				yyv4192.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4193 := &x.Spec
				yyv4193.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4194 := &x.Status
				yyv4194.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4189)
		} // end switch yys4189
	} // end for yyj4189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4195 int
	var yyb4195 bool
	var yyhl4195 bool = l >= 0
	yyj4195++
	if yyhl4195 {
		yyb4195 = yyj4195 > l
	} else {
		yyb4195 = r.CheckBreak()
	}
	if yyb4195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4195++
	if yyhl4195 {
		yyb4195 = yyj4195 > l
	} else {
		yyb4195 = r.CheckBreak()
	}
	if yyb4195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4195++
	if yyhl4195 {
		yyb4195 = yyj4195 > l
	} else {
		yyb4195 = r.CheckBreak()
	}
	if yyb4195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4198 := &x.ObjectMeta
		yyv4198.CodecDecodeSelf(d)
	}
	yyj4195++
	if yyhl4195 {
		yyb4195 = yyj4195 > l
	} else {
		yyb4195 = r.CheckBreak()
	}
	if yyb4195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4199 := &x.Spec
		yyv4199.CodecDecodeSelf(d)
	}
	yyj4195++
	if yyhl4195 {
		yyb4195 = yyj4195 > l
	} else {
		yyb4195 = r.CheckBreak()
	}
	if yyb4195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4200 := &x.Status
		yyv4200.CodecDecodeSelf(d)
	}
	for {
		yyj4195++
		if yyhl4195 {
			yyb4195 = yyj4195 > l
		} else {
			yyb4195 = r.CheckBreak()
		}
		if yyb4195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4201 := z.EncBinary()
		_ = yym4201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4202 := !z.EncBinary()
			yy2arr4202 := z.EncBasicHandle().StructToArray
			var yyq4202 [4]bool
			_, _, _ = yysep4202, yyq4202, yy2arr4202
			const yyr4202 bool = false
			yyq4202[0] = x.Kind != ""
			yyq4202[1] = x.APIVersion != ""
			yyq4202[2] = true
			var yynn4202 int
			if yyr4202 || yy2arr4202 {
				r.EncodeArrayStart(4)
			} else {
				yynn4202 = 1
				for _, b := range yyq4202 {
					if b {
						yynn4202++
					}
				}
				r.EncodeMapStart(yynn4202)
				yynn4202 = 0
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4202[0] {
					yym4204 := z.EncBinary()
					_ = yym4204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4202[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4202[1] {
					yym4207 := z.EncBinary()
					_ = yym4207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4202[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4208 := z.EncBinary()
					_ = yym4208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4202[2] {
					yy4210 := &x.ListMeta
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4210) {
					} else {
						z.EncFallback(yy4210)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4202[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4212 := &x.ListMeta
					yym4213 := z.EncBinary()
					_ = yym4213
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4212) {
					} else {
						z.EncFallback(yy4212)
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4215 := z.EncBinary()
					_ = yym4215
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4216 := z.EncBinary()
					_ = yym4216
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4202 || yy2arr4202 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4217 := z.DecBinary()
	_ = yym4217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4218 := r.ContainerType()
		if yyct4218 == codecSelferValueTypeMap1234 {
			yyl4218 := r.ReadMapStart()
			if yyl4218 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4218, d)
			}
		} else if yyct4218 == codecSelferValueTypeArray1234 {
			yyl4218 := r.ReadArrayStart()
			if yyl4218 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4219Slc
	var yyhl4219 bool = l >= 0
	for yyj4219 := 0; ; yyj4219++ {
		if yyhl4219 {
			if yyj4219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4219Slc = r.DecodeBytes(yys4219Slc, true, true)
		yys4219 := string(yys4219Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4219 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4222 := &x.ListMeta
				yym4223 := z.DecBinary()
				_ = yym4223
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4222) {
				} else {
					z.DecFallback(yyv4222, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4224 := &x.Items
				yym4225 := z.DecBinary()
				_ = yym4225
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4224), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4219)
		} // end switch yys4219
	} // end for yyj4219
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4226 int
	var yyb4226 bool
	var yyhl4226 bool = l >= 0
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4229 := &x.ListMeta
		yym4230 := z.DecBinary()
		_ = yym4230
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4229) {
		} else {
			z.DecFallback(yyv4229, false)
		}
	}
	yyj4226++
	if yyhl4226 {
		yyb4226 = yyj4226 > l
	} else {
		yyb4226 = r.CheckBreak()
	}
	if yyb4226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4231 := &x.Items
		yym4232 := z.DecBinary()
		_ = yym4232
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4231), d)
		}
	}
	for {
		yyj4226++
		if yyhl4226 {
			yyb4226 = yyj4226 > l
		} else {
			yyb4226 = r.CheckBreak()
		}
		if yyb4226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4233 := z.EncBinary()
		_ = yym4233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4234 := !z.EncBinary()
			yy2arr4234 := z.EncBasicHandle().StructToArray
			var yyq4234 [6]bool
			_, _, _ = yysep4234, yyq4234, yy2arr4234
			const yyr4234 bool = false
			yyq4234[0] = x.Kind != ""
			yyq4234[1] = x.APIVersion != ""
			yyq4234[2] = true
			yyq4234[3] = len(x.Data) != 0
			yyq4234[4] = len(x.StringData) != 0
			yyq4234[5] = x.Type != ""
			var yynn4234 int
			if yyr4234 || yy2arr4234 {
				r.EncodeArrayStart(6)
			} else {
				yynn4234 = 0
				for _, b := range yyq4234 {
					if b {
						yynn4234++
					}
				}
				r.EncodeMapStart(yynn4234)
				yynn4234 = 0
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[0] {
					yym4236 := z.EncBinary()
					_ = yym4236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4234[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4237 := z.EncBinary()
					_ = yym4237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[1] {
					yym4239 := z.EncBinary()
					_ = yym4239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4240 := z.EncBinary()
					_ = yym4240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[2] {
					yy4242 := &x.ObjectMeta
					yy4242.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4234[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4243 := &x.ObjectMeta
					yy4243.CodecEncodeSelf(e)
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4245 := z.EncBinary()
						_ = yym4245
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4234[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4246 := z.EncBinary()
						_ = yym4246
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4248 := z.EncBinary()
						_ = yym4248
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4234[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4249 := z.EncBinary()
						_ = yym4249
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4234[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4251 := z.DecBinary()
	_ = yym4251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4252 := r.ContainerType()
		if yyct4252 == codecSelferValueTypeMap1234 {
			yyl4252 := r.ReadMapStart()
			if yyl4252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4252, d)
			}
		} else if yyct4252 == codecSelferValueTypeArray1234 {
			yyl4252 := r.ReadArrayStart()
			if yyl4252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4253Slc
	var yyhl4253 bool = l >= 0
	for yyj4253 := 0; ; yyj4253++ {
		if yyhl4253 {
			if yyj4253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4253Slc = r.DecodeBytes(yys4253Slc, true, true)
		yys4253 := string(yys4253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4253 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4256 := &x.ObjectMeta
				yyv4256.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4257 := &x.Data
				yym4258 := z.DecBinary()
				_ = yym4258
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4257), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4259 := &x.StringData
				yym4260 := z.DecBinary()
				_ = yym4260
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4259, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4253)
		} // end switch yys4253
	} // end for yyj4253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4262 int
	var yyb4262 bool
	var yyhl4262 bool = l >= 0
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4265 := &x.ObjectMeta
		yyv4265.CodecDecodeSelf(d)
	}
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4266 := &x.Data
		yym4267 := z.DecBinary()
		_ = yym4267
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4266), d)
		}
	}
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4268 := &x.StringData
		yym4269 := z.DecBinary()
		_ = yym4269
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4268, false, d)
		}
	}
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4262++
		if yyhl4262 {
			yyb4262 = yyj4262 > l
		} else {
			yyb4262 = r.CheckBreak()
		}
		if yyb4262 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4262-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4271 := z.EncBinary()
	_ = yym4271
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4272 := z.DecBinary()
	_ = yym4272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4273 := z.EncBinary()
		_ = yym4273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4274 := !z.EncBinary()
			yy2arr4274 := z.EncBasicHandle().StructToArray
			var yyq4274 [4]bool
			_, _, _ = yysep4274, yyq4274, yy2arr4274
			const yyr4274 bool = false
			yyq4274[0] = x.Kind != ""
			yyq4274[1] = x.APIVersion != ""
			yyq4274[2] = true
			var yynn4274 int
			if yyr4274 || yy2arr4274 {
				r.EncodeArrayStart(4)
			} else {
				yynn4274 = 1
				for _, b := range yyq4274 {
					if b {
						yynn4274++
					}
				}
				r.EncodeMapStart(yynn4274)
				yynn4274 = 0
			}
			if yyr4274 || yy2arr4274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4274[0] {
					yym4276 := z.EncBinary()
					_ = yym4276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4274[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4277 := z.EncBinary()
					_ = yym4277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4274 || yy2arr4274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4274[1] {
					yym4279 := z.EncBinary()
					_ = yym4279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4274[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4280 := z.EncBinary()
					_ = yym4280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4274 || yy2arr4274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4274[2] {
					yy4282 := &x.ListMeta
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4282) {
					} else {
						z.EncFallback(yy4282)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4274[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4284 := &x.ListMeta
					yym4285 := z.EncBinary()
					_ = yym4285
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4284) {
					} else {
						z.EncFallback(yy4284)
					}
				}
			}
			if yyr4274 || yy2arr4274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4287 := z.EncBinary()
					_ = yym4287
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4288 := z.EncBinary()
					_ = yym4288
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4274 || yy2arr4274 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4289 := z.DecBinary()
	_ = yym4289
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4290 := r.ContainerType()
		if yyct4290 == codecSelferValueTypeMap1234 {
			yyl4290 := r.ReadMapStart()
			if yyl4290 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4290, d)
			}
		} else if yyct4290 == codecSelferValueTypeArray1234 {
			yyl4290 := r.ReadArrayStart()
			if yyl4290 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4290, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4291Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4291Slc
	var yyhl4291 bool = l >= 0
	for yyj4291 := 0; ; yyj4291++ {
		if yyhl4291 {
			if yyj4291 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4291Slc = r.DecodeBytes(yys4291Slc, true, true)
		yys4291 := string(yys4291Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4291 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4294 := &x.ListMeta
				yym4295 := z.DecBinary()
				_ = yym4295
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4294) {
				} else {
					z.DecFallback(yyv4294, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4296 := &x.Items
				yym4297 := z.DecBinary()
				_ = yym4297
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4296), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4291)
		} // end switch yys4291
	} // end for yyj4291
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4298 int
	var yyb4298 bool
	var yyhl4298 bool = l >= 0
	yyj4298++
	if yyhl4298 {
		yyb4298 = yyj4298 > l
	} else {
		yyb4298 = r.CheckBreak()
	}
	if yyb4298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4298++
	if yyhl4298 {
		yyb4298 = yyj4298 > l
	} else {
		yyb4298 = r.CheckBreak()
	}
	if yyb4298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4298++
	if yyhl4298 {
		yyb4298 = yyj4298 > l
	} else {
		yyb4298 = r.CheckBreak()
	}
	if yyb4298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4301 := &x.ListMeta
		yym4302 := z.DecBinary()
		_ = yym4302
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4301) {
		} else {
			z.DecFallback(yyv4301, false)
		}
	}
	yyj4298++
	if yyhl4298 {
		yyb4298 = yyj4298 > l
	} else {
		yyb4298 = r.CheckBreak()
	}
	if yyb4298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4303 := &x.Items
		yym4304 := z.DecBinary()
		_ = yym4304
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4303), d)
		}
	}
	for {
		yyj4298++
		if yyhl4298 {
			yyb4298 = yyj4298 > l
		} else {
			yyb4298 = r.CheckBreak()
		}
		if yyb4298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4305 := z.EncBinary()
		_ = yym4305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4306 := !z.EncBinary()
			yy2arr4306 := z.EncBasicHandle().StructToArray
			var yyq4306 [4]bool
			_, _, _ = yysep4306, yyq4306, yy2arr4306
			const yyr4306 bool = false
			yyq4306[0] = x.Kind != ""
			yyq4306[1] = x.APIVersion != ""
			yyq4306[2] = true
			yyq4306[3] = len(x.Data) != 0
			var yynn4306 int
			if yyr4306 || yy2arr4306 {
				r.EncodeArrayStart(4)
			} else {
				yynn4306 = 0
				for _, b := range yyq4306 {
					if b {
						yynn4306++
					}
				}
				r.EncodeMapStart(yynn4306)
				yynn4306 = 0
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4306[0] {
					yym4308 := z.EncBinary()
					_ = yym4308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4306[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4306[1] {
					yym4311 := z.EncBinary()
					_ = yym4311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4306[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4306[2] {
					yy4314 := &x.ObjectMeta
					yy4314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4306[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4315 := &x.ObjectMeta
					yy4315.CodecEncodeSelf(e)
				}
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4306[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4317 := z.EncBinary()
						_ = yym4317
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4306[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4318 := z.EncBinary()
						_ = yym4318
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4319 := z.DecBinary()
	_ = yym4319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4320 := r.ContainerType()
		if yyct4320 == codecSelferValueTypeMap1234 {
			yyl4320 := r.ReadMapStart()
			if yyl4320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4320, d)
			}
		} else if yyct4320 == codecSelferValueTypeArray1234 {
			yyl4320 := r.ReadArrayStart()
			if yyl4320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4321Slc
	var yyhl4321 bool = l >= 0
	for yyj4321 := 0; ; yyj4321++ {
		if yyhl4321 {
			if yyj4321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4321Slc = r.DecodeBytes(yys4321Slc, true, true)
		yys4321 := string(yys4321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4321 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4324 := &x.ObjectMeta
				yyv4324.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4325 := &x.Data
				yym4326 := z.DecBinary()
				_ = yym4326
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4325, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4321)
		} // end switch yys4321
	} // end for yyj4321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4327 int
	var yyb4327 bool
	var yyhl4327 bool = l >= 0
	yyj4327++
	if yyhl4327 {
		yyb4327 = yyj4327 > l
	} else {
		yyb4327 = r.CheckBreak()
	}
	if yyb4327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4327++
	if yyhl4327 {
		yyb4327 = yyj4327 > l
	} else {
		yyb4327 = r.CheckBreak()
	}
	if yyb4327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4327++
	if yyhl4327 {
		yyb4327 = yyj4327 > l
	} else {
		yyb4327 = r.CheckBreak()
	}
	if yyb4327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4330 := &x.ObjectMeta
		yyv4330.CodecDecodeSelf(d)
	}
	yyj4327++
	if yyhl4327 {
		yyb4327 = yyj4327 > l
	} else {
		yyb4327 = r.CheckBreak()
	}
	if yyb4327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4331 := &x.Data
		yym4332 := z.DecBinary()
		_ = yym4332
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4331, false, d)
		}
	}
	for {
		yyj4327++
		if yyhl4327 {
			yyb4327 = yyj4327 > l
		} else {
			yyb4327 = r.CheckBreak()
		}
		if yyb4327 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4327-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4333 := z.EncBinary()
		_ = yym4333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4334 := !z.EncBinary()
			yy2arr4334 := z.EncBasicHandle().StructToArray
			var yyq4334 [4]bool
			_, _, _ = yysep4334, yyq4334, yy2arr4334
			const yyr4334 bool = false
			yyq4334[0] = x.Kind != ""
			yyq4334[1] = x.APIVersion != ""
			yyq4334[2] = true
			var yynn4334 int
			if yyr4334 || yy2arr4334 {
				r.EncodeArrayStart(4)
			} else {
				yynn4334 = 1
				for _, b := range yyq4334 {
					if b {
						yynn4334++
					}
				}
				r.EncodeMapStart(yynn4334)
				yynn4334 = 0
			}
			if yyr4334 || yy2arr4334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4334[0] {
					yym4336 := z.EncBinary()
					_ = yym4336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4337 := z.EncBinary()
					_ = yym4337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4334 || yy2arr4334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4334[1] {
					yym4339 := z.EncBinary()
					_ = yym4339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4340 := z.EncBinary()
					_ = yym4340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4334 || yy2arr4334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4334[2] {
					yy4342 := &x.ListMeta
					yym4343 := z.EncBinary()
					_ = yym4343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4342) {
					} else {
						z.EncFallback(yy4342)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4344 := &x.ListMeta
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4344) {
					} else {
						z.EncFallback(yy4344)
					}
				}
			}
			if yyr4334 || yy2arr4334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4347 := z.EncBinary()
					_ = yym4347
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4334 || yy2arr4334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4349 := z.DecBinary()
	_ = yym4349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4350 := r.ContainerType()
		if yyct4350 == codecSelferValueTypeMap1234 {
			yyl4350 := r.ReadMapStart()
			if yyl4350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4350, d)
			}
		} else if yyct4350 == codecSelferValueTypeArray1234 {
			yyl4350 := r.ReadArrayStart()
			if yyl4350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4351Slc
	var yyhl4351 bool = l >= 0
	for yyj4351 := 0; ; yyj4351++ {
		if yyhl4351 {
			if yyj4351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4351Slc = r.DecodeBytes(yys4351Slc, true, true)
		yys4351 := string(yys4351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4351 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4354 := &x.ListMeta
				yym4355 := z.DecBinary()
				_ = yym4355
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4354) {
				} else {
					z.DecFallback(yyv4354, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4356 := &x.Items
				yym4357 := z.DecBinary()
				_ = yym4357
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4356), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4351)
		} // end switch yys4351
	} // end for yyj4351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4358 int
	var yyb4358 bool
	var yyhl4358 bool = l >= 0
	yyj4358++
	if yyhl4358 {
		yyb4358 = yyj4358 > l
	} else {
		yyb4358 = r.CheckBreak()
	}
	if yyb4358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4358++
	if yyhl4358 {
		yyb4358 = yyj4358 > l
	} else {
		yyb4358 = r.CheckBreak()
	}
	if yyb4358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4358++
	if yyhl4358 {
		yyb4358 = yyj4358 > l
	} else {
		yyb4358 = r.CheckBreak()
	}
	if yyb4358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4361 := &x.ListMeta
		yym4362 := z.DecBinary()
		_ = yym4362
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4361) {
		} else {
			z.DecFallback(yyv4361, false)
		}
	}
	yyj4358++
	if yyhl4358 {
		yyb4358 = yyj4358 > l
	} else {
		yyb4358 = r.CheckBreak()
	}
	if yyb4358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4363 := &x.Items
		yym4364 := z.DecBinary()
		_ = yym4364
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4363), d)
		}
	}
	for {
		yyj4358++
		if yyhl4358 {
			yyb4358 = yyj4358 > l
		} else {
			yyb4358 = r.CheckBreak()
		}
		if yyb4358 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4358-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4365 := z.EncBinary()
	_ = yym4365
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4366 := z.DecBinary()
	_ = yym4366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4367 := z.EncBinary()
		_ = yym4367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4368 := !z.EncBinary()
			yy2arr4368 := z.EncBasicHandle().StructToArray
			var yyq4368 [4]bool
			_, _, _ = yysep4368, yyq4368, yy2arr4368
			const yyr4368 bool = false
			yyq4368[2] = x.Message != ""
			yyq4368[3] = x.Error != ""
			var yynn4368 int
			if yyr4368 || yy2arr4368 {
				r.EncodeArrayStart(4)
			} else {
				yynn4368 = 2
				for _, b := range yyq4368 {
					if b {
						yynn4368++
					}
				}
				r.EncodeMapStart(yynn4368)
				yynn4368 = 0
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4368[2] {
					yym4372 := z.EncBinary()
					_ = yym4372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4368[3] {
					yym4375 := z.EncBinary()
					_ = yym4375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4368[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4376 := z.EncBinary()
					_ = yym4376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4377 := z.DecBinary()
	_ = yym4377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4378 := r.ContainerType()
		if yyct4378 == codecSelferValueTypeMap1234 {
			yyl4378 := r.ReadMapStart()
			if yyl4378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4378, d)
			}
		} else if yyct4378 == codecSelferValueTypeArray1234 {
			yyl4378 := r.ReadArrayStart()
			if yyl4378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4379Slc
	var yyhl4379 bool = l >= 0
	for yyj4379 := 0; ; yyj4379++ {
		if yyhl4379 {
			if yyj4379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4379Slc = r.DecodeBytes(yys4379Slc, true, true)
		yys4379 := string(yys4379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4379 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4379)
		} // end switch yys4379
	} // end for yyj4379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4384 int
	var yyb4384 bool
	var yyhl4384 bool = l >= 0
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4384++
	if yyhl4384 {
		yyb4384 = yyj4384 > l
	} else {
		yyb4384 = r.CheckBreak()
	}
	if yyb4384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4384++
		if yyhl4384 {
			yyb4384 = yyj4384 > l
		} else {
			yyb4384 = r.CheckBreak()
		}
		if yyb4384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4389 := z.EncBinary()
		_ = yym4389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4390 := !z.EncBinary()
			yy2arr4390 := z.EncBasicHandle().StructToArray
			var yyq4390 [4]bool
			_, _, _ = yysep4390, yyq4390, yy2arr4390
			const yyr4390 bool = false
			yyq4390[0] = x.Kind != ""
			yyq4390[1] = x.APIVersion != ""
			yyq4390[2] = true
			yyq4390[3] = len(x.Conditions) != 0
			var yynn4390 int
			if yyr4390 || yy2arr4390 {
				r.EncodeArrayStart(4)
			} else {
				yynn4390 = 0
				for _, b := range yyq4390 {
					if b {
						yynn4390++
					}
				}
				r.EncodeMapStart(yynn4390)
				yynn4390 = 0
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[0] {
					yym4392 := z.EncBinary()
					_ = yym4392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4390[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4393 := z.EncBinary()
					_ = yym4393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[1] {
					yym4395 := z.EncBinary()
					_ = yym4395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4390[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4396 := z.EncBinary()
					_ = yym4396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[2] {
					yy4398 := &x.ObjectMeta
					yy4398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4390[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4399 := &x.ObjectMeta
					yy4399.CodecEncodeSelf(e)
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4401 := z.EncBinary()
						_ = yym4401
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4390[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4402 := z.EncBinary()
						_ = yym4402
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4403 := z.DecBinary()
	_ = yym4403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4404 := r.ContainerType()
		if yyct4404 == codecSelferValueTypeMap1234 {
			yyl4404 := r.ReadMapStart()
			if yyl4404 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4404, d)
			}
		} else if yyct4404 == codecSelferValueTypeArray1234 {
			yyl4404 := r.ReadArrayStart()
			if yyl4404 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4405Slc
	var yyhl4405 bool = l >= 0
	for yyj4405 := 0; ; yyj4405++ {
		if yyhl4405 {
			if yyj4405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4405Slc = r.DecodeBytes(yys4405Slc, true, true)
		yys4405 := string(yys4405Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4405 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4408 := &x.ObjectMeta
				yyv4408.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4409 := &x.Conditions
				yym4410 := z.DecBinary()
				_ = yym4410
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4409), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4405)
		} // end switch yys4405
	} // end for yyj4405
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4411 int
	var yyb4411 bool
	var yyhl4411 bool = l >= 0
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4414 := &x.ObjectMeta
		yyv4414.CodecDecodeSelf(d)
	}
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4415 := &x.Conditions
		yym4416 := z.DecBinary()
		_ = yym4416
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4415), d)
		}
	}
	for {
		yyj4411++
		if yyhl4411 {
			yyb4411 = yyj4411 > l
		} else {
			yyb4411 = r.CheckBreak()
		}
		if yyb4411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4417 := z.EncBinary()
		_ = yym4417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4418 := !z.EncBinary()
			yy2arr4418 := z.EncBasicHandle().StructToArray
			var yyq4418 [4]bool
			_, _, _ = yysep4418, yyq4418, yy2arr4418
			const yyr4418 bool = false
			yyq4418[0] = x.Kind != ""
			yyq4418[1] = x.APIVersion != ""
			yyq4418[2] = true
			var yynn4418 int
			if yyr4418 || yy2arr4418 {
				r.EncodeArrayStart(4)
			} else {
				yynn4418 = 1
				for _, b := range yyq4418 {
					if b {
						yynn4418++
					}
				}
				r.EncodeMapStart(yynn4418)
				yynn4418 = 0
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4418[0] {
					yym4420 := z.EncBinary()
					_ = yym4420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4421 := z.EncBinary()
					_ = yym4421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4418[1] {
					yym4423 := z.EncBinary()
					_ = yym4423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4424 := z.EncBinary()
					_ = yym4424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4418[2] {
					yy4426 := &x.ListMeta
					yym4427 := z.EncBinary()
					_ = yym4427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4426) {
					} else {
						z.EncFallback(yy4426)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4428 := &x.ListMeta
					yym4429 := z.EncBinary()
					_ = yym4429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4428) {
					} else {
						z.EncFallback(yy4428)
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4431 := z.EncBinary()
					_ = yym4431
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4432 := z.EncBinary()
					_ = yym4432
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4433 := z.DecBinary()
	_ = yym4433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4434 := r.ContainerType()
		if yyct4434 == codecSelferValueTypeMap1234 {
			yyl4434 := r.ReadMapStart()
			if yyl4434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4434, d)
			}
		} else if yyct4434 == codecSelferValueTypeArray1234 {
			yyl4434 := r.ReadArrayStart()
			if yyl4434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4435Slc
	var yyhl4435 bool = l >= 0
	for yyj4435 := 0; ; yyj4435++ {
		if yyhl4435 {
			if yyj4435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4435Slc = r.DecodeBytes(yys4435Slc, true, true)
		yys4435 := string(yys4435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4435 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4438 := &x.ListMeta
				yym4439 := z.DecBinary()
				_ = yym4439
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4438) {
				} else {
					z.DecFallback(yyv4438, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4440 := &x.Items
				yym4441 := z.DecBinary()
				_ = yym4441
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4440), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4435)
		} // end switch yys4435
	} // end for yyj4435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4442 int
	var yyb4442 bool
	var yyhl4442 bool = l >= 0
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4445 := &x.ListMeta
		yym4446 := z.DecBinary()
		_ = yym4446
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4445) {
		} else {
			z.DecFallback(yyv4445, false)
		}
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4447 := &x.Items
		yym4448 := z.DecBinary()
		_ = yym4448
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4447), d)
		}
	}
	for {
		yyj4442++
		if yyhl4442 {
			yyb4442 = yyj4442 > l
		} else {
			yyb4442 = r.CheckBreak()
		}
		if yyb4442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4449 := z.EncBinary()
		_ = yym4449
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4450 := !z.EncBinary()
			yy2arr4450 := z.EncBasicHandle().StructToArray
			var yyq4450 [2]bool
			_, _, _ = yysep4450, yyq4450, yy2arr4450
			const yyr4450 bool = false
			yyq4450[0] = len(x.Items) != 0
			yyq4450[1] = x.DefaultMode != nil
			var yynn4450 int
			if yyr4450 || yy2arr4450 {
				r.EncodeArrayStart(2)
			} else {
				yynn4450 = 0
				for _, b := range yyq4450 {
					if b {
						yynn4450++
					}
				}
				r.EncodeMapStart(yynn4450)
				yynn4450 = 0
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4452 := z.EncBinary()
						_ = yym4452
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4453 := z.EncBinary()
						_ = yym4453
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4455 := *x.DefaultMode
						yym4456 := z.EncBinary()
						_ = yym4456
						if false {
						} else {
							r.EncodeInt(int64(yy4455))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4457 := *x.DefaultMode
						yym4458 := z.EncBinary()
						_ = yym4458
						if false {
						} else {
							r.EncodeInt(int64(yy4457))
						}
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4459 := z.DecBinary()
	_ = yym4459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4460 := r.ContainerType()
		if yyct4460 == codecSelferValueTypeMap1234 {
			yyl4460 := r.ReadMapStart()
			if yyl4460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4460, d)
			}
		} else if yyct4460 == codecSelferValueTypeArray1234 {
			yyl4460 := r.ReadArrayStart()
			if yyl4460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4461Slc
	var yyhl4461 bool = l >= 0
	for yyj4461 := 0; ; yyj4461++ {
		if yyhl4461 {
			if yyj4461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4461Slc = r.DecodeBytes(yys4461Slc, true, true)
		yys4461 := string(yys4461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4461 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4462 := &x.Items
				yym4463 := z.DecBinary()
				_ = yym4463
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4462), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4465 := z.DecBinary()
				_ = yym4465
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4461)
		} // end switch yys4461
	} // end for yyj4461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4466 int
	var yyb4466 bool
	var yyhl4466 bool = l >= 0
	yyj4466++
	if yyhl4466 {
		yyb4466 = yyj4466 > l
	} else {
		yyb4466 = r.CheckBreak()
	}
	if yyb4466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4467 := &x.Items
		yym4468 := z.DecBinary()
		_ = yym4468
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4467), d)
		}
	}
	yyj4466++
	if yyhl4466 {
		yyb4466 = yyj4466 > l
	} else {
		yyb4466 = r.CheckBreak()
	}
	if yyb4466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4470 := z.DecBinary()
		_ = yym4470
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4466++
		if yyhl4466 {
			yyb4466 = yyj4466 > l
		} else {
			yyb4466 = r.CheckBreak()
		}
		if yyb4466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4471 := z.EncBinary()
		_ = yym4471
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4472 := !z.EncBinary()
			yy2arr4472 := z.EncBasicHandle().StructToArray
			var yyq4472 [4]bool
			_, _, _ = yysep4472, yyq4472, yy2arr4472
			const yyr4472 bool = false
			yyq4472[1] = x.FieldRef != nil
			yyq4472[2] = x.ResourceFieldRef != nil
			yyq4472[3] = x.Mode != nil
			var yynn4472 int
			if yyr4472 || yy2arr4472 {
				r.EncodeArrayStart(4)
			} else {
				yynn4472 = 1
				for _, b := range yyq4472 {
					if b {
						yynn4472++
					}
				}
				r.EncodeMapStart(yynn4472)
				yynn4472 = 0
			}
			if yyr4472 || yy2arr4472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4474 := z.EncBinary()
				_ = yym4474
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4475 := z.EncBinary()
				_ = yym4475
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4472 || yy2arr4472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4472[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4472[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4472 || yy2arr4472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4472[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4472[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4472 || yy2arr4472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4472[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4479 := *x.Mode
						yym4480 := z.EncBinary()
						_ = yym4480
						if false {
						} else {
							r.EncodeInt(int64(yy4479))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4472[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4481 := *x.Mode
						yym4482 := z.EncBinary()
						_ = yym4482
						if false {
						} else {
							r.EncodeInt(int64(yy4481))
						}
					}
				}
			}
			if yyr4472 || yy2arr4472 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4483 := z.DecBinary()
	_ = yym4483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4484 := r.ContainerType()
		if yyct4484 == codecSelferValueTypeMap1234 {
			yyl4484 := r.ReadMapStart()
			if yyl4484 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4484, d)
			}
		} else if yyct4484 == codecSelferValueTypeArray1234 {
			yyl4484 := r.ReadArrayStart()
			if yyl4484 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4485Slc
	var yyhl4485 bool = l >= 0
	for yyj4485 := 0; ; yyj4485++ {
		if yyhl4485 {
			if yyj4485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4485Slc = r.DecodeBytes(yys4485Slc, true, true)
		yys4485 := string(yys4485Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4485 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4490 := z.DecBinary()
				_ = yym4490
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4485)
		} // end switch yys4485
	} // end for yyj4485
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4491 int
	var yyb4491 bool
	var yyhl4491 bool = l >= 0
	yyj4491++
	if yyhl4491 {
		yyb4491 = yyj4491 > l
	} else {
		yyb4491 = r.CheckBreak()
	}
	if yyb4491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4491++
	if yyhl4491 {
		yyb4491 = yyj4491 > l
	} else {
		yyb4491 = r.CheckBreak()
	}
	if yyb4491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4491++
	if yyhl4491 {
		yyb4491 = yyj4491 > l
	} else {
		yyb4491 = r.CheckBreak()
	}
	if yyb4491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4491++
	if yyhl4491 {
		yyb4491 = yyj4491 > l
	} else {
		yyb4491 = r.CheckBreak()
	}
	if yyb4491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4496 := z.DecBinary()
		_ = yym4496
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4491++
		if yyhl4491 {
			yyb4491 = yyj4491 > l
		} else {
			yyb4491 = r.CheckBreak()
		}
		if yyb4491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4497 := z.EncBinary()
		_ = yym4497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4498 := !z.EncBinary()
			yy2arr4498 := z.EncBasicHandle().StructToArray
			var yyq4498 [6]bool
			_, _, _ = yysep4498, yyq4498, yy2arr4498
			const yyr4498 bool = false
			yyq4498[0] = x.Capabilities != nil
			yyq4498[1] = x.Privileged != nil
			yyq4498[2] = x.SELinuxOptions != nil
			yyq4498[3] = x.RunAsUser != nil
			yyq4498[4] = x.RunAsNonRoot != nil
			yyq4498[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4498 int
			if yyr4498 || yy2arr4498 {
				r.EncodeArrayStart(6)
			} else {
				yynn4498 = 0
				for _, b := range yyq4498 {
					if b {
						yynn4498++
					}
				}
				r.EncodeMapStart(yynn4498)
				yynn4498 = 0
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4501 := *x.Privileged
						yym4502 := z.EncBinary()
						_ = yym4502
						if false {
						} else {
							r.EncodeBool(bool(yy4501))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4503 := *x.Privileged
						yym4504 := z.EncBinary()
						_ = yym4504
						if false {
						} else {
							r.EncodeBool(bool(yy4503))
						}
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4507 := *x.RunAsUser
						yym4508 := z.EncBinary()
						_ = yym4508
						if false {
						} else {
							r.EncodeInt(int64(yy4507))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4509 := *x.RunAsUser
						yym4510 := z.EncBinary()
						_ = yym4510
						if false {
						} else {
							r.EncodeInt(int64(yy4509))
						}
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4512 := *x.RunAsNonRoot
						yym4513 := z.EncBinary()
						_ = yym4513
						if false {
						} else {
							r.EncodeBool(bool(yy4512))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4498[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4514 := *x.RunAsNonRoot
						yym4515 := z.EncBinary()
						_ = yym4515
						if false {
						} else {
							r.EncodeBool(bool(yy4514))
						}
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4517 := *x.ReadOnlyRootFilesystem
						yym4518 := z.EncBinary()
						_ = yym4518
						if false {
						} else {
							r.EncodeBool(bool(yy4517))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4498[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4519 := *x.ReadOnlyRootFilesystem
						yym4520 := z.EncBinary()
						_ = yym4520
						if false {
						} else {
							r.EncodeBool(bool(yy4519))
						}
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4521 := z.DecBinary()
	_ = yym4521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4522 := r.ContainerType()
		if yyct4522 == codecSelferValueTypeMap1234 {
			yyl4522 := r.ReadMapStart()
			if yyl4522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4522, d)
			}
		} else if yyct4522 == codecSelferValueTypeArray1234 {
			yyl4522 := r.ReadArrayStart()
			if yyl4522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4523Slc
	var yyhl4523 bool = l >= 0
	for yyj4523 := 0; ; yyj4523++ {
		if yyhl4523 {
			if yyj4523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4523Slc = r.DecodeBytes(yys4523Slc, true, true)
		yys4523 := string(yys4523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4523 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4526 := z.DecBinary()
				_ = yym4526
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4529 := z.DecBinary()
				_ = yym4529
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4531 := z.DecBinary()
				_ = yym4531
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4533 := z.DecBinary()
				_ = yym4533
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4523)
		} // end switch yys4523
	} // end for yyj4523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4534 int
	var yyb4534 bool
	var yyhl4534 bool = l >= 0
	yyj4534++
	if yyhl4534 {
		yyb4534 = yyj4534 > l
	} else {
		yyb4534 = r.CheckBreak()
	}
	if yyb4534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4534++
	if yyhl4534 {
		yyb4534 = yyj4534 > l
	} else {
		yyb4534 = r.CheckBreak()
	}
	if yyb4534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4537 := z.DecBinary()
		_ = yym4537
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4534++
	if yyhl4534 {
		yyb4534 = yyj4534 > l
	} else {
		yyb4534 = r.CheckBreak()
	}
	if yyb4534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4534++
	if yyhl4534 {
		yyb4534 = yyj4534 > l
	} else {
		yyb4534 = r.CheckBreak()
	}
	if yyb4534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4540 := z.DecBinary()
		_ = yym4540
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4534++
	if yyhl4534 {
		yyb4534 = yyj4534 > l
	} else {
		yyb4534 = r.CheckBreak()
	}
	if yyb4534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4542 := z.DecBinary()
		_ = yym4542
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4534++
	if yyhl4534 {
		yyb4534 = yyj4534 > l
	} else {
		yyb4534 = r.CheckBreak()
	}
	if yyb4534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4544 := z.DecBinary()
		_ = yym4544
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4534++
		if yyhl4534 {
			yyb4534 = yyj4534 > l
		} else {
			yyb4534 = r.CheckBreak()
		}
		if yyb4534 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4534-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4545 := z.EncBinary()
		_ = yym4545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4546 := !z.EncBinary()
			yy2arr4546 := z.EncBasicHandle().StructToArray
			var yyq4546 [4]bool
			_, _, _ = yysep4546, yyq4546, yy2arr4546
			const yyr4546 bool = false
			yyq4546[0] = x.User != ""
			yyq4546[1] = x.Role != ""
			yyq4546[2] = x.Type != ""
			yyq4546[3] = x.Level != ""
			var yynn4546 int
			if yyr4546 || yy2arr4546 {
				r.EncodeArrayStart(4)
			} else {
				yynn4546 = 0
				for _, b := range yyq4546 {
					if b {
						yynn4546++
					}
				}
				r.EncodeMapStart(yynn4546)
				yynn4546 = 0
			}
			if yyr4546 || yy2arr4546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4546[0] {
					yym4548 := z.EncBinary()
					_ = yym4548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4546[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4549 := z.EncBinary()
					_ = yym4549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4546 || yy2arr4546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4546[1] {
					yym4551 := z.EncBinary()
					_ = yym4551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4546[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4552 := z.EncBinary()
					_ = yym4552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4546 || yy2arr4546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4546[2] {
					yym4554 := z.EncBinary()
					_ = yym4554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4546[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4555 := z.EncBinary()
					_ = yym4555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4546 || yy2arr4546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4546[3] {
					yym4557 := z.EncBinary()
					_ = yym4557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4546[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4558 := z.EncBinary()
					_ = yym4558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4546 || yy2arr4546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4559 := z.DecBinary()
	_ = yym4559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4560 := r.ContainerType()
		if yyct4560 == codecSelferValueTypeMap1234 {
			yyl4560 := r.ReadMapStart()
			if yyl4560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4560, d)
			}
		} else if yyct4560 == codecSelferValueTypeArray1234 {
			yyl4560 := r.ReadArrayStart()
			if yyl4560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4561Slc
	var yyhl4561 bool = l >= 0
	for yyj4561 := 0; ; yyj4561++ {
		if yyhl4561 {
			if yyj4561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4561Slc = r.DecodeBytes(yys4561Slc, true, true)
		yys4561 := string(yys4561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4561 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4561)
		} // end switch yys4561
	} // end for yyj4561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4566 int
	var yyb4566 bool
	var yyhl4566 bool = l >= 0
	yyj4566++
	if yyhl4566 {
		yyb4566 = yyj4566 > l
	} else {
		yyb4566 = r.CheckBreak()
	}
	if yyb4566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4566++
	if yyhl4566 {
		yyb4566 = yyj4566 > l
	} else {
		yyb4566 = r.CheckBreak()
	}
	if yyb4566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4566++
	if yyhl4566 {
		yyb4566 = yyj4566 > l
	} else {
		yyb4566 = r.CheckBreak()
	}
	if yyb4566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4566++
	if yyhl4566 {
		yyb4566 = yyj4566 > l
	} else {
		yyb4566 = r.CheckBreak()
	}
	if yyb4566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4566++
		if yyhl4566 {
			yyb4566 = yyj4566 > l
		} else {
			yyb4566 = r.CheckBreak()
		}
		if yyb4566 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4566-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4571 := z.EncBinary()
		_ = yym4571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4572 := !z.EncBinary()
			yy2arr4572 := z.EncBasicHandle().StructToArray
			var yyq4572 [5]bool
			_, _, _ = yysep4572, yyq4572, yy2arr4572
			const yyr4572 bool = false
			yyq4572[0] = x.Kind != ""
			yyq4572[1] = x.APIVersion != ""
			yyq4572[2] = true
			var yynn4572 int
			if yyr4572 || yy2arr4572 {
				r.EncodeArrayStart(5)
			} else {
				yynn4572 = 2
				for _, b := range yyq4572 {
					if b {
						yynn4572++
					}
				}
				r.EncodeMapStart(yynn4572)
				yynn4572 = 0
			}
			if yyr4572 || yy2arr4572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4572[0] {
					yym4574 := z.EncBinary()
					_ = yym4574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4572[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4575 := z.EncBinary()
					_ = yym4575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4572 || yy2arr4572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4572[1] {
					yym4577 := z.EncBinary()
					_ = yym4577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4572[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4578 := z.EncBinary()
					_ = yym4578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4572 || yy2arr4572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4572[2] {
					yy4580 := &x.ObjectMeta
					yy4580.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4572[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4581 := &x.ObjectMeta
					yy4581.CodecEncodeSelf(e)
				}
			}
			if yyr4572 || yy2arr4572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4583 := z.EncBinary()
				_ = yym4583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4584 := z.EncBinary()
				_ = yym4584
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4572 || yy2arr4572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4586 := z.EncBinary()
					_ = yym4586
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4587 := z.EncBinary()
					_ = yym4587
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4572 || yy2arr4572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4588 := z.DecBinary()
	_ = yym4588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4589 := r.ContainerType()
		if yyct4589 == codecSelferValueTypeMap1234 {
			yyl4589 := r.ReadMapStart()
			if yyl4589 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4589, d)
			}
		} else if yyct4589 == codecSelferValueTypeArray1234 {
			yyl4589 := r.ReadArrayStart()
			if yyl4589 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4590Slc
	var yyhl4590 bool = l >= 0
	for yyj4590 := 0; ; yyj4590++ {
		if yyhl4590 {
			if yyj4590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4590Slc = r.DecodeBytes(yys4590Slc, true, true)
		yys4590 := string(yys4590Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4590 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4593 := &x.ObjectMeta
				yyv4593.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4595 := &x.Data
				yym4596 := z.DecBinary()
				_ = yym4596
				if false {
				} else {
					*yyv4595 = r.DecodeBytes(*(*[]byte)(yyv4595), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4590)
		} // end switch yys4590
	} // end for yyj4590
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4597 int
	var yyb4597 bool
	var yyhl4597 bool = l >= 0
	yyj4597++
	if yyhl4597 {
		yyb4597 = yyj4597 > l
	} else {
		yyb4597 = r.CheckBreak()
	}
	if yyb4597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4597++
	if yyhl4597 {
		yyb4597 = yyj4597 > l
	} else {
		yyb4597 = r.CheckBreak()
	}
	if yyb4597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4597++
	if yyhl4597 {
		yyb4597 = yyj4597 > l
	} else {
		yyb4597 = r.CheckBreak()
	}
	if yyb4597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4600 := &x.ObjectMeta
		yyv4600.CodecDecodeSelf(d)
	}
	yyj4597++
	if yyhl4597 {
		yyb4597 = yyj4597 > l
	} else {
		yyb4597 = r.CheckBreak()
	}
	if yyb4597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4597++
	if yyhl4597 {
		yyb4597 = yyj4597 > l
	} else {
		yyb4597 = r.CheckBreak()
	}
	if yyb4597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4602 := &x.Data
		yym4603 := z.DecBinary()
		_ = yym4603
		if false {
		} else {
			*yyv4602 = r.DecodeBytes(*(*[]byte)(yyv4602), false, false)
		}
	}
	for {
		yyj4597++
		if yyhl4597 {
			yyb4597 = yyj4597 > l
		} else {
			yyb4597 = r.CheckBreak()
		}
		if yyb4597 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4597-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4604 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4605 := &yyv4604
		yy4605.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4606 := *v
	yyh4606, yyl4606 := z.DecSliceHelperStart()
	var yyc4606 bool
	if yyl4606 == 0 {
		if yyv4606 == nil {
			yyv4606 = []OwnerReference{}
			yyc4606 = true
		} else if len(yyv4606) != 0 {
			yyv4606 = yyv4606[:0]
			yyc4606 = true
		}
	} else if yyl4606 > 0 {
		var yyrr4606, yyrl4606 int
		var yyrt4606 bool
		if yyl4606 > cap(yyv4606) {

			yyrg4606 := len(yyv4606) > 0
			yyv24606 := yyv4606
			yyrl4606, yyrt4606 = z.DecInferLen(yyl4606, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4606 {
				if yyrl4606 <= cap(yyv4606) {
					yyv4606 = yyv4606[:yyrl4606]
				} else {
					yyv4606 = make([]OwnerReference, yyrl4606)
				}
			} else {
				yyv4606 = make([]OwnerReference, yyrl4606)
			}
			yyc4606 = true
			yyrr4606 = len(yyv4606)
			if yyrg4606 {
				copy(yyv4606, yyv24606)
			}
		} else if yyl4606 != len(yyv4606) {
			yyv4606 = yyv4606[:yyl4606]
			yyc4606 = true
		}
		yyj4606 := 0
		for ; yyj4606 < yyrr4606; yyj4606++ {
			yyh4606.ElemContainerState(yyj4606)
			if r.TryDecodeAsNil() {
				yyv4606[yyj4606] = OwnerReference{}
			} else {
				yyv4607 := &yyv4606[yyj4606]
				yyv4607.CodecDecodeSelf(d)
			}

		}
		if yyrt4606 {
			for ; yyj4606 < yyl4606; yyj4606++ {
				yyv4606 = append(yyv4606, OwnerReference{})
				yyh4606.ElemContainerState(yyj4606)
				if r.TryDecodeAsNil() {
					yyv4606[yyj4606] = OwnerReference{}
				} else {
					yyv4608 := &yyv4606[yyj4606]
					yyv4608.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4606 := 0
		for ; !r.CheckBreak(); yyj4606++ {

			if yyj4606 >= len(yyv4606) {
				yyv4606 = append(yyv4606, OwnerReference{}) // var yyz4606 OwnerReference
				yyc4606 = true
			}
			yyh4606.ElemContainerState(yyj4606)
			if yyj4606 < len(yyv4606) {
				if r.TryDecodeAsNil() {
					yyv4606[yyj4606] = OwnerReference{}
				} else {
					yyv4609 := &yyv4606[yyj4606]
					yyv4609.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4606 < len(yyv4606) {
			yyv4606 = yyv4606[:yyj4606]
			yyc4606 = true
		} else if yyj4606 == 0 && yyv4606 == nil {
			yyv4606 = []OwnerReference{}
			yyc4606 = true
		}
	}
	yyh4606.End()
	if yyc4606 {
		*v = yyv4606
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4610 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4610.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4611 := *v
	yyh4611, yyl4611 := z.DecSliceHelperStart()
	var yyc4611 bool
	if yyl4611 == 0 {
		if yyv4611 == nil {
			yyv4611 = []PersistentVolumeAccessMode{}
			yyc4611 = true
		} else if len(yyv4611) != 0 {
			yyv4611 = yyv4611[:0]
			yyc4611 = true
		}
	} else if yyl4611 > 0 {
		var yyrr4611, yyrl4611 int
		var yyrt4611 bool
		if yyl4611 > cap(yyv4611) {

			yyrl4611, yyrt4611 = z.DecInferLen(yyl4611, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4611 {
				if yyrl4611 <= cap(yyv4611) {
					yyv4611 = yyv4611[:yyrl4611]
				} else {
					yyv4611 = make([]PersistentVolumeAccessMode, yyrl4611)
				}
			} else {
				yyv4611 = make([]PersistentVolumeAccessMode, yyrl4611)
			}
			yyc4611 = true
			yyrr4611 = len(yyv4611)
		} else if yyl4611 != len(yyv4611) {
			yyv4611 = yyv4611[:yyl4611]
			yyc4611 = true
		}
		yyj4611 := 0
		for ; yyj4611 < yyrr4611; yyj4611++ {
			yyh4611.ElemContainerState(yyj4611)
			if r.TryDecodeAsNil() {
				yyv4611[yyj4611] = ""
			} else {
				yyv4611[yyj4611] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4611 {
			for ; yyj4611 < yyl4611; yyj4611++ {
				yyv4611 = append(yyv4611, "")
				yyh4611.ElemContainerState(yyj4611)
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = ""
				} else {
					yyv4611[yyj4611] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4611 := 0
		for ; !r.CheckBreak(); yyj4611++ {

			if yyj4611 >= len(yyv4611) {
				yyv4611 = append(yyv4611, "") // var yyz4611 PersistentVolumeAccessMode
				yyc4611 = true
			}
			yyh4611.ElemContainerState(yyj4611)
			if yyj4611 < len(yyv4611) {
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = ""
				} else {
					yyv4611[yyj4611] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4611 < len(yyv4611) {
			yyv4611 = yyv4611[:yyj4611]
			yyc4611 = true
		} else if yyj4611 == 0 && yyv4611 == nil {
			yyv4611 = []PersistentVolumeAccessMode{}
			yyc4611 = true
		}
	}
	yyh4611.End()
	if yyc4611 {
		*v = yyv4611
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4615 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4616 := &yyv4615
		yy4616.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4617 := *v
	yyh4617, yyl4617 := z.DecSliceHelperStart()
	var yyc4617 bool
	if yyl4617 == 0 {
		if yyv4617 == nil {
			yyv4617 = []PersistentVolume{}
			yyc4617 = true
		} else if len(yyv4617) != 0 {
			yyv4617 = yyv4617[:0]
			yyc4617 = true
		}
	} else if yyl4617 > 0 {
		var yyrr4617, yyrl4617 int
		var yyrt4617 bool
		if yyl4617 > cap(yyv4617) {

			yyrg4617 := len(yyv4617) > 0
			yyv24617 := yyv4617
			yyrl4617, yyrt4617 = z.DecInferLen(yyl4617, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4617 {
				if yyrl4617 <= cap(yyv4617) {
					yyv4617 = yyv4617[:yyrl4617]
				} else {
					yyv4617 = make([]PersistentVolume, yyrl4617)
				}
			} else {
				yyv4617 = make([]PersistentVolume, yyrl4617)
			}
			yyc4617 = true
			yyrr4617 = len(yyv4617)
			if yyrg4617 {
				copy(yyv4617, yyv24617)
			}
		} else if yyl4617 != len(yyv4617) {
			yyv4617 = yyv4617[:yyl4617]
			yyc4617 = true
		}
		yyj4617 := 0
		for ; yyj4617 < yyrr4617; yyj4617++ {
			yyh4617.ElemContainerState(yyj4617)
			if r.TryDecodeAsNil() {
				yyv4617[yyj4617] = PersistentVolume{}
			} else {
				yyv4618 := &yyv4617[yyj4617]
				yyv4618.CodecDecodeSelf(d)
			}

		}
		if yyrt4617 {
			for ; yyj4617 < yyl4617; yyj4617++ {
				yyv4617 = append(yyv4617, PersistentVolume{})
				yyh4617.ElemContainerState(yyj4617)
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = PersistentVolume{}
				} else {
					yyv4619 := &yyv4617[yyj4617]
					yyv4619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4617 := 0
		for ; !r.CheckBreak(); yyj4617++ {

			if yyj4617 >= len(yyv4617) {
				yyv4617 = append(yyv4617, PersistentVolume{}) // var yyz4617 PersistentVolume
				yyc4617 = true
			}
			yyh4617.ElemContainerState(yyj4617)
			if yyj4617 < len(yyv4617) {
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = PersistentVolume{}
				} else {
					yyv4620 := &yyv4617[yyj4617]
					yyv4620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4617 < len(yyv4617) {
			yyv4617 = yyv4617[:yyj4617]
			yyc4617 = true
		} else if yyj4617 == 0 && yyv4617 == nil {
			yyv4617 = []PersistentVolume{}
			yyc4617 = true
		}
	}
	yyh4617.End()
	if yyc4617 {
		*v = yyv4617
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4622 := &yyv4621
		yy4622.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4623 := *v
	yyh4623, yyl4623 := z.DecSliceHelperStart()
	var yyc4623 bool
	if yyl4623 == 0 {
		if yyv4623 == nil {
			yyv4623 = []PersistentVolumeClaim{}
			yyc4623 = true
		} else if len(yyv4623) != 0 {
			yyv4623 = yyv4623[:0]
			yyc4623 = true
		}
	} else if yyl4623 > 0 {
		var yyrr4623, yyrl4623 int
		var yyrt4623 bool
		if yyl4623 > cap(yyv4623) {

			yyrg4623 := len(yyv4623) > 0
			yyv24623 := yyv4623
			yyrl4623, yyrt4623 = z.DecInferLen(yyl4623, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4623 {
				if yyrl4623 <= cap(yyv4623) {
					yyv4623 = yyv4623[:yyrl4623]
				} else {
					yyv4623 = make([]PersistentVolumeClaim, yyrl4623)
				}
			} else {
				yyv4623 = make([]PersistentVolumeClaim, yyrl4623)
			}
			yyc4623 = true
			yyrr4623 = len(yyv4623)
			if yyrg4623 {
				copy(yyv4623, yyv24623)
			}
		} else if yyl4623 != len(yyv4623) {
			yyv4623 = yyv4623[:yyl4623]
			yyc4623 = true
		}
		yyj4623 := 0
		for ; yyj4623 < yyrr4623; yyj4623++ {
			yyh4623.ElemContainerState(yyj4623)
			if r.TryDecodeAsNil() {
				yyv4623[yyj4623] = PersistentVolumeClaim{}
			} else {
				yyv4624 := &yyv4623[yyj4623]
				yyv4624.CodecDecodeSelf(d)
			}

		}
		if yyrt4623 {
			for ; yyj4623 < yyl4623; yyj4623++ {
				yyv4623 = append(yyv4623, PersistentVolumeClaim{})
				yyh4623.ElemContainerState(yyj4623)
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = PersistentVolumeClaim{}
				} else {
					yyv4625 := &yyv4623[yyj4623]
					yyv4625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4623 := 0
		for ; !r.CheckBreak(); yyj4623++ {

			if yyj4623 >= len(yyv4623) {
				yyv4623 = append(yyv4623, PersistentVolumeClaim{}) // var yyz4623 PersistentVolumeClaim
				yyc4623 = true
			}
			yyh4623.ElemContainerState(yyj4623)
			if yyj4623 < len(yyv4623) {
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = PersistentVolumeClaim{}
				} else {
					yyv4626 := &yyv4623[yyj4623]
					yyv4626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4623 < len(yyv4623) {
			yyv4623 = yyv4623[:yyj4623]
			yyc4623 = true
		} else if yyj4623 == 0 && yyv4623 == nil {
			yyv4623 = []PersistentVolumeClaim{}
			yyc4623 = true
		}
	}
	yyh4623.End()
	if yyc4623 {
		*v = yyv4623
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4628 := &yyv4627
		yy4628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4629 := *v
	yyh4629, yyl4629 := z.DecSliceHelperStart()
	var yyc4629 bool
	if yyl4629 == 0 {
		if yyv4629 == nil {
			yyv4629 = []KeyToPath{}
			yyc4629 = true
		} else if len(yyv4629) != 0 {
			yyv4629 = yyv4629[:0]
			yyc4629 = true
		}
	} else if yyl4629 > 0 {
		var yyrr4629, yyrl4629 int
		var yyrt4629 bool
		if yyl4629 > cap(yyv4629) {

			yyrg4629 := len(yyv4629) > 0
			yyv24629 := yyv4629
			yyrl4629, yyrt4629 = z.DecInferLen(yyl4629, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4629 {
				if yyrl4629 <= cap(yyv4629) {
					yyv4629 = yyv4629[:yyrl4629]
				} else {
					yyv4629 = make([]KeyToPath, yyrl4629)
				}
			} else {
				yyv4629 = make([]KeyToPath, yyrl4629)
			}
			yyc4629 = true
			yyrr4629 = len(yyv4629)
			if yyrg4629 {
				copy(yyv4629, yyv24629)
			}
		} else if yyl4629 != len(yyv4629) {
			yyv4629 = yyv4629[:yyl4629]
			yyc4629 = true
		}
		yyj4629 := 0
		for ; yyj4629 < yyrr4629; yyj4629++ {
			yyh4629.ElemContainerState(yyj4629)
			if r.TryDecodeAsNil() {
				yyv4629[yyj4629] = KeyToPath{}
			} else {
				yyv4630 := &yyv4629[yyj4629]
				yyv4630.CodecDecodeSelf(d)
			}

		}
		if yyrt4629 {
			for ; yyj4629 < yyl4629; yyj4629++ {
				yyv4629 = append(yyv4629, KeyToPath{})
				yyh4629.ElemContainerState(yyj4629)
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = KeyToPath{}
				} else {
					yyv4631 := &yyv4629[yyj4629]
					yyv4631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4629 := 0
		for ; !r.CheckBreak(); yyj4629++ {

			if yyj4629 >= len(yyv4629) {
				yyv4629 = append(yyv4629, KeyToPath{}) // var yyz4629 KeyToPath
				yyc4629 = true
			}
			yyh4629.ElemContainerState(yyj4629)
			if yyj4629 < len(yyv4629) {
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = KeyToPath{}
				} else {
					yyv4632 := &yyv4629[yyj4629]
					yyv4632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4629 < len(yyv4629) {
			yyv4629 = yyv4629[:yyj4629]
			yyc4629 = true
		} else if yyj4629 == 0 && yyv4629 == nil {
			yyv4629 = []KeyToPath{}
			yyc4629 = true
		}
	}
	yyh4629.End()
	if yyc4629 {
		*v = yyv4629
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4634 := &yyv4633
		yy4634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4635 := *v
	yyh4635, yyl4635 := z.DecSliceHelperStart()
	var yyc4635 bool
	if yyl4635 == 0 {
		if yyv4635 == nil {
			yyv4635 = []HTTPHeader{}
			yyc4635 = true
		} else if len(yyv4635) != 0 {
			yyv4635 = yyv4635[:0]
			yyc4635 = true
		}
	} else if yyl4635 > 0 {
		var yyrr4635, yyrl4635 int
		var yyrt4635 bool
		if yyl4635 > cap(yyv4635) {

			yyrg4635 := len(yyv4635) > 0
			yyv24635 := yyv4635
			yyrl4635, yyrt4635 = z.DecInferLen(yyl4635, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4635 {
				if yyrl4635 <= cap(yyv4635) {
					yyv4635 = yyv4635[:yyrl4635]
				} else {
					yyv4635 = make([]HTTPHeader, yyrl4635)
				}
			} else {
				yyv4635 = make([]HTTPHeader, yyrl4635)
			}
			yyc4635 = true
			yyrr4635 = len(yyv4635)
			if yyrg4635 {
				copy(yyv4635, yyv24635)
			}
		} else if yyl4635 != len(yyv4635) {
			yyv4635 = yyv4635[:yyl4635]
			yyc4635 = true
		}
		yyj4635 := 0
		for ; yyj4635 < yyrr4635; yyj4635++ {
			yyh4635.ElemContainerState(yyj4635)
			if r.TryDecodeAsNil() {
				yyv4635[yyj4635] = HTTPHeader{}
			} else {
				yyv4636 := &yyv4635[yyj4635]
				yyv4636.CodecDecodeSelf(d)
			}

		}
		if yyrt4635 {
			for ; yyj4635 < yyl4635; yyj4635++ {
				yyv4635 = append(yyv4635, HTTPHeader{})
				yyh4635.ElemContainerState(yyj4635)
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = HTTPHeader{}
				} else {
					yyv4637 := &yyv4635[yyj4635]
					yyv4637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4635 := 0
		for ; !r.CheckBreak(); yyj4635++ {

			if yyj4635 >= len(yyv4635) {
				yyv4635 = append(yyv4635, HTTPHeader{}) // var yyz4635 HTTPHeader
				yyc4635 = true
			}
			yyh4635.ElemContainerState(yyj4635)
			if yyj4635 < len(yyv4635) {
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = HTTPHeader{}
				} else {
					yyv4638 := &yyv4635[yyj4635]
					yyv4638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4635 < len(yyv4635) {
			yyv4635 = yyv4635[:yyj4635]
			yyc4635 = true
		} else if yyj4635 == 0 && yyv4635 == nil {
			yyv4635 = []HTTPHeader{}
			yyc4635 = true
		}
	}
	yyh4635.End()
	if yyc4635 {
		*v = yyv4635
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4639.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4640 := *v
	yyh4640, yyl4640 := z.DecSliceHelperStart()
	var yyc4640 bool
	if yyl4640 == 0 {
		if yyv4640 == nil {
			yyv4640 = []Capability{}
			yyc4640 = true
		} else if len(yyv4640) != 0 {
			yyv4640 = yyv4640[:0]
			yyc4640 = true
		}
	} else if yyl4640 > 0 {
		var yyrr4640, yyrl4640 int
		var yyrt4640 bool
		if yyl4640 > cap(yyv4640) {

			yyrl4640, yyrt4640 = z.DecInferLen(yyl4640, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4640 {
				if yyrl4640 <= cap(yyv4640) {
					yyv4640 = yyv4640[:yyrl4640]
				} else {
					yyv4640 = make([]Capability, yyrl4640)
				}
			} else {
				yyv4640 = make([]Capability, yyrl4640)
			}
			yyc4640 = true
			yyrr4640 = len(yyv4640)
		} else if yyl4640 != len(yyv4640) {
			yyv4640 = yyv4640[:yyl4640]
			yyc4640 = true
		}
		yyj4640 := 0
		for ; yyj4640 < yyrr4640; yyj4640++ {
			yyh4640.ElemContainerState(yyj4640)
			if r.TryDecodeAsNil() {
				yyv4640[yyj4640] = ""
			} else {
				yyv4640[yyj4640] = Capability(r.DecodeString())
			}

		}
		if yyrt4640 {
			for ; yyj4640 < yyl4640; yyj4640++ {
				yyv4640 = append(yyv4640, "")
				yyh4640.ElemContainerState(yyj4640)
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = ""
				} else {
					yyv4640[yyj4640] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4640 := 0
		for ; !r.CheckBreak(); yyj4640++ {

			if yyj4640 >= len(yyv4640) {
				yyv4640 = append(yyv4640, "") // var yyz4640 Capability
				yyc4640 = true
			}
			yyh4640.ElemContainerState(yyj4640)
			if yyj4640 < len(yyv4640) {
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = ""
				} else {
					yyv4640[yyj4640] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4640 < len(yyv4640) {
			yyv4640 = yyv4640[:yyj4640]
			yyc4640 = true
		} else if yyj4640 == 0 && yyv4640 == nil {
			yyv4640 = []Capability{}
			yyc4640 = true
		}
	}
	yyh4640.End()
	if yyc4640 {
		*v = yyv4640
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4645 := &yyv4644
		yy4645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4646 := *v
	yyh4646, yyl4646 := z.DecSliceHelperStart()
	var yyc4646 bool
	if yyl4646 == 0 {
		if yyv4646 == nil {
			yyv4646 = []ContainerPort{}
			yyc4646 = true
		} else if len(yyv4646) != 0 {
			yyv4646 = yyv4646[:0]
			yyc4646 = true
		}
	} else if yyl4646 > 0 {
		var yyrr4646, yyrl4646 int
		var yyrt4646 bool
		if yyl4646 > cap(yyv4646) {

			yyrg4646 := len(yyv4646) > 0
			yyv24646 := yyv4646
			yyrl4646, yyrt4646 = z.DecInferLen(yyl4646, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4646 {
				if yyrl4646 <= cap(yyv4646) {
					yyv4646 = yyv4646[:yyrl4646]
				} else {
					yyv4646 = make([]ContainerPort, yyrl4646)
				}
			} else {
				yyv4646 = make([]ContainerPort, yyrl4646)
			}
			yyc4646 = true
			yyrr4646 = len(yyv4646)
			if yyrg4646 {
				copy(yyv4646, yyv24646)
			}
		} else if yyl4646 != len(yyv4646) {
			yyv4646 = yyv4646[:yyl4646]
			yyc4646 = true
		}
		yyj4646 := 0
		for ; yyj4646 < yyrr4646; yyj4646++ {
			yyh4646.ElemContainerState(yyj4646)
			if r.TryDecodeAsNil() {
				yyv4646[yyj4646] = ContainerPort{}
			} else {
				yyv4647 := &yyv4646[yyj4646]
				yyv4647.CodecDecodeSelf(d)
			}

		}
		if yyrt4646 {
			for ; yyj4646 < yyl4646; yyj4646++ {
				yyv4646 = append(yyv4646, ContainerPort{})
				yyh4646.ElemContainerState(yyj4646)
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = ContainerPort{}
				} else {
					yyv4648 := &yyv4646[yyj4646]
					yyv4648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4646 := 0
		for ; !r.CheckBreak(); yyj4646++ {

			if yyj4646 >= len(yyv4646) {
				yyv4646 = append(yyv4646, ContainerPort{}) // var yyz4646 ContainerPort
				yyc4646 = true
			}
			yyh4646.ElemContainerState(yyj4646)
			if yyj4646 < len(yyv4646) {
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = ContainerPort{}
				} else {
					yyv4649 := &yyv4646[yyj4646]
					yyv4649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4646 < len(yyv4646) {
			yyv4646 = yyv4646[:yyj4646]
			yyc4646 = true
		} else if yyj4646 == 0 && yyv4646 == nil {
			yyv4646 = []ContainerPort{}
			yyc4646 = true
		}
	}
	yyh4646.End()
	if yyc4646 {
		*v = yyv4646
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4651 := &yyv4650
		yy4651.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4652 := *v
	yyh4652, yyl4652 := z.DecSliceHelperStart()
	var yyc4652 bool
	if yyl4652 == 0 {
		if yyv4652 == nil {
			yyv4652 = []EnvVar{}
			yyc4652 = true
		} else if len(yyv4652) != 0 {
			yyv4652 = yyv4652[:0]
			yyc4652 = true
		}
	} else if yyl4652 > 0 {
		var yyrr4652, yyrl4652 int
		var yyrt4652 bool
		if yyl4652 > cap(yyv4652) {

			yyrg4652 := len(yyv4652) > 0
			yyv24652 := yyv4652
			yyrl4652, yyrt4652 = z.DecInferLen(yyl4652, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4652 {
				if yyrl4652 <= cap(yyv4652) {
					yyv4652 = yyv4652[:yyrl4652]
				} else {
					yyv4652 = make([]EnvVar, yyrl4652)
				}
			} else {
				yyv4652 = make([]EnvVar, yyrl4652)
			}
			yyc4652 = true
			yyrr4652 = len(yyv4652)
			if yyrg4652 {
				copy(yyv4652, yyv24652)
			}
		} else if yyl4652 != len(yyv4652) {
			yyv4652 = yyv4652[:yyl4652]
			yyc4652 = true
		}
		yyj4652 := 0
		for ; yyj4652 < yyrr4652; yyj4652++ {
			yyh4652.ElemContainerState(yyj4652)
			if r.TryDecodeAsNil() {
				yyv4652[yyj4652] = EnvVar{}
			} else {
				yyv4653 := &yyv4652[yyj4652]
				yyv4653.CodecDecodeSelf(d)
			}

		}
		if yyrt4652 {
			for ; yyj4652 < yyl4652; yyj4652++ {
				yyv4652 = append(yyv4652, EnvVar{})
				yyh4652.ElemContainerState(yyj4652)
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = EnvVar{}
				} else {
					yyv4654 := &yyv4652[yyj4652]
					yyv4654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4652 := 0
		for ; !r.CheckBreak(); yyj4652++ {

			if yyj4652 >= len(yyv4652) {
				yyv4652 = append(yyv4652, EnvVar{}) // var yyz4652 EnvVar
				yyc4652 = true
			}
			yyh4652.ElemContainerState(yyj4652)
			if yyj4652 < len(yyv4652) {
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = EnvVar{}
				} else {
					yyv4655 := &yyv4652[yyj4652]
					yyv4655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4652 < len(yyv4652) {
			yyv4652 = yyv4652[:yyj4652]
			yyc4652 = true
		} else if yyj4652 == 0 && yyv4652 == nil {
			yyv4652 = []EnvVar{}
			yyc4652 = true
		}
	}
	yyh4652.End()
	if yyc4652 {
		*v = yyv4652
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4656 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4657 := &yyv4656
		yy4657.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4658 := *v
	yyh4658, yyl4658 := z.DecSliceHelperStart()
	var yyc4658 bool
	if yyl4658 == 0 {
		if yyv4658 == nil {
			yyv4658 = []VolumeMount{}
			yyc4658 = true
		} else if len(yyv4658) != 0 {
			yyv4658 = yyv4658[:0]
			yyc4658 = true
		}
	} else if yyl4658 > 0 {
		var yyrr4658, yyrl4658 int
		var yyrt4658 bool
		if yyl4658 > cap(yyv4658) {

			yyrg4658 := len(yyv4658) > 0
			yyv24658 := yyv4658
			yyrl4658, yyrt4658 = z.DecInferLen(yyl4658, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4658 {
				if yyrl4658 <= cap(yyv4658) {
					yyv4658 = yyv4658[:yyrl4658]
				} else {
					yyv4658 = make([]VolumeMount, yyrl4658)
				}
			} else {
				yyv4658 = make([]VolumeMount, yyrl4658)
			}
			yyc4658 = true
			yyrr4658 = len(yyv4658)
			if yyrg4658 {
				copy(yyv4658, yyv24658)
			}
		} else if yyl4658 != len(yyv4658) {
			yyv4658 = yyv4658[:yyl4658]
			yyc4658 = true
		}
		yyj4658 := 0
		for ; yyj4658 < yyrr4658; yyj4658++ {
			yyh4658.ElemContainerState(yyj4658)
			if r.TryDecodeAsNil() {
				yyv4658[yyj4658] = VolumeMount{}
			} else {
				yyv4659 := &yyv4658[yyj4658]
				yyv4659.CodecDecodeSelf(d)
			}

		}
		if yyrt4658 {
			for ; yyj4658 < yyl4658; yyj4658++ {
				yyv4658 = append(yyv4658, VolumeMount{})
				yyh4658.ElemContainerState(yyj4658)
				if r.TryDecodeAsNil() {
					yyv4658[yyj4658] = VolumeMount{}
				} else {
					yyv4660 := &yyv4658[yyj4658]
					yyv4660.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4658 := 0
		for ; !r.CheckBreak(); yyj4658++ {

			if yyj4658 >= len(yyv4658) {
				yyv4658 = append(yyv4658, VolumeMount{}) // var yyz4658 VolumeMount
				yyc4658 = true
			}
			yyh4658.ElemContainerState(yyj4658)
			if yyj4658 < len(yyv4658) {
				if r.TryDecodeAsNil() {
					yyv4658[yyj4658] = VolumeMount{}
				} else {
					yyv4661 := &yyv4658[yyj4658]
					yyv4661.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4658 < len(yyv4658) {
			yyv4658 = yyv4658[:yyj4658]
			yyc4658 = true
		} else if yyj4658 == 0 && yyv4658 == nil {
			yyv4658 = []VolumeMount{}
			yyc4658 = true
		}
	}
	yyh4658.End()
	if yyc4658 {
		*v = yyv4658
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4662 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4663 := &yyv4662
		yy4663.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4664 := *v
	yyh4664, yyl4664 := z.DecSliceHelperStart()
	var yyc4664 bool
	if yyl4664 == 0 {
		if yyv4664 == nil {
			yyv4664 = []NodeSelectorTerm{}
			yyc4664 = true
		} else if len(yyv4664) != 0 {
			yyv4664 = yyv4664[:0]
			yyc4664 = true
		}
	} else if yyl4664 > 0 {
		var yyrr4664, yyrl4664 int
		var yyrt4664 bool
		if yyl4664 > cap(yyv4664) {

			yyrg4664 := len(yyv4664) > 0
			yyv24664 := yyv4664
			yyrl4664, yyrt4664 = z.DecInferLen(yyl4664, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4664 {
				if yyrl4664 <= cap(yyv4664) {
					yyv4664 = yyv4664[:yyrl4664]
				} else {
					yyv4664 = make([]NodeSelectorTerm, yyrl4664)
				}
			} else {
				yyv4664 = make([]NodeSelectorTerm, yyrl4664)
			}
			yyc4664 = true
			yyrr4664 = len(yyv4664)
			if yyrg4664 {
				copy(yyv4664, yyv24664)
			}
		} else if yyl4664 != len(yyv4664) {
			yyv4664 = yyv4664[:yyl4664]
			yyc4664 = true
		}
		yyj4664 := 0
		for ; yyj4664 < yyrr4664; yyj4664++ {
			yyh4664.ElemContainerState(yyj4664)
			if r.TryDecodeAsNil() {
				yyv4664[yyj4664] = NodeSelectorTerm{}
			} else {
				yyv4665 := &yyv4664[yyj4664]
				yyv4665.CodecDecodeSelf(d)
			}

		}
		if yyrt4664 {
			for ; yyj4664 < yyl4664; yyj4664++ {
				yyv4664 = append(yyv4664, NodeSelectorTerm{})
				yyh4664.ElemContainerState(yyj4664)
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = NodeSelectorTerm{}
				} else {
					yyv4666 := &yyv4664[yyj4664]
					yyv4666.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4664 := 0
		for ; !r.CheckBreak(); yyj4664++ {

			if yyj4664 >= len(yyv4664) {
				yyv4664 = append(yyv4664, NodeSelectorTerm{}) // var yyz4664 NodeSelectorTerm
				yyc4664 = true
			}
			yyh4664.ElemContainerState(yyj4664)
			if yyj4664 < len(yyv4664) {
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = NodeSelectorTerm{}
				} else {
					yyv4667 := &yyv4664[yyj4664]
					yyv4667.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4664 < len(yyv4664) {
			yyv4664 = yyv4664[:yyj4664]
			yyc4664 = true
		} else if yyj4664 == 0 && yyv4664 == nil {
			yyv4664 = []NodeSelectorTerm{}
			yyc4664 = true
		}
	}
	yyh4664.End()
	if yyc4664 {
		*v = yyv4664
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4668 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4669 := &yyv4668
		yy4669.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4670 := *v
	yyh4670, yyl4670 := z.DecSliceHelperStart()
	var yyc4670 bool
	if yyl4670 == 0 {
		if yyv4670 == nil {
			yyv4670 = []NodeSelectorRequirement{}
			yyc4670 = true
		} else if len(yyv4670) != 0 {
			yyv4670 = yyv4670[:0]
			yyc4670 = true
		}
	} else if yyl4670 > 0 {
		var yyrr4670, yyrl4670 int
		var yyrt4670 bool
		if yyl4670 > cap(yyv4670) {

			yyrg4670 := len(yyv4670) > 0
			yyv24670 := yyv4670
			yyrl4670, yyrt4670 = z.DecInferLen(yyl4670, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4670 {
				if yyrl4670 <= cap(yyv4670) {
					yyv4670 = yyv4670[:yyrl4670]
				} else {
					yyv4670 = make([]NodeSelectorRequirement, yyrl4670)
				}
			} else {
				yyv4670 = make([]NodeSelectorRequirement, yyrl4670)
			}
			yyc4670 = true
			yyrr4670 = len(yyv4670)
			if yyrg4670 {
				copy(yyv4670, yyv24670)
			}
		} else if yyl4670 != len(yyv4670) {
			yyv4670 = yyv4670[:yyl4670]
			yyc4670 = true
		}
		yyj4670 := 0
		for ; yyj4670 < yyrr4670; yyj4670++ {
			yyh4670.ElemContainerState(yyj4670)
			if r.TryDecodeAsNil() {
				yyv4670[yyj4670] = NodeSelectorRequirement{}
			} else {
				yyv4671 := &yyv4670[yyj4670]
				yyv4671.CodecDecodeSelf(d)
			}

		}
		if yyrt4670 {
			for ; yyj4670 < yyl4670; yyj4670++ {
				yyv4670 = append(yyv4670, NodeSelectorRequirement{})
				yyh4670.ElemContainerState(yyj4670)
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = NodeSelectorRequirement{}
				} else {
					yyv4672 := &yyv4670[yyj4670]
					yyv4672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4670 := 0
		for ; !r.CheckBreak(); yyj4670++ {

			if yyj4670 >= len(yyv4670) {
				yyv4670 = append(yyv4670, NodeSelectorRequirement{}) // var yyz4670 NodeSelectorRequirement
				yyc4670 = true
			}
			yyh4670.ElemContainerState(yyj4670)
			if yyj4670 < len(yyv4670) {
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = NodeSelectorRequirement{}
				} else {
					yyv4673 := &yyv4670[yyj4670]
					yyv4673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4670 < len(yyv4670) {
			yyv4670 = yyv4670[:yyj4670]
			yyc4670 = true
		} else if yyj4670 == 0 && yyv4670 == nil {
			yyv4670 = []NodeSelectorRequirement{}
			yyc4670 = true
		}
	}
	yyh4670.End()
	if yyc4670 {
		*v = yyv4670
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4674 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4675 := &yyv4674
		yy4675.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4676 := *v
	yyh4676, yyl4676 := z.DecSliceHelperStart()
	var yyc4676 bool
	if yyl4676 == 0 {
		if yyv4676 == nil {
			yyv4676 = []PodAffinityTerm{}
			yyc4676 = true
		} else if len(yyv4676) != 0 {
			yyv4676 = yyv4676[:0]
			yyc4676 = true
		}
	} else if yyl4676 > 0 {
		var yyrr4676, yyrl4676 int
		var yyrt4676 bool
		if yyl4676 > cap(yyv4676) {

			yyrg4676 := len(yyv4676) > 0
			yyv24676 := yyv4676
			yyrl4676, yyrt4676 = z.DecInferLen(yyl4676, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4676 {
				if yyrl4676 <= cap(yyv4676) {
					yyv4676 = yyv4676[:yyrl4676]
				} else {
					yyv4676 = make([]PodAffinityTerm, yyrl4676)
				}
			} else {
				yyv4676 = make([]PodAffinityTerm, yyrl4676)
			}
			yyc4676 = true
			yyrr4676 = len(yyv4676)
			if yyrg4676 {
				copy(yyv4676, yyv24676)
			}
		} else if yyl4676 != len(yyv4676) {
			yyv4676 = yyv4676[:yyl4676]
			yyc4676 = true
		}
		yyj4676 := 0
		for ; yyj4676 < yyrr4676; yyj4676++ {
			yyh4676.ElemContainerState(yyj4676)
			if r.TryDecodeAsNil() {
				yyv4676[yyj4676] = PodAffinityTerm{}
			} else {
				yyv4677 := &yyv4676[yyj4676]
				yyv4677.CodecDecodeSelf(d)
			}

		}
		if yyrt4676 {
			for ; yyj4676 < yyl4676; yyj4676++ {
				yyv4676 = append(yyv4676, PodAffinityTerm{})
				yyh4676.ElemContainerState(yyj4676)
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = PodAffinityTerm{}
				} else {
					yyv4678 := &yyv4676[yyj4676]
					yyv4678.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4676 := 0
		for ; !r.CheckBreak(); yyj4676++ {

			if yyj4676 >= len(yyv4676) {
				yyv4676 = append(yyv4676, PodAffinityTerm{}) // var yyz4676 PodAffinityTerm
				yyc4676 = true
			}
			yyh4676.ElemContainerState(yyj4676)
			if yyj4676 < len(yyv4676) {
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = PodAffinityTerm{}
				} else {
					yyv4679 := &yyv4676[yyj4676]
					yyv4679.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4676 < len(yyv4676) {
			yyv4676 = yyv4676[:yyj4676]
			yyc4676 = true
		} else if yyj4676 == 0 && yyv4676 == nil {
			yyv4676 = []PodAffinityTerm{}
			yyc4676 = true
		}
	}
	yyh4676.End()
	if yyc4676 {
		*v = yyv4676
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4680 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4681 := &yyv4680
		yy4681.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4682 := *v
	yyh4682, yyl4682 := z.DecSliceHelperStart()
	var yyc4682 bool
	if yyl4682 == 0 {
		if yyv4682 == nil {
			yyv4682 = []WeightedPodAffinityTerm{}
			yyc4682 = true
		} else if len(yyv4682) != 0 {
			yyv4682 = yyv4682[:0]
			yyc4682 = true
		}
	} else if yyl4682 > 0 {
		var yyrr4682, yyrl4682 int
		var yyrt4682 bool
		if yyl4682 > cap(yyv4682) {

			yyrg4682 := len(yyv4682) > 0
			yyv24682 := yyv4682
			yyrl4682, yyrt4682 = z.DecInferLen(yyl4682, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4682 {
				if yyrl4682 <= cap(yyv4682) {
					yyv4682 = yyv4682[:yyrl4682]
				} else {
					yyv4682 = make([]WeightedPodAffinityTerm, yyrl4682)
				}
			} else {
				yyv4682 = make([]WeightedPodAffinityTerm, yyrl4682)
			}
			yyc4682 = true
			yyrr4682 = len(yyv4682)
			if yyrg4682 {
				copy(yyv4682, yyv24682)
			}
		} else if yyl4682 != len(yyv4682) {
			yyv4682 = yyv4682[:yyl4682]
			yyc4682 = true
		}
		yyj4682 := 0
		for ; yyj4682 < yyrr4682; yyj4682++ {
			yyh4682.ElemContainerState(yyj4682)
			if r.TryDecodeAsNil() {
				yyv4682[yyj4682] = WeightedPodAffinityTerm{}
			} else {
				yyv4683 := &yyv4682[yyj4682]
				yyv4683.CodecDecodeSelf(d)
			}

		}
		if yyrt4682 {
			for ; yyj4682 < yyl4682; yyj4682++ {
				yyv4682 = append(yyv4682, WeightedPodAffinityTerm{})
				yyh4682.ElemContainerState(yyj4682)
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = WeightedPodAffinityTerm{}
				} else {
					yyv4684 := &yyv4682[yyj4682]
					yyv4684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4682 := 0
		for ; !r.CheckBreak(); yyj4682++ {

			if yyj4682 >= len(yyv4682) {
				yyv4682 = append(yyv4682, WeightedPodAffinityTerm{}) // var yyz4682 WeightedPodAffinityTerm
				yyc4682 = true
			}
			yyh4682.ElemContainerState(yyj4682)
			if yyj4682 < len(yyv4682) {
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = WeightedPodAffinityTerm{}
				} else {
					yyv4685 := &yyv4682[yyj4682]
					yyv4685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4682 < len(yyv4682) {
			yyv4682 = yyv4682[:yyj4682]
			yyc4682 = true
		} else if yyj4682 == 0 && yyv4682 == nil {
			yyv4682 = []WeightedPodAffinityTerm{}
			yyc4682 = true
		}
	}
	yyh4682.End()
	if yyc4682 {
		*v = yyv4682
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4686 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4687 := &yyv4686
		yy4687.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4688 := *v
	yyh4688, yyl4688 := z.DecSliceHelperStart()
	var yyc4688 bool
	if yyl4688 == 0 {
		if yyv4688 == nil {
			yyv4688 = []PreferredSchedulingTerm{}
			yyc4688 = true
		} else if len(yyv4688) != 0 {
			yyv4688 = yyv4688[:0]
			yyc4688 = true
		}
	} else if yyl4688 > 0 {
		var yyrr4688, yyrl4688 int
		var yyrt4688 bool
		if yyl4688 > cap(yyv4688) {

			yyrg4688 := len(yyv4688) > 0
			yyv24688 := yyv4688
			yyrl4688, yyrt4688 = z.DecInferLen(yyl4688, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4688 {
				if yyrl4688 <= cap(yyv4688) {
					yyv4688 = yyv4688[:yyrl4688]
				} else {
					yyv4688 = make([]PreferredSchedulingTerm, yyrl4688)
				}
			} else {
				yyv4688 = make([]PreferredSchedulingTerm, yyrl4688)
			}
			yyc4688 = true
			yyrr4688 = len(yyv4688)
			if yyrg4688 {
				copy(yyv4688, yyv24688)
			}
		} else if yyl4688 != len(yyv4688) {
			yyv4688 = yyv4688[:yyl4688]
			yyc4688 = true
		}
		yyj4688 := 0
		for ; yyj4688 < yyrr4688; yyj4688++ {
			yyh4688.ElemContainerState(yyj4688)
			if r.TryDecodeAsNil() {
				yyv4688[yyj4688] = PreferredSchedulingTerm{}
			} else {
				yyv4689 := &yyv4688[yyj4688]
				yyv4689.CodecDecodeSelf(d)
			}

		}
		if yyrt4688 {
			for ; yyj4688 < yyl4688; yyj4688++ {
				yyv4688 = append(yyv4688, PreferredSchedulingTerm{})
				yyh4688.ElemContainerState(yyj4688)
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = PreferredSchedulingTerm{}
				} else {
					yyv4690 := &yyv4688[yyj4688]
					yyv4690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4688 := 0
		for ; !r.CheckBreak(); yyj4688++ {

			if yyj4688 >= len(yyv4688) {
				yyv4688 = append(yyv4688, PreferredSchedulingTerm{}) // var yyz4688 PreferredSchedulingTerm
				yyc4688 = true
			}
			yyh4688.ElemContainerState(yyj4688)
			if yyj4688 < len(yyv4688) {
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = PreferredSchedulingTerm{}
				} else {
					yyv4691 := &yyv4688[yyj4688]
					yyv4691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4688 < len(yyv4688) {
			yyv4688 = yyv4688[:yyj4688]
			yyc4688 = true
		} else if yyj4688 == 0 && yyv4688 == nil {
			yyv4688 = []PreferredSchedulingTerm{}
			yyc4688 = true
		}
	}
	yyh4688.End()
	if yyc4688 {
		*v = yyv4688
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4692 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4693 := &yyv4692
		yy4693.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4694 := *v
	yyh4694, yyl4694 := z.DecSliceHelperStart()
	var yyc4694 bool
	if yyl4694 == 0 {
		if yyv4694 == nil {
			yyv4694 = []Volume{}
			yyc4694 = true
		} else if len(yyv4694) != 0 {
			yyv4694 = yyv4694[:0]
			yyc4694 = true
		}
	} else if yyl4694 > 0 {
		var yyrr4694, yyrl4694 int
		var yyrt4694 bool
		if yyl4694 > cap(yyv4694) {

			yyrg4694 := len(yyv4694) > 0
			yyv24694 := yyv4694
			yyrl4694, yyrt4694 = z.DecInferLen(yyl4694, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4694 {
				if yyrl4694 <= cap(yyv4694) {
					yyv4694 = yyv4694[:yyrl4694]
				} else {
					yyv4694 = make([]Volume, yyrl4694)
				}
			} else {
				yyv4694 = make([]Volume, yyrl4694)
			}
			yyc4694 = true
			yyrr4694 = len(yyv4694)
			if yyrg4694 {
				copy(yyv4694, yyv24694)
			}
		} else if yyl4694 != len(yyv4694) {
			yyv4694 = yyv4694[:yyl4694]
			yyc4694 = true
		}
		yyj4694 := 0
		for ; yyj4694 < yyrr4694; yyj4694++ {
			yyh4694.ElemContainerState(yyj4694)
			if r.TryDecodeAsNil() {
				yyv4694[yyj4694] = Volume{}
			} else {
				yyv4695 := &yyv4694[yyj4694]
				yyv4695.CodecDecodeSelf(d)
			}

		}
		if yyrt4694 {
			for ; yyj4694 < yyl4694; yyj4694++ {
				yyv4694 = append(yyv4694, Volume{})
				yyh4694.ElemContainerState(yyj4694)
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = Volume{}
				} else {
					yyv4696 := &yyv4694[yyj4694]
					yyv4696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4694 := 0
		for ; !r.CheckBreak(); yyj4694++ {

			if yyj4694 >= len(yyv4694) {
				yyv4694 = append(yyv4694, Volume{}) // var yyz4694 Volume
				yyc4694 = true
			}
			yyh4694.ElemContainerState(yyj4694)
			if yyj4694 < len(yyv4694) {
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = Volume{}
				} else {
					yyv4697 := &yyv4694[yyj4694]
					yyv4697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4694 < len(yyv4694) {
			yyv4694 = yyv4694[:yyj4694]
			yyc4694 = true
		} else if yyj4694 == 0 && yyv4694 == nil {
			yyv4694 = []Volume{}
			yyc4694 = true
		}
	}
	yyh4694.End()
	if yyc4694 {
		*v = yyv4694
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4698 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4699 := &yyv4698
		yy4699.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4700 := *v
	yyh4700, yyl4700 := z.DecSliceHelperStart()
	var yyc4700 bool
	if yyl4700 == 0 {
		if yyv4700 == nil {
			yyv4700 = []Container{}
			yyc4700 = true
		} else if len(yyv4700) != 0 {
			yyv4700 = yyv4700[:0]
			yyc4700 = true
		}
	} else if yyl4700 > 0 {
		var yyrr4700, yyrl4700 int
		var yyrt4700 bool
		if yyl4700 > cap(yyv4700) {

			yyrg4700 := len(yyv4700) > 0
			yyv24700 := yyv4700
			yyrl4700, yyrt4700 = z.DecInferLen(yyl4700, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4700 {
				if yyrl4700 <= cap(yyv4700) {
					yyv4700 = yyv4700[:yyrl4700]
				} else {
					yyv4700 = make([]Container, yyrl4700)
				}
			} else {
				yyv4700 = make([]Container, yyrl4700)
			}
			yyc4700 = true
			yyrr4700 = len(yyv4700)
			if yyrg4700 {
				copy(yyv4700, yyv24700)
			}
		} else if yyl4700 != len(yyv4700) {
			yyv4700 = yyv4700[:yyl4700]
			yyc4700 = true
		}
		yyj4700 := 0
		for ; yyj4700 < yyrr4700; yyj4700++ {
			yyh4700.ElemContainerState(yyj4700)
			if r.TryDecodeAsNil() {
				yyv4700[yyj4700] = Container{}
			} else {
				yyv4701 := &yyv4700[yyj4700]
				yyv4701.CodecDecodeSelf(d)
			}

		}
		if yyrt4700 {
			for ; yyj4700 < yyl4700; yyj4700++ {
				yyv4700 = append(yyv4700, Container{})
				yyh4700.ElemContainerState(yyj4700)
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = Container{}
				} else {
					yyv4702 := &yyv4700[yyj4700]
					yyv4702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4700 := 0
		for ; !r.CheckBreak(); yyj4700++ {

			if yyj4700 >= len(yyv4700) {
				yyv4700 = append(yyv4700, Container{}) // var yyz4700 Container
				yyc4700 = true
			}
			yyh4700.ElemContainerState(yyj4700)
			if yyj4700 < len(yyv4700) {
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = Container{}
				} else {
					yyv4703 := &yyv4700[yyj4700]
					yyv4703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4700 < len(yyv4700) {
			yyv4700 = yyv4700[:yyj4700]
			yyc4700 = true
		} else if yyj4700 == 0 && yyv4700 == nil {
			yyv4700 = []Container{}
			yyc4700 = true
		}
	}
	yyh4700.End()
	if yyc4700 {
		*v = yyv4700
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4704 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4705 := &yyv4704
		yy4705.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4706 := *v
	yyh4706, yyl4706 := z.DecSliceHelperStart()
	var yyc4706 bool
	if yyl4706 == 0 {
		if yyv4706 == nil {
			yyv4706 = []LocalObjectReference{}
			yyc4706 = true
		} else if len(yyv4706) != 0 {
			yyv4706 = yyv4706[:0]
			yyc4706 = true
		}
	} else if yyl4706 > 0 {
		var yyrr4706, yyrl4706 int
		var yyrt4706 bool
		if yyl4706 > cap(yyv4706) {

			yyrg4706 := len(yyv4706) > 0
			yyv24706 := yyv4706
			yyrl4706, yyrt4706 = z.DecInferLen(yyl4706, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4706 {
				if yyrl4706 <= cap(yyv4706) {
					yyv4706 = yyv4706[:yyrl4706]
				} else {
					yyv4706 = make([]LocalObjectReference, yyrl4706)
				}
			} else {
				yyv4706 = make([]LocalObjectReference, yyrl4706)
			}
			yyc4706 = true
			yyrr4706 = len(yyv4706)
			if yyrg4706 {
				copy(yyv4706, yyv24706)
			}
		} else if yyl4706 != len(yyv4706) {
			yyv4706 = yyv4706[:yyl4706]
			yyc4706 = true
		}
		yyj4706 := 0
		for ; yyj4706 < yyrr4706; yyj4706++ {
			yyh4706.ElemContainerState(yyj4706)
			if r.TryDecodeAsNil() {
				yyv4706[yyj4706] = LocalObjectReference{}
			} else {
				yyv4707 := &yyv4706[yyj4706]
				yyv4707.CodecDecodeSelf(d)
			}

		}
		if yyrt4706 {
			for ; yyj4706 < yyl4706; yyj4706++ {
				yyv4706 = append(yyv4706, LocalObjectReference{})
				yyh4706.ElemContainerState(yyj4706)
				if r.TryDecodeAsNil() {
					yyv4706[yyj4706] = LocalObjectReference{}
				} else {
					yyv4708 := &yyv4706[yyj4706]
					yyv4708.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4706 := 0
		for ; !r.CheckBreak(); yyj4706++ {

			if yyj4706 >= len(yyv4706) {
				yyv4706 = append(yyv4706, LocalObjectReference{}) // var yyz4706 LocalObjectReference
				yyc4706 = true
			}
			yyh4706.ElemContainerState(yyj4706)
			if yyj4706 < len(yyv4706) {
				if r.TryDecodeAsNil() {
					yyv4706[yyj4706] = LocalObjectReference{}
				} else {
					yyv4709 := &yyv4706[yyj4706]
					yyv4709.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4706 < len(yyv4706) {
			yyv4706 = yyv4706[:yyj4706]
			yyc4706 = true
		} else if yyj4706 == 0 && yyv4706 == nil {
			yyv4706 = []LocalObjectReference{}
			yyc4706 = true
		}
	}
	yyh4706.End()
	if yyc4706 {
		*v = yyv4706
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4710 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4711 := &yyv4710
		yy4711.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4712 := *v
	yyh4712, yyl4712 := z.DecSliceHelperStart()
	var yyc4712 bool
	if yyl4712 == 0 {
		if yyv4712 == nil {
			yyv4712 = []PodCondition{}
			yyc4712 = true
		} else if len(yyv4712) != 0 {
			yyv4712 = yyv4712[:0]
			yyc4712 = true
		}
	} else if yyl4712 > 0 {
		var yyrr4712, yyrl4712 int
		var yyrt4712 bool
		if yyl4712 > cap(yyv4712) {

			yyrg4712 := len(yyv4712) > 0
			yyv24712 := yyv4712
			yyrl4712, yyrt4712 = z.DecInferLen(yyl4712, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4712 {
				if yyrl4712 <= cap(yyv4712) {
					yyv4712 = yyv4712[:yyrl4712]
				} else {
					yyv4712 = make([]PodCondition, yyrl4712)
				}
			} else {
				yyv4712 = make([]PodCondition, yyrl4712)
			}
			yyc4712 = true
			yyrr4712 = len(yyv4712)
			if yyrg4712 {
				copy(yyv4712, yyv24712)
			}
		} else if yyl4712 != len(yyv4712) {
			yyv4712 = yyv4712[:yyl4712]
			yyc4712 = true
		}
		yyj4712 := 0
		for ; yyj4712 < yyrr4712; yyj4712++ {
			yyh4712.ElemContainerState(yyj4712)
			if r.TryDecodeAsNil() {
				yyv4712[yyj4712] = PodCondition{}
			} else {
				yyv4713 := &yyv4712[yyj4712]
				yyv4713.CodecDecodeSelf(d)
			}

		}
		if yyrt4712 {
			for ; yyj4712 < yyl4712; yyj4712++ {
				yyv4712 = append(yyv4712, PodCondition{})
				yyh4712.ElemContainerState(yyj4712)
				if r.TryDecodeAsNil() {
					yyv4712[yyj4712] = PodCondition{}
				} else {
					yyv4714 := &yyv4712[yyj4712]
					yyv4714.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4712 := 0
		for ; !r.CheckBreak(); yyj4712++ {

			if yyj4712 >= len(yyv4712) {
				yyv4712 = append(yyv4712, PodCondition{}) // var yyz4712 PodCondition
				yyc4712 = true
			}
			yyh4712.ElemContainerState(yyj4712)
			if yyj4712 < len(yyv4712) {
				if r.TryDecodeAsNil() {
					yyv4712[yyj4712] = PodCondition{}
				} else {
					yyv4715 := &yyv4712[yyj4712]
					yyv4715.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4712 < len(yyv4712) {
			yyv4712 = yyv4712[:yyj4712]
			yyc4712 = true
		} else if yyj4712 == 0 && yyv4712 == nil {
			yyv4712 = []PodCondition{}
			yyc4712 = true
		}
	}
	yyh4712.End()
	if yyc4712 {
		*v = yyv4712
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4716 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4717 := &yyv4716
		yy4717.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4718 := *v
	yyh4718, yyl4718 := z.DecSliceHelperStart()
	var yyc4718 bool
	if yyl4718 == 0 {
		if yyv4718 == nil {
			yyv4718 = []ContainerStatus{}
			yyc4718 = true
		} else if len(yyv4718) != 0 {
			yyv4718 = yyv4718[:0]
			yyc4718 = true
		}
	} else if yyl4718 > 0 {
		var yyrr4718, yyrl4718 int
		var yyrt4718 bool
		if yyl4718 > cap(yyv4718) {

			yyrg4718 := len(yyv4718) > 0
			yyv24718 := yyv4718
			yyrl4718, yyrt4718 = z.DecInferLen(yyl4718, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4718 {
				if yyrl4718 <= cap(yyv4718) {
					yyv4718 = yyv4718[:yyrl4718]
				} else {
					yyv4718 = make([]ContainerStatus, yyrl4718)
				}
			} else {
				yyv4718 = make([]ContainerStatus, yyrl4718)
			}
			yyc4718 = true
			yyrr4718 = len(yyv4718)
			if yyrg4718 {
				copy(yyv4718, yyv24718)
			}
		} else if yyl4718 != len(yyv4718) {
			yyv4718 = yyv4718[:yyl4718]
			yyc4718 = true
		}
		yyj4718 := 0
		for ; yyj4718 < yyrr4718; yyj4718++ {
			yyh4718.ElemContainerState(yyj4718)
			if r.TryDecodeAsNil() {
				yyv4718[yyj4718] = ContainerStatus{}
			} else {
				yyv4719 := &yyv4718[yyj4718]
				yyv4719.CodecDecodeSelf(d)
			}

		}
		if yyrt4718 {
			for ; yyj4718 < yyl4718; yyj4718++ {
				yyv4718 = append(yyv4718, ContainerStatus{})
				yyh4718.ElemContainerState(yyj4718)
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = ContainerStatus{}
				} else {
					yyv4720 := &yyv4718[yyj4718]
					yyv4720.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4718 := 0
		for ; !r.CheckBreak(); yyj4718++ {

			if yyj4718 >= len(yyv4718) {
				yyv4718 = append(yyv4718, ContainerStatus{}) // var yyz4718 ContainerStatus
				yyc4718 = true
			}
			yyh4718.ElemContainerState(yyj4718)
			if yyj4718 < len(yyv4718) {
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = ContainerStatus{}
				} else {
					yyv4721 := &yyv4718[yyj4718]
					yyv4721.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4718 < len(yyv4718) {
			yyv4718 = yyv4718[:yyj4718]
			yyc4718 = true
		} else if yyj4718 == 0 && yyv4718 == nil {
			yyv4718 = []ContainerStatus{}
			yyc4718 = true
		}
	}
	yyh4718.End()
	if yyc4718 {
		*v = yyv4718
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4722 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4723 := &yyv4722
		yy4723.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4724 := *v
	yyh4724, yyl4724 := z.DecSliceHelperStart()
	var yyc4724 bool
	if yyl4724 == 0 {
		if yyv4724 == nil {
			yyv4724 = []Pod{}
			yyc4724 = true
		} else if len(yyv4724) != 0 {
			yyv4724 = yyv4724[:0]
			yyc4724 = true
		}
	} else if yyl4724 > 0 {
		var yyrr4724, yyrl4724 int
		var yyrt4724 bool
		if yyl4724 > cap(yyv4724) {

			yyrg4724 := len(yyv4724) > 0
			yyv24724 := yyv4724
			yyrl4724, yyrt4724 = z.DecInferLen(yyl4724, z.DecBasicHandle().MaxInitLen, 672)
			if yyrt4724 {
				if yyrl4724 <= cap(yyv4724) {
					yyv4724 = yyv4724[:yyrl4724]
				} else {
					yyv4724 = make([]Pod, yyrl4724)
				}
			} else {
				yyv4724 = make([]Pod, yyrl4724)
			}
			yyc4724 = true
			yyrr4724 = len(yyv4724)
			if yyrg4724 {
				copy(yyv4724, yyv24724)
			}
		} else if yyl4724 != len(yyv4724) {
			yyv4724 = yyv4724[:yyl4724]
			yyc4724 = true
		}
		yyj4724 := 0
		for ; yyj4724 < yyrr4724; yyj4724++ {
			yyh4724.ElemContainerState(yyj4724)
			if r.TryDecodeAsNil() {
				yyv4724[yyj4724] = Pod{}
			} else {
				yyv4725 := &yyv4724[yyj4724]
				yyv4725.CodecDecodeSelf(d)
			}

		}
		if yyrt4724 {
			for ; yyj4724 < yyl4724; yyj4724++ {
				yyv4724 = append(yyv4724, Pod{})
				yyh4724.ElemContainerState(yyj4724)
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = Pod{}
				} else {
					yyv4726 := &yyv4724[yyj4724]
					yyv4726.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4724 := 0
		for ; !r.CheckBreak(); yyj4724++ {

			if yyj4724 >= len(yyv4724) {
				yyv4724 = append(yyv4724, Pod{}) // var yyz4724 Pod
				yyc4724 = true
			}
			yyh4724.ElemContainerState(yyj4724)
			if yyj4724 < len(yyv4724) {
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = Pod{}
				} else {
					yyv4727 := &yyv4724[yyj4724]
					yyv4727.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4724 < len(yyv4724) {
			yyv4724 = yyv4724[:yyj4724]
			yyc4724 = true
		} else if yyj4724 == 0 && yyv4724 == nil {
			yyv4724 = []Pod{}
			yyc4724 = true
		}
	}
	yyh4724.End()
	if yyc4724 {
		*v = yyv4724
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4728 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4729 := &yyv4728
		yy4729.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4730 := *v
	yyh4730, yyl4730 := z.DecSliceHelperStart()
	var yyc4730 bool
	if yyl4730 == 0 {
		if yyv4730 == nil {
			yyv4730 = []PodTemplate{}
			yyc4730 = true
		} else if len(yyv4730) != 0 {
			yyv4730 = yyv4730[:0]
			yyc4730 = true
		}
	} else if yyl4730 > 0 {
		var yyrr4730, yyrl4730 int
		var yyrt4730 bool
		if yyl4730 > cap(yyv4730) {

			yyrg4730 := len(yyv4730) > 0
			yyv24730 := yyv4730
			yyrl4730, yyrt4730 = z.DecInferLen(yyl4730, z.DecBasicHandle().MaxInitLen, 736)
			if yyrt4730 {
				if yyrl4730 <= cap(yyv4730) {
					yyv4730 = yyv4730[:yyrl4730]
				} else {
					yyv4730 = make([]PodTemplate, yyrl4730)
				}
			} else {
				yyv4730 = make([]PodTemplate, yyrl4730)
			}
			yyc4730 = true
			yyrr4730 = len(yyv4730)
			if yyrg4730 {
				copy(yyv4730, yyv24730)
			}
		} else if yyl4730 != len(yyv4730) {
			yyv4730 = yyv4730[:yyl4730]
			yyc4730 = true
		}
		yyj4730 := 0
		for ; yyj4730 < yyrr4730; yyj4730++ {
			yyh4730.ElemContainerState(yyj4730)
			if r.TryDecodeAsNil() {
				yyv4730[yyj4730] = PodTemplate{}
			} else {
				yyv4731 := &yyv4730[yyj4730]
				yyv4731.CodecDecodeSelf(d)
			}

		}
		if yyrt4730 {
			for ; yyj4730 < yyl4730; yyj4730++ {
				yyv4730 = append(yyv4730, PodTemplate{})
				yyh4730.ElemContainerState(yyj4730)
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = PodTemplate{}
				} else {
					yyv4732 := &yyv4730[yyj4730]
					yyv4732.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4730 := 0
		for ; !r.CheckBreak(); yyj4730++ {

			if yyj4730 >= len(yyv4730) {
				yyv4730 = append(yyv4730, PodTemplate{}) // var yyz4730 PodTemplate
				yyc4730 = true
			}
			yyh4730.ElemContainerState(yyj4730)
			if yyj4730 < len(yyv4730) {
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = PodTemplate{}
				} else {
					yyv4733 := &yyv4730[yyj4730]
					yyv4733.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4730 < len(yyv4730) {
			yyv4730 = yyv4730[:yyj4730]
			yyc4730 = true
		} else if yyj4730 == 0 && yyv4730 == nil {
			yyv4730 = []PodTemplate{}
			yyc4730 = true
		}
	}
	yyh4730.End()
	if yyc4730 {
		*v = yyv4730
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4734 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4735 := &yyv4734
		yy4735.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4736 := *v
	yyh4736, yyl4736 := z.DecSliceHelperStart()
	var yyc4736 bool
	if yyl4736 == 0 {
		if yyv4736 == nil {
			yyv4736 = []ReplicationControllerCondition{}
			yyc4736 = true
		} else if len(yyv4736) != 0 {
			yyv4736 = yyv4736[:0]
			yyc4736 = true
		}
	} else if yyl4736 > 0 {
		var yyrr4736, yyrl4736 int
		var yyrt4736 bool
		if yyl4736 > cap(yyv4736) {

			yyrg4736 := len(yyv4736) > 0
			yyv24736 := yyv4736
			yyrl4736, yyrt4736 = z.DecInferLen(yyl4736, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4736 {
				if yyrl4736 <= cap(yyv4736) {
					yyv4736 = yyv4736[:yyrl4736]
				} else {
					yyv4736 = make([]ReplicationControllerCondition, yyrl4736)
				}
			} else {
				yyv4736 = make([]ReplicationControllerCondition, yyrl4736)
			}
			yyc4736 = true
			yyrr4736 = len(yyv4736)
			if yyrg4736 {
				copy(yyv4736, yyv24736)
			}
		} else if yyl4736 != len(yyv4736) {
			yyv4736 = yyv4736[:yyl4736]
			yyc4736 = true
		}
		yyj4736 := 0
		for ; yyj4736 < yyrr4736; yyj4736++ {
			yyh4736.ElemContainerState(yyj4736)
			if r.TryDecodeAsNil() {
				yyv4736[yyj4736] = ReplicationControllerCondition{}
			} else {
				yyv4737 := &yyv4736[yyj4736]
				yyv4737.CodecDecodeSelf(d)
			}

		}
		if yyrt4736 {
			for ; yyj4736 < yyl4736; yyj4736++ {
				yyv4736 = append(yyv4736, ReplicationControllerCondition{})
				yyh4736.ElemContainerState(yyj4736)
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = ReplicationControllerCondition{}
				} else {
					yyv4738 := &yyv4736[yyj4736]
					yyv4738.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4736 := 0
		for ; !r.CheckBreak(); yyj4736++ {

			if yyj4736 >= len(yyv4736) {
				yyv4736 = append(yyv4736, ReplicationControllerCondition{}) // var yyz4736 ReplicationControllerCondition
				yyc4736 = true
			}
			yyh4736.ElemContainerState(yyj4736)
			if yyj4736 < len(yyv4736) {
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = ReplicationControllerCondition{}
				} else {
					yyv4739 := &yyv4736[yyj4736]
					yyv4739.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4736 < len(yyv4736) {
			yyv4736 = yyv4736[:yyj4736]
			yyc4736 = true
		} else if yyj4736 == 0 && yyv4736 == nil {
			yyv4736 = []ReplicationControllerCondition{}
			yyc4736 = true
		}
	}
	yyh4736.End()
	if yyc4736 {
		*v = yyv4736
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4740 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4741 := &yyv4740
		yy4741.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4742 := *v
	yyh4742, yyl4742 := z.DecSliceHelperStart()
	var yyc4742 bool
	if yyl4742 == 0 {
		if yyv4742 == nil {
			yyv4742 = []ReplicationController{}
			yyc4742 = true
		} else if len(yyv4742) != 0 {
			yyv4742 = yyv4742[:0]
			yyc4742 = true
		}
	} else if yyl4742 > 0 {
		var yyrr4742, yyrl4742 int
		var yyrt4742 bool
		if yyl4742 > cap(yyv4742) {

			yyrg4742 := len(yyv4742) > 0
			yyv24742 := yyv4742
			yyrl4742, yyrt4742 = z.DecInferLen(yyl4742, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt4742 {
				if yyrl4742 <= cap(yyv4742) {
					yyv4742 = yyv4742[:yyrl4742]
				} else {
					yyv4742 = make([]ReplicationController, yyrl4742)
				}
			} else {
				yyv4742 = make([]ReplicationController, yyrl4742)
			}
			yyc4742 = true
			yyrr4742 = len(yyv4742)
			if yyrg4742 {
				copy(yyv4742, yyv24742)
			}
		} else if yyl4742 != len(yyv4742) {
			yyv4742 = yyv4742[:yyl4742]
			yyc4742 = true
		}
		yyj4742 := 0
		for ; yyj4742 < yyrr4742; yyj4742++ {
			yyh4742.ElemContainerState(yyj4742)
			if r.TryDecodeAsNil() {
				yyv4742[yyj4742] = ReplicationController{}
			} else {
				yyv4743 := &yyv4742[yyj4742]
				yyv4743.CodecDecodeSelf(d)
			}

		}
		if yyrt4742 {
			for ; yyj4742 < yyl4742; yyj4742++ {
				yyv4742 = append(yyv4742, ReplicationController{})
				yyh4742.ElemContainerState(yyj4742)
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = ReplicationController{}
				} else {
					yyv4744 := &yyv4742[yyj4742]
					yyv4744.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4742 := 0
		for ; !r.CheckBreak(); yyj4742++ {

			if yyj4742 >= len(yyv4742) {
				yyv4742 = append(yyv4742, ReplicationController{}) // var yyz4742 ReplicationController
				yyc4742 = true
			}
			yyh4742.ElemContainerState(yyj4742)
			if yyj4742 < len(yyv4742) {
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = ReplicationController{}
				} else {
					yyv4745 := &yyv4742[yyj4742]
					yyv4745.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4742 < len(yyv4742) {
			yyv4742 = yyv4742[:yyj4742]
			yyc4742 = true
		} else if yyj4742 == 0 && yyv4742 == nil {
			yyv4742 = []ReplicationController{}
			yyc4742 = true
		}
	}
	yyh4742.End()
	if yyc4742 {
		*v = yyv4742
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4746 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4747 := &yyv4746
		yy4747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4748 := *v
	yyh4748, yyl4748 := z.DecSliceHelperStart()
	var yyc4748 bool
	if yyl4748 == 0 {
		if yyv4748 == nil {
			yyv4748 = []LoadBalancerIngress{}
			yyc4748 = true
		} else if len(yyv4748) != 0 {
			yyv4748 = yyv4748[:0]
			yyc4748 = true
		}
	} else if yyl4748 > 0 {
		var yyrr4748, yyrl4748 int
		var yyrt4748 bool
		if yyl4748 > cap(yyv4748) {

			yyrg4748 := len(yyv4748) > 0
			yyv24748 := yyv4748
			yyrl4748, yyrt4748 = z.DecInferLen(yyl4748, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4748 {
				if yyrl4748 <= cap(yyv4748) {
					yyv4748 = yyv4748[:yyrl4748]
				} else {
					yyv4748 = make([]LoadBalancerIngress, yyrl4748)
				}
			} else {
				yyv4748 = make([]LoadBalancerIngress, yyrl4748)
			}
			yyc4748 = true
			yyrr4748 = len(yyv4748)
			if yyrg4748 {
				copy(yyv4748, yyv24748)
			}
		} else if yyl4748 != len(yyv4748) {
			yyv4748 = yyv4748[:yyl4748]
			yyc4748 = true
		}
		yyj4748 := 0
		for ; yyj4748 < yyrr4748; yyj4748++ {
			yyh4748.ElemContainerState(yyj4748)
			if r.TryDecodeAsNil() {
				yyv4748[yyj4748] = LoadBalancerIngress{}
			} else {
				yyv4749 := &yyv4748[yyj4748]
				yyv4749.CodecDecodeSelf(d)
			}

		}
		if yyrt4748 {
			for ; yyj4748 < yyl4748; yyj4748++ {
				yyv4748 = append(yyv4748, LoadBalancerIngress{})
				yyh4748.ElemContainerState(yyj4748)
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = LoadBalancerIngress{}
				} else {
					yyv4750 := &yyv4748[yyj4748]
					yyv4750.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4748 := 0
		for ; !r.CheckBreak(); yyj4748++ {

			if yyj4748 >= len(yyv4748) {
				yyv4748 = append(yyv4748, LoadBalancerIngress{}) // var yyz4748 LoadBalancerIngress
				yyc4748 = true
			}
			yyh4748.ElemContainerState(yyj4748)
			if yyj4748 < len(yyv4748) {
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = LoadBalancerIngress{}
				} else {
					yyv4751 := &yyv4748[yyj4748]
					yyv4751.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4748 < len(yyv4748) {
			yyv4748 = yyv4748[:yyj4748]
			yyc4748 = true
		} else if yyj4748 == 0 && yyv4748 == nil {
			yyv4748 = []LoadBalancerIngress{}
			yyc4748 = true
		}
	}
	yyh4748.End()
	if yyc4748 {
		*v = yyv4748
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4753 := &yyv4752
		yy4753.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4754 := *v
	yyh4754, yyl4754 := z.DecSliceHelperStart()
	var yyc4754 bool
	if yyl4754 == 0 {
		if yyv4754 == nil {
			yyv4754 = []ServicePort{}
			yyc4754 = true
		} else if len(yyv4754) != 0 {
			yyv4754 = yyv4754[:0]
			yyc4754 = true
		}
	} else if yyl4754 > 0 {
		var yyrr4754, yyrl4754 int
		var yyrt4754 bool
		if yyl4754 > cap(yyv4754) {

			yyrg4754 := len(yyv4754) > 0
			yyv24754 := yyv4754
			yyrl4754, yyrt4754 = z.DecInferLen(yyl4754, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4754 {
				if yyrl4754 <= cap(yyv4754) {
					yyv4754 = yyv4754[:yyrl4754]
				} else {
					yyv4754 = make([]ServicePort, yyrl4754)
				}
			} else {
				yyv4754 = make([]ServicePort, yyrl4754)
			}
			yyc4754 = true
			yyrr4754 = len(yyv4754)
			if yyrg4754 {
				copy(yyv4754, yyv24754)
			}
		} else if yyl4754 != len(yyv4754) {
			yyv4754 = yyv4754[:yyl4754]
			yyc4754 = true
		}
		yyj4754 := 0
		for ; yyj4754 < yyrr4754; yyj4754++ {
			yyh4754.ElemContainerState(yyj4754)
			if r.TryDecodeAsNil() {
				yyv4754[yyj4754] = ServicePort{}
			} else {
				yyv4755 := &yyv4754[yyj4754]
				yyv4755.CodecDecodeSelf(d)
			}

		}
		if yyrt4754 {
			for ; yyj4754 < yyl4754; yyj4754++ {
				yyv4754 = append(yyv4754, ServicePort{})
				yyh4754.ElemContainerState(yyj4754)
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = ServicePort{}
				} else {
					yyv4756 := &yyv4754[yyj4754]
					yyv4756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4754 := 0
		for ; !r.CheckBreak(); yyj4754++ {

			if yyj4754 >= len(yyv4754) {
				yyv4754 = append(yyv4754, ServicePort{}) // var yyz4754 ServicePort
				yyc4754 = true
			}
			yyh4754.ElemContainerState(yyj4754)
			if yyj4754 < len(yyv4754) {
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = ServicePort{}
				} else {
					yyv4757 := &yyv4754[yyj4754]
					yyv4757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4754 < len(yyv4754) {
			yyv4754 = yyv4754[:yyj4754]
			yyc4754 = true
		} else if yyj4754 == 0 && yyv4754 == nil {
			yyv4754 = []ServicePort{}
			yyc4754 = true
		}
	}
	yyh4754.End()
	if yyc4754 {
		*v = yyv4754
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4758 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4759 := &yyv4758
		yy4759.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4760 := *v
	yyh4760, yyl4760 := z.DecSliceHelperStart()
	var yyc4760 bool
	if yyl4760 == 0 {
		if yyv4760 == nil {
			yyv4760 = []Service{}
			yyc4760 = true
		} else if len(yyv4760) != 0 {
			yyv4760 = yyv4760[:0]
			yyc4760 = true
		}
	} else if yyl4760 > 0 {
		var yyrr4760, yyrl4760 int
		var yyrt4760 bool
		if yyl4760 > cap(yyv4760) {

			yyrg4760 := len(yyv4760) > 0
			yyv24760 := yyv4760
			yyrl4760, yyrt4760 = z.DecInferLen(yyl4760, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4760 {
				if yyrl4760 <= cap(yyv4760) {
					yyv4760 = yyv4760[:yyrl4760]
				} else {
					yyv4760 = make([]Service, yyrl4760)
				}
			} else {
				yyv4760 = make([]Service, yyrl4760)
			}
			yyc4760 = true
			yyrr4760 = len(yyv4760)
			if yyrg4760 {
				copy(yyv4760, yyv24760)
			}
		} else if yyl4760 != len(yyv4760) {
			yyv4760 = yyv4760[:yyl4760]
			yyc4760 = true
		}
		yyj4760 := 0
		for ; yyj4760 < yyrr4760; yyj4760++ {
			yyh4760.ElemContainerState(yyj4760)
			if r.TryDecodeAsNil() {
				yyv4760[yyj4760] = Service{}
			} else {
				yyv4761 := &yyv4760[yyj4760]
				yyv4761.CodecDecodeSelf(d)
			}

		}
		if yyrt4760 {
			for ; yyj4760 < yyl4760; yyj4760++ {
				yyv4760 = append(yyv4760, Service{})
				yyh4760.ElemContainerState(yyj4760)
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = Service{}
				} else {
					yyv4762 := &yyv4760[yyj4760]
					yyv4762.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4760 := 0
		for ; !r.CheckBreak(); yyj4760++ {

			if yyj4760 >= len(yyv4760) {
				yyv4760 = append(yyv4760, Service{}) // var yyz4760 Service
				yyc4760 = true
			}
			yyh4760.ElemContainerState(yyj4760)
			if yyj4760 < len(yyv4760) {
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = Service{}
				} else {
					yyv4763 := &yyv4760[yyj4760]
					yyv4763.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4760 < len(yyv4760) {
			yyv4760 = yyv4760[:yyj4760]
			yyc4760 = true
		} else if yyj4760 == 0 && yyv4760 == nil {
			yyv4760 = []Service{}
			yyc4760 = true
		}
	}
	yyh4760.End()
	if yyc4760 {
		*v = yyv4760
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4764 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4765 := &yyv4764
		yy4765.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4766 := *v
	yyh4766, yyl4766 := z.DecSliceHelperStart()
	var yyc4766 bool
	if yyl4766 == 0 {
		if yyv4766 == nil {
			yyv4766 = []ObjectReference{}
			yyc4766 = true
		} else if len(yyv4766) != 0 {
			yyv4766 = yyv4766[:0]
			yyc4766 = true
		}
	} else if yyl4766 > 0 {
		var yyrr4766, yyrl4766 int
		var yyrt4766 bool
		if yyl4766 > cap(yyv4766) {

			yyrg4766 := len(yyv4766) > 0
			yyv24766 := yyv4766
			yyrl4766, yyrt4766 = z.DecInferLen(yyl4766, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4766 {
				if yyrl4766 <= cap(yyv4766) {
					yyv4766 = yyv4766[:yyrl4766]
				} else {
					yyv4766 = make([]ObjectReference, yyrl4766)
				}
			} else {
				yyv4766 = make([]ObjectReference, yyrl4766)
			}
			yyc4766 = true
			yyrr4766 = len(yyv4766)
			if yyrg4766 {
				copy(yyv4766, yyv24766)
			}
		} else if yyl4766 != len(yyv4766) {
			yyv4766 = yyv4766[:yyl4766]
			yyc4766 = true
		}
		yyj4766 := 0
		for ; yyj4766 < yyrr4766; yyj4766++ {
			yyh4766.ElemContainerState(yyj4766)
			if r.TryDecodeAsNil() {
				yyv4766[yyj4766] = ObjectReference{}
			} else {
				yyv4767 := &yyv4766[yyj4766]
				yyv4767.CodecDecodeSelf(d)
			}

		}
		if yyrt4766 {
			for ; yyj4766 < yyl4766; yyj4766++ {
				yyv4766 = append(yyv4766, ObjectReference{})
				yyh4766.ElemContainerState(yyj4766)
				if r.TryDecodeAsNil() {
					yyv4766[yyj4766] = ObjectReference{}
				} else {
					yyv4768 := &yyv4766[yyj4766]
					yyv4768.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4766 := 0
		for ; !r.CheckBreak(); yyj4766++ {

			if yyj4766 >= len(yyv4766) {
				yyv4766 = append(yyv4766, ObjectReference{}) // var yyz4766 ObjectReference
				yyc4766 = true
			}
			yyh4766.ElemContainerState(yyj4766)
			if yyj4766 < len(yyv4766) {
				if r.TryDecodeAsNil() {
					yyv4766[yyj4766] = ObjectReference{}
				} else {
					yyv4769 := &yyv4766[yyj4766]
					yyv4769.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4766 < len(yyv4766) {
			yyv4766 = yyv4766[:yyj4766]
			yyc4766 = true
		} else if yyj4766 == 0 && yyv4766 == nil {
			yyv4766 = []ObjectReference{}
			yyc4766 = true
		}
	}
	yyh4766.End()
	if yyc4766 {
		*v = yyv4766
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4770 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4771 := &yyv4770
		yy4771.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4772 := *v
	yyh4772, yyl4772 := z.DecSliceHelperStart()
	var yyc4772 bool
	if yyl4772 == 0 {
		if yyv4772 == nil {
			yyv4772 = []ServiceAccount{}
			yyc4772 = true
		} else if len(yyv4772) != 0 {
			yyv4772 = yyv4772[:0]
			yyc4772 = true
		}
	} else if yyl4772 > 0 {
		var yyrr4772, yyrl4772 int
		var yyrt4772 bool
		if yyl4772 > cap(yyv4772) {

			yyrg4772 := len(yyv4772) > 0
			yyv24772 := yyv4772
			yyrl4772, yyrt4772 = z.DecInferLen(yyl4772, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4772 {
				if yyrl4772 <= cap(yyv4772) {
					yyv4772 = yyv4772[:yyrl4772]
				} else {
					yyv4772 = make([]ServiceAccount, yyrl4772)
				}
			} else {
				yyv4772 = make([]ServiceAccount, yyrl4772)
			}
			yyc4772 = true
			yyrr4772 = len(yyv4772)
			if yyrg4772 {
				copy(yyv4772, yyv24772)
			}
		} else if yyl4772 != len(yyv4772) {
			yyv4772 = yyv4772[:yyl4772]
			yyc4772 = true
		}
		yyj4772 := 0
		for ; yyj4772 < yyrr4772; yyj4772++ {
			yyh4772.ElemContainerState(yyj4772)
			if r.TryDecodeAsNil() {
				yyv4772[yyj4772] = ServiceAccount{}
			} else {
				yyv4773 := &yyv4772[yyj4772]
				yyv4773.CodecDecodeSelf(d)
			}

		}
		if yyrt4772 {
			for ; yyj4772 < yyl4772; yyj4772++ {
				yyv4772 = append(yyv4772, ServiceAccount{})
				yyh4772.ElemContainerState(yyj4772)
				if r.TryDecodeAsNil() {
					yyv4772[yyj4772] = ServiceAccount{}
				} else {
					yyv4774 := &yyv4772[yyj4772]
					yyv4774.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4772 := 0
		for ; !r.CheckBreak(); yyj4772++ {

			if yyj4772 >= len(yyv4772) {
				yyv4772 = append(yyv4772, ServiceAccount{}) // var yyz4772 ServiceAccount
				yyc4772 = true
			}
			yyh4772.ElemContainerState(yyj4772)
			if yyj4772 < len(yyv4772) {
				if r.TryDecodeAsNil() {
					yyv4772[yyj4772] = ServiceAccount{}
				} else {
					yyv4775 := &yyv4772[yyj4772]
					yyv4775.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4772 < len(yyv4772) {
			yyv4772 = yyv4772[:yyj4772]
			yyc4772 = true
		} else if yyj4772 == 0 && yyv4772 == nil {
			yyv4772 = []ServiceAccount{}
			yyc4772 = true
		}
	}
	yyh4772.End()
	if yyc4772 {
		*v = yyv4772
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4776 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4777 := &yyv4776
		yy4777.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4778 := *v
	yyh4778, yyl4778 := z.DecSliceHelperStart()
	var yyc4778 bool
	if yyl4778 == 0 {
		if yyv4778 == nil {
			yyv4778 = []EndpointSubset{}
			yyc4778 = true
		} else if len(yyv4778) != 0 {
			yyv4778 = yyv4778[:0]
			yyc4778 = true
		}
	} else if yyl4778 > 0 {
		var yyrr4778, yyrl4778 int
		var yyrt4778 bool
		if yyl4778 > cap(yyv4778) {

			yyrg4778 := len(yyv4778) > 0
			yyv24778 := yyv4778
			yyrl4778, yyrt4778 = z.DecInferLen(yyl4778, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4778 {
				if yyrl4778 <= cap(yyv4778) {
					yyv4778 = yyv4778[:yyrl4778]
				} else {
					yyv4778 = make([]EndpointSubset, yyrl4778)
				}
			} else {
				yyv4778 = make([]EndpointSubset, yyrl4778)
			}
			yyc4778 = true
			yyrr4778 = len(yyv4778)
			if yyrg4778 {
				copy(yyv4778, yyv24778)
			}
		} else if yyl4778 != len(yyv4778) {
			yyv4778 = yyv4778[:yyl4778]
			yyc4778 = true
		}
		yyj4778 := 0
		for ; yyj4778 < yyrr4778; yyj4778++ {
			yyh4778.ElemContainerState(yyj4778)
			if r.TryDecodeAsNil() {
				yyv4778[yyj4778] = EndpointSubset{}
			} else {
				yyv4779 := &yyv4778[yyj4778]
				yyv4779.CodecDecodeSelf(d)
			}

		}
		if yyrt4778 {
			for ; yyj4778 < yyl4778; yyj4778++ {
				yyv4778 = append(yyv4778, EndpointSubset{})
				yyh4778.ElemContainerState(yyj4778)
				if r.TryDecodeAsNil() {
					yyv4778[yyj4778] = EndpointSubset{}
				} else {
					yyv4780 := &yyv4778[yyj4778]
					yyv4780.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4778 := 0
		for ; !r.CheckBreak(); yyj4778++ {

			if yyj4778 >= len(yyv4778) {
				yyv4778 = append(yyv4778, EndpointSubset{}) // var yyz4778 EndpointSubset
				yyc4778 = true
			}
			yyh4778.ElemContainerState(yyj4778)
			if yyj4778 < len(yyv4778) {
				if r.TryDecodeAsNil() {
					yyv4778[yyj4778] = EndpointSubset{}
				} else {
					yyv4781 := &yyv4778[yyj4778]
					yyv4781.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4778 < len(yyv4778) {
			yyv4778 = yyv4778[:yyj4778]
			yyc4778 = true
		} else if yyj4778 == 0 && yyv4778 == nil {
			yyv4778 = []EndpointSubset{}
			yyc4778 = true
		}
	}
	yyh4778.End()
	if yyc4778 {
		*v = yyv4778
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4782 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4783 := &yyv4782
		yy4783.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4784 := *v
	yyh4784, yyl4784 := z.DecSliceHelperStart()
	var yyc4784 bool
	if yyl4784 == 0 {
		if yyv4784 == nil {
			yyv4784 = []EndpointAddress{}
			yyc4784 = true
		} else if len(yyv4784) != 0 {
			yyv4784 = yyv4784[:0]
			yyc4784 = true
		}
	} else if yyl4784 > 0 {
		var yyrr4784, yyrl4784 int
		var yyrt4784 bool
		if yyl4784 > cap(yyv4784) {

			yyrg4784 := len(yyv4784) > 0
			yyv24784 := yyv4784
			yyrl4784, yyrt4784 = z.DecInferLen(yyl4784, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4784 {
				if yyrl4784 <= cap(yyv4784) {
					yyv4784 = yyv4784[:yyrl4784]
				} else {
					yyv4784 = make([]EndpointAddress, yyrl4784)
				}
			} else {
				yyv4784 = make([]EndpointAddress, yyrl4784)
			}
			yyc4784 = true
			yyrr4784 = len(yyv4784)
			if yyrg4784 {
				copy(yyv4784, yyv24784)
			}
		} else if yyl4784 != len(yyv4784) {
			yyv4784 = yyv4784[:yyl4784]
			yyc4784 = true
		}
		yyj4784 := 0
		for ; yyj4784 < yyrr4784; yyj4784++ {
			yyh4784.ElemContainerState(yyj4784)
			if r.TryDecodeAsNil() {
				yyv4784[yyj4784] = EndpointAddress{}
			} else {
				yyv4785 := &yyv4784[yyj4784]
				yyv4785.CodecDecodeSelf(d)
			}

		}
		if yyrt4784 {
			for ; yyj4784 < yyl4784; yyj4784++ {
				yyv4784 = append(yyv4784, EndpointAddress{})
				yyh4784.ElemContainerState(yyj4784)
				if r.TryDecodeAsNil() {
					yyv4784[yyj4784] = EndpointAddress{}
				} else {
					yyv4786 := &yyv4784[yyj4784]
					yyv4786.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4784 := 0
		for ; !r.CheckBreak(); yyj4784++ {

			if yyj4784 >= len(yyv4784) {
				yyv4784 = append(yyv4784, EndpointAddress{}) // var yyz4784 EndpointAddress
				yyc4784 = true
			}
			yyh4784.ElemContainerState(yyj4784)
			if yyj4784 < len(yyv4784) {
				if r.TryDecodeAsNil() {
					yyv4784[yyj4784] = EndpointAddress{}
				} else {
					yyv4787 := &yyv4784[yyj4784]
					yyv4787.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4784 < len(yyv4784) {
			yyv4784 = yyv4784[:yyj4784]
			yyc4784 = true
		} else if yyj4784 == 0 && yyv4784 == nil {
			yyv4784 = []EndpointAddress{}
			yyc4784 = true
		}
	}
	yyh4784.End()
	if yyc4784 {
		*v = yyv4784
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4788 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4789 := &yyv4788
		yy4789.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4790 := *v
	yyh4790, yyl4790 := z.DecSliceHelperStart()
	var yyc4790 bool
	if yyl4790 == 0 {
		if yyv4790 == nil {
			yyv4790 = []EndpointPort{}
			yyc4790 = true
		} else if len(yyv4790) != 0 {
			yyv4790 = yyv4790[:0]
			yyc4790 = true
		}
	} else if yyl4790 > 0 {
		var yyrr4790, yyrl4790 int
		var yyrt4790 bool
		if yyl4790 > cap(yyv4790) {

			yyrg4790 := len(yyv4790) > 0
			yyv24790 := yyv4790
			yyrl4790, yyrt4790 = z.DecInferLen(yyl4790, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4790 {
				if yyrl4790 <= cap(yyv4790) {
					yyv4790 = yyv4790[:yyrl4790]
				} else {
					yyv4790 = make([]EndpointPort, yyrl4790)
				}
			} else {
				yyv4790 = make([]EndpointPort, yyrl4790)
			}
			yyc4790 = true
			yyrr4790 = len(yyv4790)
			if yyrg4790 {
				copy(yyv4790, yyv24790)
			}
		} else if yyl4790 != len(yyv4790) {
			yyv4790 = yyv4790[:yyl4790]
			yyc4790 = true
		}
		yyj4790 := 0
		for ; yyj4790 < yyrr4790; yyj4790++ {
			yyh4790.ElemContainerState(yyj4790)
			if r.TryDecodeAsNil() {
				yyv4790[yyj4790] = EndpointPort{}
			} else {
				yyv4791 := &yyv4790[yyj4790]
				yyv4791.CodecDecodeSelf(d)
			}

		}
		if yyrt4790 {
			for ; yyj4790 < yyl4790; yyj4790++ {
				yyv4790 = append(yyv4790, EndpointPort{})
				yyh4790.ElemContainerState(yyj4790)
				if r.TryDecodeAsNil() {
					yyv4790[yyj4790] = EndpointPort{}
				} else {
					yyv4792 := &yyv4790[yyj4790]
					yyv4792.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4790 := 0
		for ; !r.CheckBreak(); yyj4790++ {

			if yyj4790 >= len(yyv4790) {
				yyv4790 = append(yyv4790, EndpointPort{}) // var yyz4790 EndpointPort
				yyc4790 = true
			}
			yyh4790.ElemContainerState(yyj4790)
			if yyj4790 < len(yyv4790) {
				if r.TryDecodeAsNil() {
					yyv4790[yyj4790] = EndpointPort{}
				} else {
					yyv4793 := &yyv4790[yyj4790]
					yyv4793.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4790 < len(yyv4790) {
			yyv4790 = yyv4790[:yyj4790]
			yyc4790 = true
		} else if yyj4790 == 0 && yyv4790 == nil {
			yyv4790 = []EndpointPort{}
			yyc4790 = true
		}
	}
	yyh4790.End()
	if yyc4790 {
		*v = yyv4790
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4794 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4795 := &yyv4794
		yy4795.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4796 := *v
	yyh4796, yyl4796 := z.DecSliceHelperStart()
	var yyc4796 bool
	if yyl4796 == 0 {
		if yyv4796 == nil {
			yyv4796 = []Endpoints{}
			yyc4796 = true
		} else if len(yyv4796) != 0 {
			yyv4796 = yyv4796[:0]
			yyc4796 = true
		}
	} else if yyl4796 > 0 {
		var yyrr4796, yyrl4796 int
		var yyrt4796 bool
		if yyl4796 > cap(yyv4796) {

			yyrg4796 := len(yyv4796) > 0
			yyv24796 := yyv4796
			yyrl4796, yyrt4796 = z.DecInferLen(yyl4796, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4796 {
				if yyrl4796 <= cap(yyv4796) {
					yyv4796 = yyv4796[:yyrl4796]
				} else {
					yyv4796 = make([]Endpoints, yyrl4796)
				}
			} else {
				yyv4796 = make([]Endpoints, yyrl4796)
			}
			yyc4796 = true
			yyrr4796 = len(yyv4796)
			if yyrg4796 {
				copy(yyv4796, yyv24796)
			}
		} else if yyl4796 != len(yyv4796) {
			yyv4796 = yyv4796[:yyl4796]
			yyc4796 = true
		}
		yyj4796 := 0
		for ; yyj4796 < yyrr4796; yyj4796++ {
			yyh4796.ElemContainerState(yyj4796)
			if r.TryDecodeAsNil() {
				yyv4796[yyj4796] = Endpoints{}
			} else {
				yyv4797 := &yyv4796[yyj4796]
				yyv4797.CodecDecodeSelf(d)
			}

		}
		if yyrt4796 {
			for ; yyj4796 < yyl4796; yyj4796++ {
				yyv4796 = append(yyv4796, Endpoints{})
				yyh4796.ElemContainerState(yyj4796)
				if r.TryDecodeAsNil() {
					yyv4796[yyj4796] = Endpoints{}
				} else {
					yyv4798 := &yyv4796[yyj4796]
					yyv4798.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4796 := 0
		for ; !r.CheckBreak(); yyj4796++ {

			if yyj4796 >= len(yyv4796) {
				yyv4796 = append(yyv4796, Endpoints{}) // var yyz4796 Endpoints
				yyc4796 = true
			}
			yyh4796.ElemContainerState(yyj4796)
			if yyj4796 < len(yyv4796) {
				if r.TryDecodeAsNil() {
					yyv4796[yyj4796] = Endpoints{}
				} else {
					yyv4799 := &yyv4796[yyj4796]
					yyv4799.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4796 < len(yyv4796) {
			yyv4796 = yyv4796[:yyj4796]
			yyc4796 = true
		} else if yyj4796 == 0 && yyv4796 == nil {
			yyv4796 = []Endpoints{}
			yyc4796 = true
		}
	}
	yyh4796.End()
	if yyc4796 {
		*v = yyv4796
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4800 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4801 := &yyv4800
		yy4801.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4802 := *v
	yyh4802, yyl4802 := z.DecSliceHelperStart()
	var yyc4802 bool
	if yyl4802 == 0 {
		if yyv4802 == nil {
			yyv4802 = []NodeCondition{}
			yyc4802 = true
		} else if len(yyv4802) != 0 {
			yyv4802 = yyv4802[:0]
			yyc4802 = true
		}
	} else if yyl4802 > 0 {
		var yyrr4802, yyrl4802 int
		var yyrt4802 bool
		if yyl4802 > cap(yyv4802) {

			yyrg4802 := len(yyv4802) > 0
			yyv24802 := yyv4802
			yyrl4802, yyrt4802 = z.DecInferLen(yyl4802, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4802 {
				if yyrl4802 <= cap(yyv4802) {
					yyv4802 = yyv4802[:yyrl4802]
				} else {
					yyv4802 = make([]NodeCondition, yyrl4802)
				}
			} else {
				yyv4802 = make([]NodeCondition, yyrl4802)
			}
			yyc4802 = true
			yyrr4802 = len(yyv4802)
			if yyrg4802 {
				copy(yyv4802, yyv24802)
			}
		} else if yyl4802 != len(yyv4802) {
			yyv4802 = yyv4802[:yyl4802]
			yyc4802 = true
		}
		yyj4802 := 0
		for ; yyj4802 < yyrr4802; yyj4802++ {
			yyh4802.ElemContainerState(yyj4802)
			if r.TryDecodeAsNil() {
				yyv4802[yyj4802] = NodeCondition{}
			} else {
				yyv4803 := &yyv4802[yyj4802]
				yyv4803.CodecDecodeSelf(d)
			}

		}
		if yyrt4802 {
			for ; yyj4802 < yyl4802; yyj4802++ {
				yyv4802 = append(yyv4802, NodeCondition{})
				yyh4802.ElemContainerState(yyj4802)
				if r.TryDecodeAsNil() {
					yyv4802[yyj4802] = NodeCondition{}
				} else {
					yyv4804 := &yyv4802[yyj4802]
					yyv4804.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4802 := 0
		for ; !r.CheckBreak(); yyj4802++ {

			if yyj4802 >= len(yyv4802) {
				yyv4802 = append(yyv4802, NodeCondition{}) // var yyz4802 NodeCondition
				yyc4802 = true
			}
			yyh4802.ElemContainerState(yyj4802)
			if yyj4802 < len(yyv4802) {
				if r.TryDecodeAsNil() {
					yyv4802[yyj4802] = NodeCondition{}
				} else {
					yyv4805 := &yyv4802[yyj4802]
					yyv4805.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4802 < len(yyv4802) {
			yyv4802 = yyv4802[:yyj4802]
			yyc4802 = true
		} else if yyj4802 == 0 && yyv4802 == nil {
			yyv4802 = []NodeCondition{}
			yyc4802 = true
		}
	}
	yyh4802.End()
	if yyc4802 {
		*v = yyv4802
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4806 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4807 := &yyv4806
		yy4807.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4808 := *v
	yyh4808, yyl4808 := z.DecSliceHelperStart()
	var yyc4808 bool
	if yyl4808 == 0 {
		if yyv4808 == nil {
			yyv4808 = []NodeAddress{}
			yyc4808 = true
		} else if len(yyv4808) != 0 {
			yyv4808 = yyv4808[:0]
			yyc4808 = true
		}
	} else if yyl4808 > 0 {
		var yyrr4808, yyrl4808 int
		var yyrt4808 bool
		if yyl4808 > cap(yyv4808) {

			yyrg4808 := len(yyv4808) > 0
			yyv24808 := yyv4808
			yyrl4808, yyrt4808 = z.DecInferLen(yyl4808, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4808 {
				if yyrl4808 <= cap(yyv4808) {
					yyv4808 = yyv4808[:yyrl4808]
				} else {
					yyv4808 = make([]NodeAddress, yyrl4808)
				}
			} else {
				yyv4808 = make([]NodeAddress, yyrl4808)
			}
			yyc4808 = true
			yyrr4808 = len(yyv4808)
			if yyrg4808 {
				copy(yyv4808, yyv24808)
			}
		} else if yyl4808 != len(yyv4808) {
			yyv4808 = yyv4808[:yyl4808]
			yyc4808 = true
		}
		yyj4808 := 0
		for ; yyj4808 < yyrr4808; yyj4808++ {
			yyh4808.ElemContainerState(yyj4808)
			if r.TryDecodeAsNil() {
				yyv4808[yyj4808] = NodeAddress{}
			} else {
				yyv4809 := &yyv4808[yyj4808]
				yyv4809.CodecDecodeSelf(d)
			}

		}
		if yyrt4808 {
			for ; yyj4808 < yyl4808; yyj4808++ {
				yyv4808 = append(yyv4808, NodeAddress{})
				yyh4808.ElemContainerState(yyj4808)
				if r.TryDecodeAsNil() {
					yyv4808[yyj4808] = NodeAddress{}
				} else {
					yyv4810 := &yyv4808[yyj4808]
					yyv4810.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4808 := 0
		for ; !r.CheckBreak(); yyj4808++ {

			if yyj4808 >= len(yyv4808) {
				yyv4808 = append(yyv4808, NodeAddress{}) // var yyz4808 NodeAddress
				yyc4808 = true
			}
			yyh4808.ElemContainerState(yyj4808)
			if yyj4808 < len(yyv4808) {
				if r.TryDecodeAsNil() {
					yyv4808[yyj4808] = NodeAddress{}
				} else {
					yyv4811 := &yyv4808[yyj4808]
					yyv4811.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4808 < len(yyv4808) {
			yyv4808 = yyv4808[:yyj4808]
			yyc4808 = true
		} else if yyj4808 == 0 && yyv4808 == nil {
			yyv4808 = []NodeAddress{}
			yyc4808 = true
		}
	}
	yyh4808.End()
	if yyc4808 {
		*v = yyv4808
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4812 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4813 := &yyv4812
		yy4813.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4814 := *v
	yyh4814, yyl4814 := z.DecSliceHelperStart()
	var yyc4814 bool
	if yyl4814 == 0 {
		if yyv4814 == nil {
			yyv4814 = []ContainerImage{}
			yyc4814 = true
		} else if len(yyv4814) != 0 {
			yyv4814 = yyv4814[:0]
			yyc4814 = true
		}
	} else if yyl4814 > 0 {
		var yyrr4814, yyrl4814 int
		var yyrt4814 bool
		if yyl4814 > cap(yyv4814) {

			yyrg4814 := len(yyv4814) > 0
			yyv24814 := yyv4814
			yyrl4814, yyrt4814 = z.DecInferLen(yyl4814, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4814 {
				if yyrl4814 <= cap(yyv4814) {
					yyv4814 = yyv4814[:yyrl4814]
				} else {
					yyv4814 = make([]ContainerImage, yyrl4814)
				}
			} else {
				yyv4814 = make([]ContainerImage, yyrl4814)
			}
			yyc4814 = true
			yyrr4814 = len(yyv4814)
			if yyrg4814 {
				copy(yyv4814, yyv24814)
			}
		} else if yyl4814 != len(yyv4814) {
			yyv4814 = yyv4814[:yyl4814]
			yyc4814 = true
		}
		yyj4814 := 0
		for ; yyj4814 < yyrr4814; yyj4814++ {
			yyh4814.ElemContainerState(yyj4814)
			if r.TryDecodeAsNil() {
				yyv4814[yyj4814] = ContainerImage{}
			} else {
				yyv4815 := &yyv4814[yyj4814]
				yyv4815.CodecDecodeSelf(d)
			}

		}
		if yyrt4814 {
			for ; yyj4814 < yyl4814; yyj4814++ {
				yyv4814 = append(yyv4814, ContainerImage{})
				yyh4814.ElemContainerState(yyj4814)
				if r.TryDecodeAsNil() {
					yyv4814[yyj4814] = ContainerImage{}
				} else {
					yyv4816 := &yyv4814[yyj4814]
					yyv4816.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4814 := 0
		for ; !r.CheckBreak(); yyj4814++ {

			if yyj4814 >= len(yyv4814) {
				yyv4814 = append(yyv4814, ContainerImage{}) // var yyz4814 ContainerImage
				yyc4814 = true
			}
			yyh4814.ElemContainerState(yyj4814)
			if yyj4814 < len(yyv4814) {
				if r.TryDecodeAsNil() {
					yyv4814[yyj4814] = ContainerImage{}
				} else {
					yyv4817 := &yyv4814[yyj4814]
					yyv4817.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4814 < len(yyv4814) {
			yyv4814 = yyv4814[:yyj4814]
			yyc4814 = true
		} else if yyj4814 == 0 && yyv4814 == nil {
			yyv4814 = []ContainerImage{}
			yyc4814 = true
		}
	}
	yyh4814.End()
	if yyc4814 {
		*v = yyv4814
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4818 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4818.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4819 := *v
	yyh4819, yyl4819 := z.DecSliceHelperStart()
	var yyc4819 bool
	if yyl4819 == 0 {
		if yyv4819 == nil {
			yyv4819 = []UniqueVolumeName{}
			yyc4819 = true
		} else if len(yyv4819) != 0 {
			yyv4819 = yyv4819[:0]
			yyc4819 = true
		}
	} else if yyl4819 > 0 {
		var yyrr4819, yyrl4819 int
		var yyrt4819 bool
		if yyl4819 > cap(yyv4819) {

			yyrl4819, yyrt4819 = z.DecInferLen(yyl4819, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4819 {
				if yyrl4819 <= cap(yyv4819) {
					yyv4819 = yyv4819[:yyrl4819]
				} else {
					yyv4819 = make([]UniqueVolumeName, yyrl4819)
				}
			} else {
				yyv4819 = make([]UniqueVolumeName, yyrl4819)
			}
			yyc4819 = true
			yyrr4819 = len(yyv4819)
		} else if yyl4819 != len(yyv4819) {
			yyv4819 = yyv4819[:yyl4819]
			yyc4819 = true
		}
		yyj4819 := 0
		for ; yyj4819 < yyrr4819; yyj4819++ {
			yyh4819.ElemContainerState(yyj4819)
			if r.TryDecodeAsNil() {
				yyv4819[yyj4819] = ""
			} else {
				yyv4819[yyj4819] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4819 {
			for ; yyj4819 < yyl4819; yyj4819++ {
				yyv4819 = append(yyv4819, "")
				yyh4819.ElemContainerState(yyj4819)
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = ""
				} else {
					yyv4819[yyj4819] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4819 := 0
		for ; !r.CheckBreak(); yyj4819++ {

			if yyj4819 >= len(yyv4819) {
				yyv4819 = append(yyv4819, "") // var yyz4819 UniqueVolumeName
				yyc4819 = true
			}
			yyh4819.ElemContainerState(yyj4819)
			if yyj4819 < len(yyv4819) {
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = ""
				} else {
					yyv4819[yyj4819] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4819 < len(yyv4819) {
			yyv4819 = yyv4819[:yyj4819]
			yyc4819 = true
		} else if yyj4819 == 0 && yyv4819 == nil {
			yyv4819 = []UniqueVolumeName{}
			yyc4819 = true
		}
	}
	yyh4819.End()
	if yyc4819 {
		*v = yyv4819
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4823 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4824 := &yyv4823
		yy4824.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4825 := *v
	yyh4825, yyl4825 := z.DecSliceHelperStart()
	var yyc4825 bool
	if yyl4825 == 0 {
		if yyv4825 == nil {
			yyv4825 = []AttachedVolume{}
			yyc4825 = true
		} else if len(yyv4825) != 0 {
			yyv4825 = yyv4825[:0]
			yyc4825 = true
		}
	} else if yyl4825 > 0 {
		var yyrr4825, yyrl4825 int
		var yyrt4825 bool
		if yyl4825 > cap(yyv4825) {

			yyrg4825 := len(yyv4825) > 0
			yyv24825 := yyv4825
			yyrl4825, yyrt4825 = z.DecInferLen(yyl4825, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4825 {
				if yyrl4825 <= cap(yyv4825) {
					yyv4825 = yyv4825[:yyrl4825]
				} else {
					yyv4825 = make([]AttachedVolume, yyrl4825)
				}
			} else {
				yyv4825 = make([]AttachedVolume, yyrl4825)
			}
			yyc4825 = true
			yyrr4825 = len(yyv4825)
			if yyrg4825 {
				copy(yyv4825, yyv24825)
			}
		} else if yyl4825 != len(yyv4825) {
			yyv4825 = yyv4825[:yyl4825]
			yyc4825 = true
		}
		yyj4825 := 0
		for ; yyj4825 < yyrr4825; yyj4825++ {
			yyh4825.ElemContainerState(yyj4825)
			if r.TryDecodeAsNil() {
				yyv4825[yyj4825] = AttachedVolume{}
			} else {
				yyv4826 := &yyv4825[yyj4825]
				yyv4826.CodecDecodeSelf(d)
			}

		}
		if yyrt4825 {
			for ; yyj4825 < yyl4825; yyj4825++ {
				yyv4825 = append(yyv4825, AttachedVolume{})
				yyh4825.ElemContainerState(yyj4825)
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = AttachedVolume{}
				} else {
					yyv4827 := &yyv4825[yyj4825]
					yyv4827.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4825 := 0
		for ; !r.CheckBreak(); yyj4825++ {

			if yyj4825 >= len(yyv4825) {
				yyv4825 = append(yyv4825, AttachedVolume{}) // var yyz4825 AttachedVolume
				yyc4825 = true
			}
			yyh4825.ElemContainerState(yyj4825)
			if yyj4825 < len(yyv4825) {
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = AttachedVolume{}
				} else {
					yyv4828 := &yyv4825[yyj4825]
					yyv4828.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4825 < len(yyv4825) {
			yyv4825 = yyv4825[:yyj4825]
			yyc4825 = true
		} else if yyj4825 == 0 && yyv4825 == nil {
			yyv4825 = []AttachedVolume{}
			yyc4825 = true
		}
	}
	yyh4825.End()
	if yyc4825 {
		*v = yyv4825
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4829 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4830 := &yyv4829
		yy4830.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4831 := *v
	yyh4831, yyl4831 := z.DecSliceHelperStart()
	var yyc4831 bool
	if yyl4831 == 0 {
		if yyv4831 == nil {
			yyv4831 = []PreferAvoidPodsEntry{}
			yyc4831 = true
		} else if len(yyv4831) != 0 {
			yyv4831 = yyv4831[:0]
			yyc4831 = true
		}
	} else if yyl4831 > 0 {
		var yyrr4831, yyrl4831 int
		var yyrt4831 bool
		if yyl4831 > cap(yyv4831) {

			yyrg4831 := len(yyv4831) > 0
			yyv24831 := yyv4831
			yyrl4831, yyrt4831 = z.DecInferLen(yyl4831, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4831 {
				if yyrl4831 <= cap(yyv4831) {
					yyv4831 = yyv4831[:yyrl4831]
				} else {
					yyv4831 = make([]PreferAvoidPodsEntry, yyrl4831)
				}
			} else {
				yyv4831 = make([]PreferAvoidPodsEntry, yyrl4831)
			}
			yyc4831 = true
			yyrr4831 = len(yyv4831)
			if yyrg4831 {
				copy(yyv4831, yyv24831)
			}
		} else if yyl4831 != len(yyv4831) {
			yyv4831 = yyv4831[:yyl4831]
			yyc4831 = true
		}
		yyj4831 := 0
		for ; yyj4831 < yyrr4831; yyj4831++ {
			yyh4831.ElemContainerState(yyj4831)
			if r.TryDecodeAsNil() {
				yyv4831[yyj4831] = PreferAvoidPodsEntry{}
			} else {
				yyv4832 := &yyv4831[yyj4831]
				yyv4832.CodecDecodeSelf(d)
			}

		}
		if yyrt4831 {
			for ; yyj4831 < yyl4831; yyj4831++ {
				yyv4831 = append(yyv4831, PreferAvoidPodsEntry{})
				yyh4831.ElemContainerState(yyj4831)
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = PreferAvoidPodsEntry{}
				} else {
					yyv4833 := &yyv4831[yyj4831]
					yyv4833.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4831 := 0
		for ; !r.CheckBreak(); yyj4831++ {

			if yyj4831 >= len(yyv4831) {
				yyv4831 = append(yyv4831, PreferAvoidPodsEntry{}) // var yyz4831 PreferAvoidPodsEntry
				yyc4831 = true
			}
			yyh4831.ElemContainerState(yyj4831)
			if yyj4831 < len(yyv4831) {
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = PreferAvoidPodsEntry{}
				} else {
					yyv4834 := &yyv4831[yyj4831]
					yyv4834.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4831 < len(yyv4831) {
			yyv4831 = yyv4831[:yyj4831]
			yyc4831 = true
		} else if yyj4831 == 0 && yyv4831 == nil {
			yyv4831 = []PreferAvoidPodsEntry{}
			yyc4831 = true
		}
	}
	yyh4831.End()
	if yyc4831 {
		*v = yyv4831
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4835, yyv4835 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4835.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4836 := &yyv4835
		yym4837 := z.EncBinary()
		_ = yym4837
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4836) {
		} else if !yym4837 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4836)
		} else {
			z.EncFallback(yy4836)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4838 := *v
	yyl4838 := r.ReadMapStart()
	yybh4838 := z.DecBasicHandle()
	if yyv4838 == nil {
		yyrl4838, _ := z.DecInferLen(yyl4838, yybh4838.MaxInitLen, 72)
		yyv4838 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4838)
		*v = yyv4838
	}
	var yymk4838 ResourceName
	var yymv4838 pkg3_resource.Quantity
	var yymg4838 bool
	if yybh4838.MapValueReset {
		yymg4838 = true
	}
	if yyl4838 > 0 {
		for yyj4838 := 0; yyj4838 < yyl4838; yyj4838++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4838 = ""
			} else {
				yymk4838 = ResourceName(r.DecodeString())
			}

			if yymg4838 {
				yymv4838 = yyv4838[yymk4838]
			} else {
				yymv4838 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4838 = pkg3_resource.Quantity{}
			} else {
				yyv4840 := &yymv4838
				yym4841 := z.DecBinary()
				_ = yym4841
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4840) {
				} else if !yym4841 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4840)
				} else {
					z.DecFallback(yyv4840, false)
				}
			}

			if yyv4838 != nil {
				yyv4838[yymk4838] = yymv4838
			}
		}
	} else if yyl4838 < 0 {
		for yyj4838 := 0; !r.CheckBreak(); yyj4838++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4838 = ""
			} else {
				yymk4838 = ResourceName(r.DecodeString())
			}

			if yymg4838 {
				yymv4838 = yyv4838[yymk4838]
			} else {
				yymv4838 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4838 = pkg3_resource.Quantity{}
			} else {
				yyv4843 := &yymv4838
				yym4844 := z.DecBinary()
				_ = yym4844
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4843) {
				} else if !yym4844 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4843)
				} else {
					z.DecFallback(yyv4843, false)
				}
			}

			if yyv4838 != nil {
				yyv4838[yymk4838] = yymv4838
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4845 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4846 := &yyv4845
		yy4846.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4847 := *v
	yyh4847, yyl4847 := z.DecSliceHelperStart()
	var yyc4847 bool
	if yyl4847 == 0 {
		if yyv4847 == nil {
			yyv4847 = []Node{}
			yyc4847 = true
		} else if len(yyv4847) != 0 {
			yyv4847 = yyv4847[:0]
			yyc4847 = true
		}
	} else if yyl4847 > 0 {
		var yyrr4847, yyrl4847 int
		var yyrt4847 bool
		if yyl4847 > cap(yyv4847) {

			yyrg4847 := len(yyv4847) > 0
			yyv24847 := yyv4847
			yyrl4847, yyrt4847 = z.DecInferLen(yyl4847, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4847 {
				if yyrl4847 <= cap(yyv4847) {
					yyv4847 = yyv4847[:yyrl4847]
				} else {
					yyv4847 = make([]Node, yyrl4847)
				}
			} else {
				yyv4847 = make([]Node, yyrl4847)
			}
			yyc4847 = true
			yyrr4847 = len(yyv4847)
			if yyrg4847 {
				copy(yyv4847, yyv24847)
			}
		} else if yyl4847 != len(yyv4847) {
			yyv4847 = yyv4847[:yyl4847]
			yyc4847 = true
		}
		yyj4847 := 0
		for ; yyj4847 < yyrr4847; yyj4847++ {
			yyh4847.ElemContainerState(yyj4847)
			if r.TryDecodeAsNil() {
				yyv4847[yyj4847] = Node{}
			} else {
				yyv4848 := &yyv4847[yyj4847]
				yyv4848.CodecDecodeSelf(d)
			}

		}
		if yyrt4847 {
			for ; yyj4847 < yyl4847; yyj4847++ {
				yyv4847 = append(yyv4847, Node{})
				yyh4847.ElemContainerState(yyj4847)
				if r.TryDecodeAsNil() {
					yyv4847[yyj4847] = Node{}
				} else {
					yyv4849 := &yyv4847[yyj4847]
					yyv4849.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4847 := 0
		for ; !r.CheckBreak(); yyj4847++ {

			if yyj4847 >= len(yyv4847) {
				yyv4847 = append(yyv4847, Node{}) // var yyz4847 Node
				yyc4847 = true
			}
			yyh4847.ElemContainerState(yyj4847)
			if yyj4847 < len(yyv4847) {
				if r.TryDecodeAsNil() {
					yyv4847[yyj4847] = Node{}
				} else {
					yyv4850 := &yyv4847[yyj4847]
					yyv4850.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4847 < len(yyv4847) {
			yyv4847 = yyv4847[:yyj4847]
			yyc4847 = true
		} else if yyj4847 == 0 && yyv4847 == nil {
			yyv4847 = []Node{}
			yyc4847 = true
		}
	}
	yyh4847.End()
	if yyc4847 {
		*v = yyv4847
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4851 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4851.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4852 := *v
	yyh4852, yyl4852 := z.DecSliceHelperStart()
	var yyc4852 bool
	if yyl4852 == 0 {
		if yyv4852 == nil {
			yyv4852 = []FinalizerName{}
			yyc4852 = true
		} else if len(yyv4852) != 0 {
			yyv4852 = yyv4852[:0]
			yyc4852 = true
		}
	} else if yyl4852 > 0 {
		var yyrr4852, yyrl4852 int
		var yyrt4852 bool
		if yyl4852 > cap(yyv4852) {

			yyrl4852, yyrt4852 = z.DecInferLen(yyl4852, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4852 {
				if yyrl4852 <= cap(yyv4852) {
					yyv4852 = yyv4852[:yyrl4852]
				} else {
					yyv4852 = make([]FinalizerName, yyrl4852)
				}
			} else {
				yyv4852 = make([]FinalizerName, yyrl4852)
			}
			yyc4852 = true
			yyrr4852 = len(yyv4852)
		} else if yyl4852 != len(yyv4852) {
			yyv4852 = yyv4852[:yyl4852]
			yyc4852 = true
		}
		yyj4852 := 0
		for ; yyj4852 < yyrr4852; yyj4852++ {
			yyh4852.ElemContainerState(yyj4852)
			if r.TryDecodeAsNil() {
				yyv4852[yyj4852] = ""
			} else {
				yyv4852[yyj4852] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4852 {
			for ; yyj4852 < yyl4852; yyj4852++ {
				yyv4852 = append(yyv4852, "")
				yyh4852.ElemContainerState(yyj4852)
				if r.TryDecodeAsNil() {
					yyv4852[yyj4852] = ""
				} else {
					yyv4852[yyj4852] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4852 := 0
		for ; !r.CheckBreak(); yyj4852++ {

			if yyj4852 >= len(yyv4852) {
				yyv4852 = append(yyv4852, "") // var yyz4852 FinalizerName
				yyc4852 = true
			}
			yyh4852.ElemContainerState(yyj4852)
			if yyj4852 < len(yyv4852) {
				if r.TryDecodeAsNil() {
					yyv4852[yyj4852] = ""
				} else {
					yyv4852[yyj4852] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4852 < len(yyv4852) {
			yyv4852 = yyv4852[:yyj4852]
			yyc4852 = true
		} else if yyj4852 == 0 && yyv4852 == nil {
			yyv4852 = []FinalizerName{}
			yyc4852 = true
		}
	}
	yyh4852.End()
	if yyc4852 {
		*v = yyv4852
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4856 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4857 := &yyv4856
		yy4857.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4858 := *v
	yyh4858, yyl4858 := z.DecSliceHelperStart()
	var yyc4858 bool
	if yyl4858 == 0 {
		if yyv4858 == nil {
			yyv4858 = []Namespace{}
			yyc4858 = true
		} else if len(yyv4858) != 0 {
			yyv4858 = yyv4858[:0]
			yyc4858 = true
		}
	} else if yyl4858 > 0 {
		var yyrr4858, yyrl4858 int
		var yyrt4858 bool
		if yyl4858 > cap(yyv4858) {

			yyrg4858 := len(yyv4858) > 0
			yyv24858 := yyv4858
			yyrl4858, yyrt4858 = z.DecInferLen(yyl4858, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4858 {
				if yyrl4858 <= cap(yyv4858) {
					yyv4858 = yyv4858[:yyrl4858]
				} else {
					yyv4858 = make([]Namespace, yyrl4858)
				}
			} else {
				yyv4858 = make([]Namespace, yyrl4858)
			}
			yyc4858 = true
			yyrr4858 = len(yyv4858)
			if yyrg4858 {
				copy(yyv4858, yyv24858)
			}
		} else if yyl4858 != len(yyv4858) {
			yyv4858 = yyv4858[:yyl4858]
			yyc4858 = true
		}
		yyj4858 := 0
		for ; yyj4858 < yyrr4858; yyj4858++ {
			yyh4858.ElemContainerState(yyj4858)
			if r.TryDecodeAsNil() {
				yyv4858[yyj4858] = Namespace{}
			} else {
				yyv4859 := &yyv4858[yyj4858]
				yyv4859.CodecDecodeSelf(d)
			}

		}
		if yyrt4858 {
			for ; yyj4858 < yyl4858; yyj4858++ {
				yyv4858 = append(yyv4858, Namespace{})
				yyh4858.ElemContainerState(yyj4858)
				if r.TryDecodeAsNil() {
					yyv4858[yyj4858] = Namespace{}
				} else {
					yyv4860 := &yyv4858[yyj4858]
					yyv4860.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4858 := 0
		for ; !r.CheckBreak(); yyj4858++ {

			if yyj4858 >= len(yyv4858) {
				yyv4858 = append(yyv4858, Namespace{}) // var yyz4858 Namespace
				yyc4858 = true
			}
			yyh4858.ElemContainerState(yyj4858)
			if yyj4858 < len(yyv4858) {
				if r.TryDecodeAsNil() {
					yyv4858[yyj4858] = Namespace{}
				} else {
					yyv4861 := &yyv4858[yyj4858]
					yyv4861.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4858 < len(yyv4858) {
			yyv4858 = yyv4858[:yyj4858]
			yyc4858 = true
		} else if yyj4858 == 0 && yyv4858 == nil {
			yyv4858 = []Namespace{}
			yyc4858 = true
		}
	}
	yyh4858.End()
	if yyc4858 {
		*v = yyv4858
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4862 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4863 := &yyv4862
		yy4863.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4864 := *v
	yyh4864, yyl4864 := z.DecSliceHelperStart()
	var yyc4864 bool
	if yyl4864 == 0 {
		if yyv4864 == nil {
			yyv4864 = []Event{}
			yyc4864 = true
		} else if len(yyv4864) != 0 {
			yyv4864 = yyv4864[:0]
			yyc4864 = true
		}
	} else if yyl4864 > 0 {
		var yyrr4864, yyrl4864 int
		var yyrt4864 bool
		if yyl4864 > cap(yyv4864) {

			yyrg4864 := len(yyv4864) > 0
			yyv24864 := yyv4864
			yyrl4864, yyrt4864 = z.DecInferLen(yyl4864, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4864 {
				if yyrl4864 <= cap(yyv4864) {
					yyv4864 = yyv4864[:yyrl4864]
				} else {
					yyv4864 = make([]Event, yyrl4864)
				}
			} else {
				yyv4864 = make([]Event, yyrl4864)
			}
			yyc4864 = true
			yyrr4864 = len(yyv4864)
			if yyrg4864 {
				copy(yyv4864, yyv24864)
			}
		} else if yyl4864 != len(yyv4864) {
			yyv4864 = yyv4864[:yyl4864]
			yyc4864 = true
		}
		yyj4864 := 0
		for ; yyj4864 < yyrr4864; yyj4864++ {
			yyh4864.ElemContainerState(yyj4864)
			if r.TryDecodeAsNil() {
				yyv4864[yyj4864] = Event{}
			} else {
				yyv4865 := &yyv4864[yyj4864]
				yyv4865.CodecDecodeSelf(d)
			}

		}
		if yyrt4864 {
			for ; yyj4864 < yyl4864; yyj4864++ {
				yyv4864 = append(yyv4864, Event{})
				yyh4864.ElemContainerState(yyj4864)
				if r.TryDecodeAsNil() {
					yyv4864[yyj4864] = Event{}
				} else {
					yyv4866 := &yyv4864[yyj4864]
					yyv4866.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4864 := 0
		for ; !r.CheckBreak(); yyj4864++ {

			if yyj4864 >= len(yyv4864) {
				yyv4864 = append(yyv4864, Event{}) // var yyz4864 Event
				yyc4864 = true
			}
			yyh4864.ElemContainerState(yyj4864)
			if yyj4864 < len(yyv4864) {
				if r.TryDecodeAsNil() {
					yyv4864[yyj4864] = Event{}
				} else {
					yyv4867 := &yyv4864[yyj4864]
					yyv4867.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4864 < len(yyv4864) {
			yyv4864 = yyv4864[:yyj4864]
			yyc4864 = true
		} else if yyj4864 == 0 && yyv4864 == nil {
			yyv4864 = []Event{}
			yyc4864 = true
		}
	}
	yyh4864.End()
	if yyc4864 {
		*v = yyv4864
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4868 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4869 := &yyv4868
		yym4870 := z.EncBinary()
		_ = yym4870
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4869) {
		} else if !yym4870 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4869)
		} else {
			z.EncFallback(yy4869)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4871 := *v
	yyh4871, yyl4871 := z.DecSliceHelperStart()
	var yyc4871 bool
	if yyl4871 == 0 {
		if yyv4871 == nil {
			yyv4871 = []pkg5_runtime.RawExtension{}
			yyc4871 = true
		} else if len(yyv4871) != 0 {
			yyv4871 = yyv4871[:0]
			yyc4871 = true
		}
	} else if yyl4871 > 0 {
		var yyrr4871, yyrl4871 int
		var yyrt4871 bool
		if yyl4871 > cap(yyv4871) {

			yyrg4871 := len(yyv4871) > 0
			yyv24871 := yyv4871
			yyrl4871, yyrt4871 = z.DecInferLen(yyl4871, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4871 {
				if yyrl4871 <= cap(yyv4871) {
					yyv4871 = yyv4871[:yyrl4871]
				} else {
					yyv4871 = make([]pkg5_runtime.RawExtension, yyrl4871)
				}
			} else {
				yyv4871 = make([]pkg5_runtime.RawExtension, yyrl4871)
			}
			yyc4871 = true
			yyrr4871 = len(yyv4871)
			if yyrg4871 {
				copy(yyv4871, yyv24871)
			}
		} else if yyl4871 != len(yyv4871) {
			yyv4871 = yyv4871[:yyl4871]
			yyc4871 = true
		}
		yyj4871 := 0
		for ; yyj4871 < yyrr4871; yyj4871++ {
			yyh4871.ElemContainerState(yyj4871)
			if r.TryDecodeAsNil() {
				yyv4871[yyj4871] = pkg5_runtime.RawExtension{}
			} else {
				yyv4872 := &yyv4871[yyj4871]
				yym4873 := z.DecBinary()
				_ = yym4873
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4872) {
				} else if !yym4873 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4872)
				} else {
					z.DecFallback(yyv4872, false)
				}
			}

		}
		if yyrt4871 {
			for ; yyj4871 < yyl4871; yyj4871++ {
				yyv4871 = append(yyv4871, pkg5_runtime.RawExtension{})
				yyh4871.ElemContainerState(yyj4871)
				if r.TryDecodeAsNil() {
					yyv4871[yyj4871] = pkg5_runtime.RawExtension{}
				} else {
					yyv4874 := &yyv4871[yyj4871]
					yym4875 := z.DecBinary()
					_ = yym4875
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4874) {
					} else if !yym4875 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4874)
					} else {
						z.DecFallback(yyv4874, false)
					}
				}

			}
		}

	} else {
		yyj4871 := 0
		for ; !r.CheckBreak(); yyj4871++ {

			if yyj4871 >= len(yyv4871) {
				yyv4871 = append(yyv4871, pkg5_runtime.RawExtension{}) // var yyz4871 pkg5_runtime.RawExtension
				yyc4871 = true
			}
			yyh4871.ElemContainerState(yyj4871)
			if yyj4871 < len(yyv4871) {
				if r.TryDecodeAsNil() {
					yyv4871[yyj4871] = pkg5_runtime.RawExtension{}
				} else {
					yyv4876 := &yyv4871[yyj4871]
					yym4877 := z.DecBinary()
					_ = yym4877
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4876) {
					} else if !yym4877 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4876)
					} else {
						z.DecFallback(yyv4876, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4871 < len(yyv4871) {
			yyv4871 = yyv4871[:yyj4871]
			yyc4871 = true
		} else if yyj4871 == 0 && yyv4871 == nil {
			yyv4871 = []pkg5_runtime.RawExtension{}
			yyc4871 = true
		}
	}
	yyh4871.End()
	if yyc4871 {
		*v = yyv4871
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4878 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4879 := &yyv4878
		yy4879.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4880 := *v
	yyh4880, yyl4880 := z.DecSliceHelperStart()
	var yyc4880 bool
	if yyl4880 == 0 {
		if yyv4880 == nil {
			yyv4880 = []LimitRangeItem{}
			yyc4880 = true
		} else if len(yyv4880) != 0 {
			yyv4880 = yyv4880[:0]
			yyc4880 = true
		}
	} else if yyl4880 > 0 {
		var yyrr4880, yyrl4880 int
		var yyrt4880 bool
		if yyl4880 > cap(yyv4880) {

			yyrg4880 := len(yyv4880) > 0
			yyv24880 := yyv4880
			yyrl4880, yyrt4880 = z.DecInferLen(yyl4880, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4880 {
				if yyrl4880 <= cap(yyv4880) {
					yyv4880 = yyv4880[:yyrl4880]
				} else {
					yyv4880 = make([]LimitRangeItem, yyrl4880)
				}
			} else {
				yyv4880 = make([]LimitRangeItem, yyrl4880)
			}
			yyc4880 = true
			yyrr4880 = len(yyv4880)
			if yyrg4880 {
				copy(yyv4880, yyv24880)
			}
		} else if yyl4880 != len(yyv4880) {
			yyv4880 = yyv4880[:yyl4880]
			yyc4880 = true
		}
		yyj4880 := 0
		for ; yyj4880 < yyrr4880; yyj4880++ {
			yyh4880.ElemContainerState(yyj4880)
			if r.TryDecodeAsNil() {
				yyv4880[yyj4880] = LimitRangeItem{}
			} else {
				yyv4881 := &yyv4880[yyj4880]
				yyv4881.CodecDecodeSelf(d)
			}

		}
		if yyrt4880 {
			for ; yyj4880 < yyl4880; yyj4880++ {
				yyv4880 = append(yyv4880, LimitRangeItem{})
				yyh4880.ElemContainerState(yyj4880)
				if r.TryDecodeAsNil() {
					yyv4880[yyj4880] = LimitRangeItem{}
				} else {
					yyv4882 := &yyv4880[yyj4880]
					yyv4882.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4880 := 0
		for ; !r.CheckBreak(); yyj4880++ {

			if yyj4880 >= len(yyv4880) {
				yyv4880 = append(yyv4880, LimitRangeItem{}) // var yyz4880 LimitRangeItem
				yyc4880 = true
			}
			yyh4880.ElemContainerState(yyj4880)
			if yyj4880 < len(yyv4880) {
				if r.TryDecodeAsNil() {
					yyv4880[yyj4880] = LimitRangeItem{}
				} else {
					yyv4883 := &yyv4880[yyj4880]
					yyv4883.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4880 < len(yyv4880) {
			yyv4880 = yyv4880[:yyj4880]
			yyc4880 = true
		} else if yyj4880 == 0 && yyv4880 == nil {
			yyv4880 = []LimitRangeItem{}
			yyc4880 = true
		}
	}
	yyh4880.End()
	if yyc4880 {
		*v = yyv4880
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4884 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4885 := &yyv4884
		yy4885.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4886 := *v
	yyh4886, yyl4886 := z.DecSliceHelperStart()
	var yyc4886 bool
	if yyl4886 == 0 {
		if yyv4886 == nil {
			yyv4886 = []LimitRange{}
			yyc4886 = true
		} else if len(yyv4886) != 0 {
			yyv4886 = yyv4886[:0]
			yyc4886 = true
		}
	} else if yyl4886 > 0 {
		var yyrr4886, yyrl4886 int
		var yyrt4886 bool
		if yyl4886 > cap(yyv4886) {

			yyrg4886 := len(yyv4886) > 0
			yyv24886 := yyv4886
			yyrl4886, yyrt4886 = z.DecInferLen(yyl4886, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4886 {
				if yyrl4886 <= cap(yyv4886) {
					yyv4886 = yyv4886[:yyrl4886]
				} else {
					yyv4886 = make([]LimitRange, yyrl4886)
				}
			} else {
				yyv4886 = make([]LimitRange, yyrl4886)
			}
			yyc4886 = true
			yyrr4886 = len(yyv4886)
			if yyrg4886 {
				copy(yyv4886, yyv24886)
			}
		} else if yyl4886 != len(yyv4886) {
			yyv4886 = yyv4886[:yyl4886]
			yyc4886 = true
		}
		yyj4886 := 0
		for ; yyj4886 < yyrr4886; yyj4886++ {
			yyh4886.ElemContainerState(yyj4886)
			if r.TryDecodeAsNil() {
				yyv4886[yyj4886] = LimitRange{}
			} else {
				yyv4887 := &yyv4886[yyj4886]
				yyv4887.CodecDecodeSelf(d)
			}

		}
		if yyrt4886 {
			for ; yyj4886 < yyl4886; yyj4886++ {
				yyv4886 = append(yyv4886, LimitRange{})
				yyh4886.ElemContainerState(yyj4886)
				if r.TryDecodeAsNil() {
					yyv4886[yyj4886] = LimitRange{}
				} else {
					yyv4888 := &yyv4886[yyj4886]
					yyv4888.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4886 := 0
		for ; !r.CheckBreak(); yyj4886++ {

			if yyj4886 >= len(yyv4886) {
				yyv4886 = append(yyv4886, LimitRange{}) // var yyz4886 LimitRange
				yyc4886 = true
			}
			yyh4886.ElemContainerState(yyj4886)
			if yyj4886 < len(yyv4886) {
				if r.TryDecodeAsNil() {
					yyv4886[yyj4886] = LimitRange{}
				} else {
					yyv4889 := &yyv4886[yyj4886]
					yyv4889.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4886 < len(yyv4886) {
			yyv4886 = yyv4886[:yyj4886]
			yyc4886 = true
		} else if yyj4886 == 0 && yyv4886 == nil {
			yyv4886 = []LimitRange{}
			yyc4886 = true
		}
	}
	yyh4886.End()
	if yyc4886 {
		*v = yyv4886
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4890 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4890.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4891 := *v
	yyh4891, yyl4891 := z.DecSliceHelperStart()
	var yyc4891 bool
	if yyl4891 == 0 {
		if yyv4891 == nil {
			yyv4891 = []ResourceQuotaScope{}
			yyc4891 = true
		} else if len(yyv4891) != 0 {
			yyv4891 = yyv4891[:0]
			yyc4891 = true
		}
	} else if yyl4891 > 0 {
		var yyrr4891, yyrl4891 int
		var yyrt4891 bool
		if yyl4891 > cap(yyv4891) {

			yyrl4891, yyrt4891 = z.DecInferLen(yyl4891, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4891 {
				if yyrl4891 <= cap(yyv4891) {
					yyv4891 = yyv4891[:yyrl4891]
				} else {
					yyv4891 = make([]ResourceQuotaScope, yyrl4891)
				}
			} else {
				yyv4891 = make([]ResourceQuotaScope, yyrl4891)
			}
			yyc4891 = true
			yyrr4891 = len(yyv4891)
		} else if yyl4891 != len(yyv4891) {
			yyv4891 = yyv4891[:yyl4891]
			yyc4891 = true
		}
		yyj4891 := 0
		for ; yyj4891 < yyrr4891; yyj4891++ {
			yyh4891.ElemContainerState(yyj4891)
			if r.TryDecodeAsNil() {
				yyv4891[yyj4891] = ""
			} else {
				yyv4891[yyj4891] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4891 {
			for ; yyj4891 < yyl4891; yyj4891++ {
				yyv4891 = append(yyv4891, "")
				yyh4891.ElemContainerState(yyj4891)
				if r.TryDecodeAsNil() {
					yyv4891[yyj4891] = ""
				} else {
					yyv4891[yyj4891] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4891 := 0
		for ; !r.CheckBreak(); yyj4891++ {

			if yyj4891 >= len(yyv4891) {
				yyv4891 = append(yyv4891, "") // var yyz4891 ResourceQuotaScope
				yyc4891 = true
			}
			yyh4891.ElemContainerState(yyj4891)
			if yyj4891 < len(yyv4891) {
				if r.TryDecodeAsNil() {
					yyv4891[yyj4891] = ""
				} else {
					yyv4891[yyj4891] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4891 < len(yyv4891) {
			yyv4891 = yyv4891[:yyj4891]
			yyc4891 = true
		} else if yyj4891 == 0 && yyv4891 == nil {
			yyv4891 = []ResourceQuotaScope{}
			yyc4891 = true
		}
	}
	yyh4891.End()
	if yyc4891 {
		*v = yyv4891
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4895 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4896 := &yyv4895
		yy4896.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4897 := *v
	yyh4897, yyl4897 := z.DecSliceHelperStart()
	var yyc4897 bool
	if yyl4897 == 0 {
		if yyv4897 == nil {
			yyv4897 = []ResourceQuota{}
			yyc4897 = true
		} else if len(yyv4897) != 0 {
			yyv4897 = yyv4897[:0]
			yyc4897 = true
		}
	} else if yyl4897 > 0 {
		var yyrr4897, yyrl4897 int
		var yyrt4897 bool
		if yyl4897 > cap(yyv4897) {

			yyrg4897 := len(yyv4897) > 0
			yyv24897 := yyv4897
			yyrl4897, yyrt4897 = z.DecInferLen(yyl4897, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4897 {
				if yyrl4897 <= cap(yyv4897) {
					yyv4897 = yyv4897[:yyrl4897]
				} else {
					yyv4897 = make([]ResourceQuota, yyrl4897)
				}
			} else {
				yyv4897 = make([]ResourceQuota, yyrl4897)
			}
			yyc4897 = true
			yyrr4897 = len(yyv4897)
			if yyrg4897 {
				copy(yyv4897, yyv24897)
			}
		} else if yyl4897 != len(yyv4897) {
			yyv4897 = yyv4897[:yyl4897]
			yyc4897 = true
		}
		yyj4897 := 0
		for ; yyj4897 < yyrr4897; yyj4897++ {
			yyh4897.ElemContainerState(yyj4897)
			if r.TryDecodeAsNil() {
				yyv4897[yyj4897] = ResourceQuota{}
			} else {
				yyv4898 := &yyv4897[yyj4897]
				yyv4898.CodecDecodeSelf(d)
			}

		}
		if yyrt4897 {
			for ; yyj4897 < yyl4897; yyj4897++ {
				yyv4897 = append(yyv4897, ResourceQuota{})
				yyh4897.ElemContainerState(yyj4897)
				if r.TryDecodeAsNil() {
					yyv4897[yyj4897] = ResourceQuota{}
				} else {
					yyv4899 := &yyv4897[yyj4897]
					yyv4899.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4897 := 0
		for ; !r.CheckBreak(); yyj4897++ {

			if yyj4897 >= len(yyv4897) {
				yyv4897 = append(yyv4897, ResourceQuota{}) // var yyz4897 ResourceQuota
				yyc4897 = true
			}
			yyh4897.ElemContainerState(yyj4897)
			if yyj4897 < len(yyv4897) {
				if r.TryDecodeAsNil() {
					yyv4897[yyj4897] = ResourceQuota{}
				} else {
					yyv4900 := &yyv4897[yyj4897]
					yyv4900.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4897 < len(yyv4897) {
			yyv4897 = yyv4897[:yyj4897]
			yyc4897 = true
		} else if yyj4897 == 0 && yyv4897 == nil {
			yyv4897 = []ResourceQuota{}
			yyc4897 = true
		}
	}
	yyh4897.End()
	if yyc4897 {
		*v = yyv4897
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4901, yyv4901 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4902 := z.EncBinary()
		_ = yym4902
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4901))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4901 == nil {
			r.EncodeNil()
		} else {
			yym4903 := z.EncBinary()
			_ = yym4903
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4901))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4904 := *v
	yyl4904 := r.ReadMapStart()
	yybh4904 := z.DecBasicHandle()
	if yyv4904 == nil {
		yyrl4904, _ := z.DecInferLen(yyl4904, yybh4904.MaxInitLen, 40)
		yyv4904 = make(map[string][]uint8, yyrl4904)
		*v = yyv4904
	}
	var yymk4904 string
	var yymv4904 []uint8
	var yymg4904 bool
	if yybh4904.MapValueReset {
		yymg4904 = true
	}
	if yyl4904 > 0 {
		for yyj4904 := 0; yyj4904 < yyl4904; yyj4904++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4904 = ""
			} else {
				yymk4904 = string(r.DecodeString())
			}

			if yymg4904 {
				yymv4904 = yyv4904[yymk4904]
			} else {
				yymv4904 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4904 = nil
			} else {
				yyv4906 := &yymv4904
				yym4907 := z.DecBinary()
				_ = yym4907
				if false {
				} else {
					*yyv4906 = r.DecodeBytes(*(*[]byte)(yyv4906), false, false)
				}
			}

			if yyv4904 != nil {
				yyv4904[yymk4904] = yymv4904
			}
		}
	} else if yyl4904 < 0 {
		for yyj4904 := 0; !r.CheckBreak(); yyj4904++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4904 = ""
			} else {
				yymk4904 = string(r.DecodeString())
			}

			if yymg4904 {
				yymv4904 = yyv4904[yymk4904]
			} else {
				yymv4904 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4904 = nil
			} else {
				yyv4909 := &yymv4904
				yym4910 := z.DecBinary()
				_ = yym4910
				if false {
				} else {
					*yyv4909 = r.DecodeBytes(*(*[]byte)(yyv4909), false, false)
				}
			}

			if yyv4904 != nil {
				yyv4904[yymk4904] = yymv4904
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4911 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4912 := &yyv4911
		yy4912.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4913 := *v
	yyh4913, yyl4913 := z.DecSliceHelperStart()
	var yyc4913 bool
	if yyl4913 == 0 {
		if yyv4913 == nil {
			yyv4913 = []Secret{}
			yyc4913 = true
		} else if len(yyv4913) != 0 {
			yyv4913 = yyv4913[:0]
			yyc4913 = true
		}
	} else if yyl4913 > 0 {
		var yyrr4913, yyrl4913 int
		var yyrt4913 bool
		if yyl4913 > cap(yyv4913) {

			yyrg4913 := len(yyv4913) > 0
			yyv24913 := yyv4913
			yyrl4913, yyrt4913 = z.DecInferLen(yyl4913, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4913 {
				if yyrl4913 <= cap(yyv4913) {
					yyv4913 = yyv4913[:yyrl4913]
				} else {
					yyv4913 = make([]Secret, yyrl4913)
				}
			} else {
				yyv4913 = make([]Secret, yyrl4913)
			}
			yyc4913 = true
			yyrr4913 = len(yyv4913)
			if yyrg4913 {
				copy(yyv4913, yyv24913)
			}
		} else if yyl4913 != len(yyv4913) {
			yyv4913 = yyv4913[:yyl4913]
			yyc4913 = true
		}
		yyj4913 := 0
		for ; yyj4913 < yyrr4913; yyj4913++ {
			yyh4913.ElemContainerState(yyj4913)
			if r.TryDecodeAsNil() {
				yyv4913[yyj4913] = Secret{}
			} else {
				yyv4914 := &yyv4913[yyj4913]
				yyv4914.CodecDecodeSelf(d)
			}

		}
		if yyrt4913 {
			for ; yyj4913 < yyl4913; yyj4913++ {
				yyv4913 = append(yyv4913, Secret{})
				yyh4913.ElemContainerState(yyj4913)
				if r.TryDecodeAsNil() {
					yyv4913[yyj4913] = Secret{}
				} else {
					yyv4915 := &yyv4913[yyj4913]
					yyv4915.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4913 := 0
		for ; !r.CheckBreak(); yyj4913++ {

			if yyj4913 >= len(yyv4913) {
				yyv4913 = append(yyv4913, Secret{}) // var yyz4913 Secret
				yyc4913 = true
			}
			yyh4913.ElemContainerState(yyj4913)
			if yyj4913 < len(yyv4913) {
				if r.TryDecodeAsNil() {
					yyv4913[yyj4913] = Secret{}
				} else {
					yyv4916 := &yyv4913[yyj4913]
					yyv4916.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4913 < len(yyv4913) {
			yyv4913 = yyv4913[:yyj4913]
			yyc4913 = true
		} else if yyj4913 == 0 && yyv4913 == nil {
			yyv4913 = []Secret{}
			yyc4913 = true
		}
	}
	yyh4913.End()
	if yyc4913 {
		*v = yyv4913
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4917 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4918 := &yyv4917
		yy4918.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4919 := *v
	yyh4919, yyl4919 := z.DecSliceHelperStart()
	var yyc4919 bool
	if yyl4919 == 0 {
		if yyv4919 == nil {
			yyv4919 = []ConfigMap{}
			yyc4919 = true
		} else if len(yyv4919) != 0 {
			yyv4919 = yyv4919[:0]
			yyc4919 = true
		}
	} else if yyl4919 > 0 {
		var yyrr4919, yyrl4919 int
		var yyrt4919 bool
		if yyl4919 > cap(yyv4919) {

			yyrg4919 := len(yyv4919) > 0
			yyv24919 := yyv4919
			yyrl4919, yyrt4919 = z.DecInferLen(yyl4919, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4919 {
				if yyrl4919 <= cap(yyv4919) {
					yyv4919 = yyv4919[:yyrl4919]
				} else {
					yyv4919 = make([]ConfigMap, yyrl4919)
				}
			} else {
				yyv4919 = make([]ConfigMap, yyrl4919)
			}
			yyc4919 = true
			yyrr4919 = len(yyv4919)
			if yyrg4919 {
				copy(yyv4919, yyv24919)
			}
		} else if yyl4919 != len(yyv4919) {
			yyv4919 = yyv4919[:yyl4919]
			yyc4919 = true
		}
		yyj4919 := 0
		for ; yyj4919 < yyrr4919; yyj4919++ {
			yyh4919.ElemContainerState(yyj4919)
			if r.TryDecodeAsNil() {
				yyv4919[yyj4919] = ConfigMap{}
			} else {
				yyv4920 := &yyv4919[yyj4919]
				yyv4920.CodecDecodeSelf(d)
			}

		}
		if yyrt4919 {
			for ; yyj4919 < yyl4919; yyj4919++ {
				yyv4919 = append(yyv4919, ConfigMap{})
				yyh4919.ElemContainerState(yyj4919)
				if r.TryDecodeAsNil() {
					yyv4919[yyj4919] = ConfigMap{}
				} else {
					yyv4921 := &yyv4919[yyj4919]
					yyv4921.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4919 := 0
		for ; !r.CheckBreak(); yyj4919++ {

			if yyj4919 >= len(yyv4919) {
				yyv4919 = append(yyv4919, ConfigMap{}) // var yyz4919 ConfigMap
				yyc4919 = true
			}
			yyh4919.ElemContainerState(yyj4919)
			if yyj4919 < len(yyv4919) {
				if r.TryDecodeAsNil() {
					yyv4919[yyj4919] = ConfigMap{}
				} else {
					yyv4922 := &yyv4919[yyj4919]
					yyv4922.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4919 < len(yyv4919) {
			yyv4919 = yyv4919[:yyj4919]
			yyc4919 = true
		} else if yyj4919 == 0 && yyv4919 == nil {
			yyv4919 = []ConfigMap{}
			yyc4919 = true
		}
	}
	yyh4919.End()
	if yyc4919 {
		*v = yyv4919
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4923 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4924 := &yyv4923
		yy4924.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4925 := *v
	yyh4925, yyl4925 := z.DecSliceHelperStart()
	var yyc4925 bool
	if yyl4925 == 0 {
		if yyv4925 == nil {
			yyv4925 = []ComponentCondition{}
			yyc4925 = true
		} else if len(yyv4925) != 0 {
			yyv4925 = yyv4925[:0]
			yyc4925 = true
		}
	} else if yyl4925 > 0 {
		var yyrr4925, yyrl4925 int
		var yyrt4925 bool
		if yyl4925 > cap(yyv4925) {

			yyrg4925 := len(yyv4925) > 0
			yyv24925 := yyv4925
			yyrl4925, yyrt4925 = z.DecInferLen(yyl4925, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4925 {
				if yyrl4925 <= cap(yyv4925) {
					yyv4925 = yyv4925[:yyrl4925]
				} else {
					yyv4925 = make([]ComponentCondition, yyrl4925)
				}
			} else {
				yyv4925 = make([]ComponentCondition, yyrl4925)
			}
			yyc4925 = true
			yyrr4925 = len(yyv4925)
			if yyrg4925 {
				copy(yyv4925, yyv24925)
			}
		} else if yyl4925 != len(yyv4925) {
			yyv4925 = yyv4925[:yyl4925]
			yyc4925 = true
		}
		yyj4925 := 0
		for ; yyj4925 < yyrr4925; yyj4925++ {
			yyh4925.ElemContainerState(yyj4925)
			if r.TryDecodeAsNil() {
				yyv4925[yyj4925] = ComponentCondition{}
			} else {
				yyv4926 := &yyv4925[yyj4925]
				yyv4926.CodecDecodeSelf(d)
			}

		}
		if yyrt4925 {
			for ; yyj4925 < yyl4925; yyj4925++ {
				yyv4925 = append(yyv4925, ComponentCondition{})
				yyh4925.ElemContainerState(yyj4925)
				if r.TryDecodeAsNil() {
					yyv4925[yyj4925] = ComponentCondition{}
				} else {
					yyv4927 := &yyv4925[yyj4925]
					yyv4927.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4925 := 0
		for ; !r.CheckBreak(); yyj4925++ {

			if yyj4925 >= len(yyv4925) {
				yyv4925 = append(yyv4925, ComponentCondition{}) // var yyz4925 ComponentCondition
				yyc4925 = true
			}
			yyh4925.ElemContainerState(yyj4925)
			if yyj4925 < len(yyv4925) {
				if r.TryDecodeAsNil() {
					yyv4925[yyj4925] = ComponentCondition{}
				} else {
					yyv4928 := &yyv4925[yyj4925]
					yyv4928.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4925 < len(yyv4925) {
			yyv4925 = yyv4925[:yyj4925]
			yyc4925 = true
		} else if yyj4925 == 0 && yyv4925 == nil {
			yyv4925 = []ComponentCondition{}
			yyc4925 = true
		}
	}
	yyh4925.End()
	if yyc4925 {
		*v = yyv4925
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4929 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4930 := &yyv4929
		yy4930.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4931 := *v
	yyh4931, yyl4931 := z.DecSliceHelperStart()
	var yyc4931 bool
	if yyl4931 == 0 {
		if yyv4931 == nil {
			yyv4931 = []ComponentStatus{}
			yyc4931 = true
		} else if len(yyv4931) != 0 {
			yyv4931 = yyv4931[:0]
			yyc4931 = true
		}
	} else if yyl4931 > 0 {
		var yyrr4931, yyrl4931 int
		var yyrt4931 bool
		if yyl4931 > cap(yyv4931) {

			yyrg4931 := len(yyv4931) > 0
			yyv24931 := yyv4931
			yyrl4931, yyrt4931 = z.DecInferLen(yyl4931, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4931 {
				if yyrl4931 <= cap(yyv4931) {
					yyv4931 = yyv4931[:yyrl4931]
				} else {
					yyv4931 = make([]ComponentStatus, yyrl4931)
				}
			} else {
				yyv4931 = make([]ComponentStatus, yyrl4931)
			}
			yyc4931 = true
			yyrr4931 = len(yyv4931)
			if yyrg4931 {
				copy(yyv4931, yyv24931)
			}
		} else if yyl4931 != len(yyv4931) {
			yyv4931 = yyv4931[:yyl4931]
			yyc4931 = true
		}
		yyj4931 := 0
		for ; yyj4931 < yyrr4931; yyj4931++ {
			yyh4931.ElemContainerState(yyj4931)
			if r.TryDecodeAsNil() {
				yyv4931[yyj4931] = ComponentStatus{}
			} else {
				yyv4932 := &yyv4931[yyj4931]
				yyv4932.CodecDecodeSelf(d)
			}

		}
		if yyrt4931 {
			for ; yyj4931 < yyl4931; yyj4931++ {
				yyv4931 = append(yyv4931, ComponentStatus{})
				yyh4931.ElemContainerState(yyj4931)
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = ComponentStatus{}
				} else {
					yyv4933 := &yyv4931[yyj4931]
					yyv4933.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4931 := 0
		for ; !r.CheckBreak(); yyj4931++ {

			if yyj4931 >= len(yyv4931) {
				yyv4931 = append(yyv4931, ComponentStatus{}) // var yyz4931 ComponentStatus
				yyc4931 = true
			}
			yyh4931.ElemContainerState(yyj4931)
			if yyj4931 < len(yyv4931) {
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = ComponentStatus{}
				} else {
					yyv4934 := &yyv4931[yyj4931]
					yyv4934.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4931 < len(yyv4931) {
			yyv4931 = yyv4931[:yyj4931]
			yyc4931 = true
		} else if yyj4931 == 0 && yyv4931 == nil {
			yyv4931 = []ComponentStatus{}
			yyc4931 = true
		}
	}
	yyh4931.End()
	if yyc4931 {
		*v = yyv4931
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4935 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4936 := &yyv4935
		yy4936.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4937 := *v
	yyh4937, yyl4937 := z.DecSliceHelperStart()
	var yyc4937 bool
	if yyl4937 == 0 {
		if yyv4937 == nil {
			yyv4937 = []DownwardAPIVolumeFile{}
			yyc4937 = true
		} else if len(yyv4937) != 0 {
			yyv4937 = yyv4937[:0]
			yyc4937 = true
		}
	} else if yyl4937 > 0 {
		var yyrr4937, yyrl4937 int
		var yyrt4937 bool
		if yyl4937 > cap(yyv4937) {

			yyrg4937 := len(yyv4937) > 0
			yyv24937 := yyv4937
			yyrl4937, yyrt4937 = z.DecInferLen(yyl4937, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4937 {
				if yyrl4937 <= cap(yyv4937) {
					yyv4937 = yyv4937[:yyrl4937]
				} else {
					yyv4937 = make([]DownwardAPIVolumeFile, yyrl4937)
				}
			} else {
				yyv4937 = make([]DownwardAPIVolumeFile, yyrl4937)
			}
			yyc4937 = true
			yyrr4937 = len(yyv4937)
			if yyrg4937 {
				copy(yyv4937, yyv24937)
			}
		} else if yyl4937 != len(yyv4937) {
			yyv4937 = yyv4937[:yyl4937]
			yyc4937 = true
		}
		yyj4937 := 0
		for ; yyj4937 < yyrr4937; yyj4937++ {
			yyh4937.ElemContainerState(yyj4937)
			if r.TryDecodeAsNil() {
				yyv4937[yyj4937] = DownwardAPIVolumeFile{}
			} else {
				yyv4938 := &yyv4937[yyj4937]
				yyv4938.CodecDecodeSelf(d)
			}

		}
		if yyrt4937 {
			for ; yyj4937 < yyl4937; yyj4937++ {
				yyv4937 = append(yyv4937, DownwardAPIVolumeFile{})
				yyh4937.ElemContainerState(yyj4937)
				if r.TryDecodeAsNil() {
					yyv4937[yyj4937] = DownwardAPIVolumeFile{}
				} else {
					yyv4939 := &yyv4937[yyj4937]
					yyv4939.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4937 := 0
		for ; !r.CheckBreak(); yyj4937++ {

			if yyj4937 >= len(yyv4937) {
				yyv4937 = append(yyv4937, DownwardAPIVolumeFile{}) // var yyz4937 DownwardAPIVolumeFile
				yyc4937 = true
			}
			yyh4937.ElemContainerState(yyj4937)
			if yyj4937 < len(yyv4937) {
				if r.TryDecodeAsNil() {
					yyv4937[yyj4937] = DownwardAPIVolumeFile{}
				} else {
					yyv4940 := &yyv4937[yyj4937]
					yyv4940.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4937 < len(yyv4937) {
			yyv4937 = yyv4937[:yyj4937]
			yyc4937 = true
		} else if yyj4937 == 0 && yyv4937 == nil {
			yyv4937 = []DownwardAPIVolumeFile{}
			yyc4937 = true
		}
	}
	yyh4937.End()
	if yyc4937 {
		*v = yyv4937
	}
}
